// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ImagesImage struct {
	// The architecture of Image.
	Architecture string `pulumi:"architecture"`
	// The create time of Image.
	CreatedAt string `pulumi:"createdAt"`
	// The description of Image.
	Description string `pulumi:"description"`
	// The ID of Image.
	ImageId string `pulumi:"imageId"`
	// The name of Image.
	ImageName string `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit bool `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName string `pulumi:"osName"`
	// The operating system type of Image.
	OsType string `pulumi:"osType"`
	// The platform of Image.
	Platform string `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion string `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus string `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size int `pulumi:"size"`
	// A list of Image status.
	Status string `pulumi:"status"`
	// The update time of Image.
	UpdatedAt string `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility string `pulumi:"visibility"`
}

// ImagesImageInput is an input type that accepts ImagesImageArgs and ImagesImageOutput values.
// You can construct a concrete instance of `ImagesImageInput` via:
//
//          ImagesImageArgs{...}
type ImagesImageInput interface {
	pulumi.Input

	ToImagesImageOutput() ImagesImageOutput
	ToImagesImageOutputWithContext(context.Context) ImagesImageOutput
}

type ImagesImageArgs struct {
	// The architecture of Image.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The create time of Image.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of Image.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The name of Image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit pulumi.BoolInput `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The operating system type of Image.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The platform of Image.
	Platform pulumi.StringInput `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus pulumi.StringInput `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size pulumi.IntInput `pulumi:"size"`
	// A list of Image status.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of Image.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (ImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (i ImagesImageArgs) ToImagesImageOutput() ImagesImageOutput {
	return i.ToImagesImageOutputWithContext(context.Background())
}

func (i ImagesImageArgs) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageOutput)
}

// ImagesImageArrayInput is an input type that accepts ImagesImageArray and ImagesImageArrayOutput values.
// You can construct a concrete instance of `ImagesImageArrayInput` via:
//
//          ImagesImageArray{ ImagesImageArgs{...} }
type ImagesImageArrayInput interface {
	pulumi.Input

	ToImagesImageArrayOutput() ImagesImageArrayOutput
	ToImagesImageArrayOutputWithContext(context.Context) ImagesImageArrayOutput
}

type ImagesImageArray []ImagesImageInput

func (ImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (i ImagesImageArray) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return i.ToImagesImageArrayOutputWithContext(context.Background())
}

func (i ImagesImageArray) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageArrayOutput)
}

type ImagesImageOutput struct{ *pulumi.OutputState }

func (ImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (o ImagesImageOutput) ToImagesImageOutput() ImagesImageOutput {
	return o
}

func (o ImagesImageOutput) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return o
}

// The architecture of Image.
func (o ImagesImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Architecture }).(pulumi.StringOutput)
}

// The create time of Image.
func (o ImagesImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of Image.
func (o ImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Image.
func (o ImagesImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageId }).(pulumi.StringOutput)
}

// The name of Image.
func (o ImagesImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// Whether the Image support cloud-init.
func (o ImagesImageOutput) IsSupportCloudInit() pulumi.BoolOutput {
	return o.ApplyT(func(v ImagesImage) bool { return v.IsSupportCloudInit }).(pulumi.BoolOutput)
}

// The name of Image operating system.
func (o ImagesImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsName }).(pulumi.StringOutput)
}

// The operating system type of Image.
func (o ImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The platform of Image.
func (o ImagesImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Platform }).(pulumi.StringOutput)
}

// The platform version of Image.
func (o ImagesImageOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.PlatformVersion }).(pulumi.StringOutput)
}

// The share mode of Image.
func (o ImagesImageOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ShareStatus }).(pulumi.StringOutput)
}

// The size(GiB) of Image.
func (o ImagesImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ImagesImage) int { return v.Size }).(pulumi.IntOutput)
}

// A list of Image status.
func (o ImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of Image.
func (o ImagesImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The visibility of Image.
func (o ImagesImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Visibility }).(pulumi.StringOutput)
}

type ImagesImageArrayOutput struct{ *pulumi.OutputState }

func (ImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) Index(i pulumi.IntInput) ImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesImage {
		return vs[0].([]ImagesImage)[vs[1].(int)]
	}).(ImagesImageOutput)
}

type InstanceDataVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceDataVolumeInput is an input type that accepts InstanceDataVolumeArgs and InstanceDataVolumeOutput values.
// You can construct a concrete instance of `InstanceDataVolumeInput` via:
//
//          InstanceDataVolumeArgs{...}
type InstanceDataVolumeInput interface {
	pulumi.Input

	ToInstanceDataVolumeOutput() InstanceDataVolumeOutput
	ToInstanceDataVolumeOutputWithContext(context.Context) InstanceDataVolumeOutput
}

type InstanceDataVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return i.ToInstanceDataVolumeOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeOutput)
}

// InstanceDataVolumeArrayInput is an input type that accepts InstanceDataVolumeArray and InstanceDataVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceDataVolumeArrayInput` via:
//
//          InstanceDataVolumeArray{ InstanceDataVolumeArgs{...} }
type InstanceDataVolumeArrayInput interface {
	pulumi.Input

	ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput
	ToInstanceDataVolumeArrayOutputWithContext(context.Context) InstanceDataVolumeArrayOutput
}

type InstanceDataVolumeArray []InstanceDataVolumeInput

func (InstanceDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return i.ToInstanceDataVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeArrayOutput)
}

type InstanceDataVolumeOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return o
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstanceDataVolumeOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDataVolume) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The size of volume.
func (o InstanceDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o InstanceDataVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) Index(i pulumi.IntInput) InstanceDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDataVolume {
		return vs[0].([]InstanceDataVolume)[vs[1].(int)]
	}).(InstanceDataVolumeOutput)
}

type InstanceSecondaryNetworkInterface struct {
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId string `pulumi:"subnetId"`
}

// InstanceSecondaryNetworkInterfaceInput is an input type that accepts InstanceSecondaryNetworkInterfaceArgs and InstanceSecondaryNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceInput` via:
//
//          InstanceSecondaryNetworkInterfaceArgs{...}
type InstanceSecondaryNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput
	ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceOutput
}

type InstanceSecondaryNetworkInterfaceArgs struct {
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstanceSecondaryNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return i.ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceOutput)
}

// InstanceSecondaryNetworkInterfaceArrayInput is an input type that accepts InstanceSecondaryNetworkInterfaceArray and InstanceSecondaryNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceArrayInput` via:
//
//          InstanceSecondaryNetworkInterfaceArray{ InstanceSecondaryNetworkInterfaceArgs{...} }
type InstanceSecondaryNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput
	ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceArrayOutput
}

type InstanceSecondaryNetworkInterfaceArray []InstanceSecondaryNetworkInterfaceInput

func (InstanceSecondaryNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return i.ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceArrayOutput)
}

type InstanceSecondaryNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return o
}

// The security group ID set of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet ID of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstanceSecondaryNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecondaryNetworkInterface {
		return vs[0].([]InstanceSecondaryNetworkInterface)[vs[1].(int)]
	}).(InstanceSecondaryNetworkInterfaceOutput)
}

type InstancesInstance struct {
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt string `pulumi:"createdAt"`
	// The description of ECS instance.
	Description string `pulumi:"description"`
	// The host name of ECS instance.
	HostName string `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId string `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName string `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The ssh key ID of ECS instance.
	KeyPairId string `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName string `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces []InstancesInstanceNetworkInterface `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName string `pulumi:"osName"`
	// The os type of ECS instance.
	OsType string `pulumi:"osType"`
	// The status of ECS instance.
	Status string `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode string `pulumi:"stoppedMode"`
	// The update time of ECS instance.
	UpdatedAt string `pulumi:"updatedAt"`
	// The volume detail collection of volume.
	Volumes []InstancesInstanceVolume `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//          InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of ECS instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The host name of ECS instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces InstancesInstanceNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The os type of ECS instance.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The status of ECS instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringInput `pulumi:"stoppedMode"`
	// The update time of ECS instance.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The volume detail collection of volume.
	Volumes InstancesInstanceVolumeArrayInput `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//          InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The number of ECS instance CPU cores.
func (o InstancesInstanceOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Cpus }).(pulumi.IntOutput)
}

// The create time of ECS instance.
func (o InstancesInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of ECS instance.
func (o InstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// The host name of ECS instance.
func (o InstancesInstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.HostName }).(pulumi.StringOutput)
}

// The image ID of ECS instance.
func (o InstancesInstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of ECS instance.
func (o InstancesInstanceOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The spec type of ECS instance.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The ssh key ID of ECS instance.
func (o InstancesInstanceOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// The key pair name of ECS instance.
func (o InstancesInstanceOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The memory size of ECS instance.
func (o InstancesInstanceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The networkInterface detail collection of ECS instance.
func (o InstancesInstanceOutput) NetworkInterfaces() InstancesInstanceNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNetworkInterface { return v.NetworkInterfaces }).(InstancesInstanceNetworkInterfaceArrayOutput)
}

// The os name of ECS instance.
func (o InstancesInstanceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsName }).(pulumi.StringOutput)
}

// The os type of ECS instance.
func (o InstancesInstanceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsType }).(pulumi.StringOutput)
}

// The status of ECS instance.
func (o InstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The stop mode of ECS instance.
func (o InstancesInstanceOutput) StoppedMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StoppedMode }).(pulumi.StringOutput)
}

// The update time of ECS instance.
func (o InstancesInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The volume detail collection of volume.
func (o InstancesInstanceOutput) Volumes() InstancesInstanceVolumeArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceVolume { return v.Volumes }).(InstancesInstanceVolumeArrayOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone ID of ECS instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceNetworkInterface struct {
	// The mac address of networkInterface.
	MacAddress string `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress string `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId string `pulumi:"subnetId"`
	// The type of networkInterface.
	Type string `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
}

// InstancesInstanceNetworkInterfaceInput is an input type that accepts InstancesInstanceNetworkInterfaceArgs and InstancesInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceInput` via:
//
//          InstancesInstanceNetworkInterfaceArgs{...}
type InstancesInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput
	ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceOutput
}

type InstancesInstanceNetworkInterfaceArgs struct {
	// The mac address of networkInterface.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress pulumi.StringInput `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of networkInterface.
	Type pulumi.StringInput `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (InstancesInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return i.ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceOutput)
}

// InstancesInstanceNetworkInterfaceArrayInput is an input type that accepts InstancesInstanceNetworkInterfaceArray and InstancesInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceArrayInput` via:
//
//          InstancesInstanceNetworkInterfaceArray{ InstancesInstanceNetworkInterfaceArgs{...} }
type InstancesInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput
	ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceArrayOutput
}

type InstancesInstanceNetworkInterfaceArray []InstancesInstanceNetworkInterfaceInput

func (InstancesInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return i.ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceArrayOutput)
}

type InstancesInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return o
}

// The mac address of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The primary ip address of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.PrimaryIpAddress }).(pulumi.StringOutput)
}

// The subnet ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.Type }).(pulumi.StringOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type InstancesInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNetworkInterface {
		return vs[0].([]InstancesInstanceNetworkInterface)[vs[1].(int)]
	}).(InstancesInstanceNetworkInterfaceOutput)
}

type InstancesInstanceVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The ID of volume.
	VolumeId string `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName string `pulumi:"volumeName"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstancesInstanceVolumeInput is an input type that accepts InstancesInstanceVolumeArgs and InstancesInstanceVolumeOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeInput` via:
//
//          InstancesInstanceVolumeArgs{...}
type InstancesInstanceVolumeInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput
	ToInstancesInstanceVolumeOutputWithContext(context.Context) InstancesInstanceVolumeOutput
}

type InstancesInstanceVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The ID of volume.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstancesInstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return i.ToInstancesInstanceVolumeOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeOutput)
}

// InstancesInstanceVolumeArrayInput is an input type that accepts InstancesInstanceVolumeArray and InstancesInstanceVolumeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeArrayInput` via:
//
//          InstancesInstanceVolumeArray{ InstancesInstanceVolumeArgs{...} }
type InstancesInstanceVolumeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput
	ToInstancesInstanceVolumeArrayOutputWithContext(context.Context) InstancesInstanceVolumeArrayOutput
}

type InstancesInstanceVolumeArray []InstancesInstanceVolumeInput

func (InstancesInstanceVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return i.ToInstancesInstanceVolumeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeArrayOutput)
}

type InstancesInstanceVolumeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return o
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstancesInstanceVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o InstancesInstanceVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The ID of volume.
func (o InstancesInstanceVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The Name of volume.
func (o InstancesInstanceVolumeOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeName }).(pulumi.StringOutput)
}

// The type of volume.
func (o InstancesInstanceVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstancesInstanceVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceVolume {
		return vs[0].([]InstancesInstanceVolume)[vs[1].(int)]
	}).(InstancesInstanceVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageInput)(nil)).Elem(), ImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageArrayInput)(nil)).Elem(), ImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeInput)(nil)).Elem(), InstanceDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeArrayInput)(nil)).Elem(), InstanceDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceArrayInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceArrayInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeInput)(nil)).Elem(), InstancesInstanceVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeArrayInput)(nil)).Elem(), InstancesInstanceVolumeArray{})
	pulumi.RegisterOutputType(ImagesImageOutput{})
	pulumi.RegisterOutputType(ImagesImageArrayOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeArrayOutput{})
}
