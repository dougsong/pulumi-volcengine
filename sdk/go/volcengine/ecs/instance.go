// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage ecs instance
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ecs"
// 	"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := Vpc.NewVpc(ctx, "foo", &Vpc.VpcArgs{
// 			VpcName:   pulumi.String("tf-test-2"),
// 			CidrBlock: pulumi.String("172.16.0.0/16"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		foo1Subnet, err := Vpc.NewSubnet(ctx, "foo1Subnet", &Vpc.SubnetArgs{
// 			SubnetName: pulumi.String("subnet-test-1"),
// 			CidrBlock:  pulumi.String("172.16.1.0/24"),
// 			ZoneId:     pulumi.String("cn-beijing-a"),
// 			VpcId:      foo.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		foo1SecurityGroup, err := Vpc.NewSecurityGroup(ctx, "foo1SecurityGroup", &Vpc.SecurityGroupArgs{
// 			VpcId: foo.ID(),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			foo1Subnet,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		_, err = Ecs.NewInstance(ctx, "default", &Ecs.InstanceArgs{
// 			ZoneId:             pulumi.String("cn-beijing-a"),
// 			ImageId:            pulumi.String("image-aagd56zrw2jtdro3bnrl"),
// 			InstanceType:       pulumi.String("ecs.g1.large"),
// 			InstanceName:       pulumi.String("xym-tf-test-2"),
// 			Description:        pulumi.String("xym-tf-test-desc-1"),
// 			Password:           pulumi.String("93f0cb0614Aab12"),
// 			InstanceChargeType: pulumi.String("PostPaid"),
// 			SystemVolumeType:   pulumi.String("PTSSD"),
// 			SystemVolumeSize:   pulumi.Int(60),
// 			SubnetId:           foo1Subnet.ID(),
// 			SecurityGroupIds: pulumi.StringArray{
// 				foo1SecurityGroup.ID(),
// 			},
// 			DataVolumes: ecs.InstanceDataVolumeArray{
// 				&ecs.InstanceDataVolumeArgs{
// 					VolumeType:         pulumi.String("PTSSD"),
// 					Size:               pulumi.Int(100),
// 					DeleteWithInstance: pulumi.Bool(true),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ECS Instance can be imported using the id, e.g.
//
// ```sh
//  $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
	AutoRenewPeriod pulumi.IntPtrOutput `pulumi:"autoRenewPeriod"`
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntOutput `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The data volume collection of  ECS instance.
	DataVolumes InstanceDataVolumeArrayOutput `pulumi:"dataVolumes"`
	// The description of ECS instance.
	Description pulumi.StringOutput `pulumi:"description"`
	// The host name of ECS instance.
	HostName pulumi.StringOutput `pulumi:"hostName"`
	// The hpc cluster ID of ECS instance.
	HpcClusterId pulumi.StringPtrOutput `pulumi:"hpcClusterId"`
	// The Image ID of ECS instance.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
	IncludeDataVolumes pulumi.BoolPtrOutput `pulumi:"includeDataVolumes"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringOutput `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The instance type of ECS instance.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringOutput `pulumi:"keyPairId"`
	// The ssh key name of ECS instance.
	KeyPairName pulumi.StringOutput `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntOutput `pulumi:"memorySize"`
	// The ID of primary networkInterface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The os name of ECS instance.
	OsName pulumi.StringOutput `pulumi:"osName"`
	// The os type of ECS instance.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// The password of ECS instance.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The secondary networkInterface detail collection of ECS instance.
	SecondaryNetworkInterfaces InstanceSecondaryNetworkInterfaceArrayOutput `pulumi:"secondaryNetworkInterfaces"`
	// The security enhancement strategy of ECS instance.Default is true.
	SecurityEnhancementStrategy pulumi.StringPtrOutput `pulumi:"securityEnhancementStrategy"`
	// The security group ID set of primary networkInterface.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The status of ECS instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringOutput `pulumi:"stoppedMode"`
	// The subnet ID of primary networkInterface.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The ID of system volume.
	SystemVolumeId pulumi.StringOutput `pulumi:"systemVolumeId"`
	// The size of system volume.
	SystemVolumeSize pulumi.IntOutput `pulumi:"systemVolumeSize"`
	// The type of system volume.
	SystemVolumeType pulumi.StringOutput `pulumi:"systemVolumeType"`
	// The update time of ECS instance.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The user data of ECS instance.
	UserData pulumi.StringOutput `pulumi:"userData"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.SecurityGroupIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupIds'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.SystemVolumeSize == nil {
		return nil, errors.New("invalid value for required argument 'SystemVolumeSize'")
	}
	if args.SystemVolumeType == nil {
		return nil, errors.New("invalid value for required argument 'SystemVolumeType'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource Instance
	err := ctx.RegisterResource("volcengine:Ecs/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:Ecs/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
	AutoRenewPeriod *int `pulumi:"autoRenewPeriod"`
	// The number of ECS instance CPU cores.
	Cpus *int `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt *string `pulumi:"createdAt"`
	// The data volume collection of  ECS instance.
	DataVolumes []InstanceDataVolume `pulumi:"dataVolumes"`
	// The description of ECS instance.
	Description *string `pulumi:"description"`
	// The host name of ECS instance.
	HostName *string `pulumi:"hostName"`
	// The hpc cluster ID of ECS instance.
	HpcClusterId *string `pulumi:"hpcClusterId"`
	// The Image ID of ECS instance.
	ImageId *string `pulumi:"imageId"`
	// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
	IncludeDataVolumes *bool `pulumi:"includeDataVolumes"`
	// The charge type of ECS instance.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId *string `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of ECS instance.
	InstanceType *string `pulumi:"instanceType"`
	// The ssh key ID of ECS instance.
	KeyPairId *string `pulumi:"keyPairId"`
	// The ssh key name of ECS instance.
	KeyPairName *string `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize *int `pulumi:"memorySize"`
	// The ID of primary networkInterface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The os name of ECS instance.
	OsName *string `pulumi:"osName"`
	// The os type of ECS instance.
	OsType *string `pulumi:"osType"`
	// The password of ECS instance.
	Password *string `pulumi:"password"`
	// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
	Period *int `pulumi:"period"`
	// The secondary networkInterface detail collection of ECS instance.
	SecondaryNetworkInterfaces []InstanceSecondaryNetworkInterface `pulumi:"secondaryNetworkInterfaces"`
	// The security enhancement strategy of ECS instance.Default is true.
	SecurityEnhancementStrategy *string `pulumi:"securityEnhancementStrategy"`
	// The security group ID set of primary networkInterface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The status of ECS instance.
	Status *string `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode *string `pulumi:"stoppedMode"`
	// The subnet ID of primary networkInterface.
	SubnetId *string `pulumi:"subnetId"`
	// The ID of system volume.
	SystemVolumeId *string `pulumi:"systemVolumeId"`
	// The size of system volume.
	SystemVolumeSize *int `pulumi:"systemVolumeSize"`
	// The type of system volume.
	SystemVolumeType *string `pulumi:"systemVolumeType"`
	// The update time of ECS instance.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The user data of ECS instance.
	UserData *string `pulumi:"userData"`
	// The VPC ID of ECS instance.
	VpcId *string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId *string `pulumi:"zoneId"`
}

type InstanceState struct {
	// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
	AutoRenew pulumi.BoolPtrInput
	// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
	AutoRenewPeriod pulumi.IntPtrInput
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntPtrInput
	// The create time of ECS instance.
	CreatedAt pulumi.StringPtrInput
	// The data volume collection of  ECS instance.
	DataVolumes InstanceDataVolumeArrayInput
	// The description of ECS instance.
	Description pulumi.StringPtrInput
	// The host name of ECS instance.
	HostName pulumi.StringPtrInput
	// The hpc cluster ID of ECS instance.
	HpcClusterId pulumi.StringPtrInput
	// The Image ID of ECS instance.
	ImageId pulumi.StringPtrInput
	// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
	IncludeDataVolumes pulumi.BoolPtrInput
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringPtrInput
	// The ID of ECS instance.
	InstanceId pulumi.StringPtrInput
	// The name of ECS instance.
	InstanceName pulumi.StringPtrInput
	// The instance type of ECS instance.
	InstanceType pulumi.StringPtrInput
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringPtrInput
	// The ssh key name of ECS instance.
	KeyPairName pulumi.StringPtrInput
	// The memory size of ECS instance.
	MemorySize pulumi.IntPtrInput
	// The ID of primary networkInterface.
	NetworkInterfaceId pulumi.StringPtrInput
	// The os name of ECS instance.
	OsName pulumi.StringPtrInput
	// The os type of ECS instance.
	OsType pulumi.StringPtrInput
	// The password of ECS instance.
	Password pulumi.StringPtrInput
	// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
	Period pulumi.IntPtrInput
	// The secondary networkInterface detail collection of ECS instance.
	SecondaryNetworkInterfaces InstanceSecondaryNetworkInterfaceArrayInput
	// The security enhancement strategy of ECS instance.Default is true.
	SecurityEnhancementStrategy pulumi.StringPtrInput
	// The security group ID set of primary networkInterface.
	SecurityGroupIds pulumi.StringArrayInput
	// The status of ECS instance.
	Status pulumi.StringPtrInput
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringPtrInput
	// The subnet ID of primary networkInterface.
	SubnetId pulumi.StringPtrInput
	// The ID of system volume.
	SystemVolumeId pulumi.StringPtrInput
	// The size of system volume.
	SystemVolumeSize pulumi.IntPtrInput
	// The type of system volume.
	SystemVolumeType pulumi.StringPtrInput
	// The update time of ECS instance.
	UpdatedAt pulumi.StringPtrInput
	// The user data of ECS instance.
	UserData pulumi.StringPtrInput
	// The VPC ID of ECS instance.
	VpcId pulumi.StringPtrInput
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
	AutoRenewPeriod *int `pulumi:"autoRenewPeriod"`
	// The data volume collection of  ECS instance.
	DataVolumes []InstanceDataVolume `pulumi:"dataVolumes"`
	// The description of ECS instance.
	Description *string `pulumi:"description"`
	// The host name of ECS instance.
	HostName *string `pulumi:"hostName"`
	// The hpc cluster ID of ECS instance.
	HpcClusterId *string `pulumi:"hpcClusterId"`
	// The Image ID of ECS instance.
	ImageId string `pulumi:"imageId"`
	// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
	IncludeDataVolumes *bool `pulumi:"includeDataVolumes"`
	// The charge type of ECS instance.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The name of ECS instance.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The ssh key name of ECS instance.
	KeyPairName *string `pulumi:"keyPairName"`
	// The password of ECS instance.
	Password *string `pulumi:"password"`
	// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
	Period *int `pulumi:"period"`
	// The secondary networkInterface detail collection of ECS instance.
	SecondaryNetworkInterfaces []InstanceSecondaryNetworkInterface `pulumi:"secondaryNetworkInterfaces"`
	// The security enhancement strategy of ECS instance.Default is true.
	SecurityEnhancementStrategy *string `pulumi:"securityEnhancementStrategy"`
	// The security group ID set of primary networkInterface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ID of primary networkInterface.
	SubnetId string `pulumi:"subnetId"`
	// The size of system volume.
	SystemVolumeSize int `pulumi:"systemVolumeSize"`
	// The type of system volume.
	SystemVolumeType string `pulumi:"systemVolumeType"`
	// The user data of ECS instance.
	UserData *string `pulumi:"userData"`
	// The available zone ID of ECS instance.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
	AutoRenew pulumi.BoolPtrInput
	// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
	AutoRenewPeriod pulumi.IntPtrInput
	// The data volume collection of  ECS instance.
	DataVolumes InstanceDataVolumeArrayInput
	// The description of ECS instance.
	Description pulumi.StringPtrInput
	// The host name of ECS instance.
	HostName pulumi.StringPtrInput
	// The hpc cluster ID of ECS instance.
	HpcClusterId pulumi.StringPtrInput
	// The Image ID of ECS instance.
	ImageId pulumi.StringInput
	// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
	IncludeDataVolumes pulumi.BoolPtrInput
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringPtrInput
	// The name of ECS instance.
	InstanceName pulumi.StringPtrInput
	// The instance type of ECS instance.
	InstanceType pulumi.StringInput
	// The ssh key name of ECS instance.
	KeyPairName pulumi.StringPtrInput
	// The password of ECS instance.
	Password pulumi.StringPtrInput
	// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
	Period pulumi.IntPtrInput
	// The secondary networkInterface detail collection of ECS instance.
	SecondaryNetworkInterfaces InstanceSecondaryNetworkInterfaceArrayInput
	// The security enhancement strategy of ECS instance.Default is true.
	SecurityEnhancementStrategy pulumi.StringPtrInput
	// The security group ID set of primary networkInterface.
	SecurityGroupIds pulumi.StringArrayInput
	// The subnet ID of primary networkInterface.
	SubnetId pulumi.StringInput
	// The size of system volume.
	SystemVolumeSize pulumi.IntInput
	// The type of system volume.
	SystemVolumeType pulumi.StringInput
	// The user data of ECS instance.
	UserData pulumi.StringPtrInput
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//          InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//          InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
func (o InstanceOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
func (o InstanceOutput) AutoRenewPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.AutoRenewPeriod }).(pulumi.IntPtrOutput)
}

// The number of ECS instance CPU cores.
func (o InstanceOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Cpus }).(pulumi.IntOutput)
}

// The create time of ECS instance.
func (o InstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The data volume collection of  ECS instance.
func (o InstanceOutput) DataVolumes() InstanceDataVolumeArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceDataVolumeArrayOutput { return v.DataVolumes }).(InstanceDataVolumeArrayOutput)
}

// The description of ECS instance.
func (o InstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The host name of ECS instance.
func (o InstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.HostName }).(pulumi.StringOutput)
}

// The hpc cluster ID of ECS instance.
func (o InstanceOutput) HpcClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.HpcClusterId }).(pulumi.StringPtrOutput)
}

// The Image ID of ECS instance.
func (o InstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
func (o InstanceOutput) IncludeDataVolumes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.IncludeDataVolumes }).(pulumi.BoolPtrOutput)
}

// The charge type of ECS instance.
func (o InstanceOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The instance type of ECS instance.
func (o InstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The ssh key ID of ECS instance.
func (o InstanceOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.KeyPairId }).(pulumi.StringOutput)
}

// The ssh key name of ECS instance.
func (o InstanceOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.KeyPairName }).(pulumi.StringOutput)
}

// The memory size of ECS instance.
func (o InstanceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.MemorySize }).(pulumi.IntOutput)
}

// The ID of primary networkInterface.
func (o InstanceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The os name of ECS instance.
func (o InstanceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// The os type of ECS instance.
func (o InstanceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// The password of ECS instance.
func (o InstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The secondary networkInterface detail collection of ECS instance.
func (o InstanceOutput) SecondaryNetworkInterfaces() InstanceSecondaryNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceSecondaryNetworkInterfaceArrayOutput { return v.SecondaryNetworkInterfaces }).(InstanceSecondaryNetworkInterfaceArrayOutput)
}

// The security enhancement strategy of ECS instance.Default is true.
func (o InstanceOutput) SecurityEnhancementStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SecurityEnhancementStrategy }).(pulumi.StringPtrOutput)
}

// The security group ID set of primary networkInterface.
func (o InstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The status of ECS instance.
func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The stop mode of ECS instance.
func (o InstanceOutput) StoppedMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.StoppedMode }).(pulumi.StringOutput)
}

// The subnet ID of primary networkInterface.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The ID of system volume.
func (o InstanceOutput) SystemVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SystemVolumeId }).(pulumi.StringOutput)
}

// The size of system volume.
func (o InstanceOutput) SystemVolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.SystemVolumeSize }).(pulumi.IntOutput)
}

// The type of system volume.
func (o InstanceOutput) SystemVolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SystemVolumeType }).(pulumi.StringOutput)
}

// The update time of ECS instance.
func (o InstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The user data of ECS instance.
func (o InstanceOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserData }).(pulumi.StringOutput)
}

// The VPC ID of ECS instance.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone ID of ECS instance.
func (o InstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
