// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClbRulesRule struct {
	// The Description of Rule.
	Description string `pulumi:"description"`
	// The Domain of Rule.
	Domain string `pulumi:"domain"`
	// The Id of Rule.
	Id string `pulumi:"id"`
	// The Id of Rule.
	RuleId string `pulumi:"ruleId"`
	// The Id of Server Group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url string `pulumi:"url"`
}

// ClbRulesRuleInput is an input type that accepts ClbRulesRuleArgs and ClbRulesRuleOutput values.
// You can construct a concrete instance of `ClbRulesRuleInput` via:
//
//          ClbRulesRuleArgs{...}
type ClbRulesRuleInput interface {
	pulumi.Input

	ToClbRulesRuleOutput() ClbRulesRuleOutput
	ToClbRulesRuleOutputWithContext(context.Context) ClbRulesRuleOutput
}

type ClbRulesRuleArgs struct {
	// The Description of Rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The Domain of Rule.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The Id of Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The Id of Rule.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// The Id of Server Group.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ClbRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbRulesRule)(nil)).Elem()
}

func (i ClbRulesRuleArgs) ToClbRulesRuleOutput() ClbRulesRuleOutput {
	return i.ToClbRulesRuleOutputWithContext(context.Background())
}

func (i ClbRulesRuleArgs) ToClbRulesRuleOutputWithContext(ctx context.Context) ClbRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbRulesRuleOutput)
}

// ClbRulesRuleArrayInput is an input type that accepts ClbRulesRuleArray and ClbRulesRuleArrayOutput values.
// You can construct a concrete instance of `ClbRulesRuleArrayInput` via:
//
//          ClbRulesRuleArray{ ClbRulesRuleArgs{...} }
type ClbRulesRuleArrayInput interface {
	pulumi.Input

	ToClbRulesRuleArrayOutput() ClbRulesRuleArrayOutput
	ToClbRulesRuleArrayOutputWithContext(context.Context) ClbRulesRuleArrayOutput
}

type ClbRulesRuleArray []ClbRulesRuleInput

func (ClbRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbRulesRule)(nil)).Elem()
}

func (i ClbRulesRuleArray) ToClbRulesRuleArrayOutput() ClbRulesRuleArrayOutput {
	return i.ToClbRulesRuleArrayOutputWithContext(context.Background())
}

func (i ClbRulesRuleArray) ToClbRulesRuleArrayOutputWithContext(ctx context.Context) ClbRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbRulesRuleArrayOutput)
}

type ClbRulesRuleOutput struct{ *pulumi.OutputState }

func (ClbRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbRulesRule)(nil)).Elem()
}

func (o ClbRulesRuleOutput) ToClbRulesRuleOutput() ClbRulesRuleOutput {
	return o
}

func (o ClbRulesRuleOutput) ToClbRulesRuleOutputWithContext(ctx context.Context) ClbRulesRuleOutput {
	return o
}

// The Description of Rule.
func (o ClbRulesRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.Description }).(pulumi.StringOutput)
}

// The Domain of Rule.
func (o ClbRulesRuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.Domain }).(pulumi.StringOutput)
}

// The Id of Rule.
func (o ClbRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The Id of Rule.
func (o ClbRulesRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.RuleId }).(pulumi.StringOutput)
}

// The Id of Server Group.
func (o ClbRulesRuleOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The Url of Rule.
func (o ClbRulesRuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ClbRulesRule) string { return v.Url }).(pulumi.StringOutput)
}

type ClbRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (ClbRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbRulesRule)(nil)).Elem()
}

func (o ClbRulesRuleArrayOutput) ToClbRulesRuleArrayOutput() ClbRulesRuleArrayOutput {
	return o
}

func (o ClbRulesRuleArrayOutput) ToClbRulesRuleArrayOutputWithContext(ctx context.Context) ClbRulesRuleArrayOutput {
	return o
}

func (o ClbRulesRuleArrayOutput) Index(i pulumi.IntInput) ClbRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbRulesRule {
		return vs[0].([]ClbRulesRule)[vs[1].(int)]
	}).(ClbRulesRuleOutput)
}

type ClbsClb struct {
	// The business status of the Clb.
	BusinessStatus string `pulumi:"businessStatus"`
	// The create time of the Clb.
	CreateTime string `pulumi:"createTime"`
	// The expected recycle time of the Clb.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the Clb.
	Description string `pulumi:"description"`
	// The Eip address of the Clb.
	EipAddress string `pulumi:"eipAddress"`
	// The Eip ID of the Clb.
	EipId string `pulumi:"eipId"`
	// The private ip address of the Clb.
	EniAddress string `pulumi:"eniAddress"`
	// The Eni ID of the Clb.
	EniId string `pulumi:"eniId"`
	// The ID of the Clb.
	Id string `pulumi:"id"`
	// The billing type of the Clb.
	LoadBalancerBillingType string `pulumi:"loadBalancerBillingType"`
	// The ID of the Clb.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The name of the Clb.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The specifications of the Clb.
	LoadBalancerSpec string `pulumi:"loadBalancerSpec"`
	// The reason why Clb is locked.
	LockReason string `pulumi:"lockReason"`
	// The modification protection reason of the Clb.
	ModificationProtectionReason string `pulumi:"modificationProtectionReason"`
	// The modification protection status of the Clb.
	ModificationProtectionStatus string `pulumi:"modificationProtectionStatus"`
	// The overdue time of the Clb.
	OverdueTime string `pulumi:"overdueTime"`
	// The status of the Clb.
	Status string `pulumi:"status"`
	// The subnet ID of the Clb.
	SubnetId string `pulumi:"subnetId"`
	// The type of the Clb.
	Type string `pulumi:"type"`
	// The update time of the Clb.
	UpdateTime string `pulumi:"updateTime"`
	// The id of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// ClbsClbInput is an input type that accepts ClbsClbArgs and ClbsClbOutput values.
// You can construct a concrete instance of `ClbsClbInput` via:
//
//          ClbsClbArgs{...}
type ClbsClbInput interface {
	pulumi.Input

	ToClbsClbOutput() ClbsClbOutput
	ToClbsClbOutputWithContext(context.Context) ClbsClbOutput
}

type ClbsClbArgs struct {
	// The business status of the Clb.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The create time of the Clb.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The expected recycle time of the Clb.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the Clb.
	Description pulumi.StringInput `pulumi:"description"`
	// The Eip address of the Clb.
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// The Eip ID of the Clb.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The private ip address of the Clb.
	EniAddress pulumi.StringInput `pulumi:"eniAddress"`
	// The Eni ID of the Clb.
	EniId pulumi.StringInput `pulumi:"eniId"`
	// The ID of the Clb.
	Id pulumi.StringInput `pulumi:"id"`
	// The billing type of the Clb.
	LoadBalancerBillingType pulumi.StringInput `pulumi:"loadBalancerBillingType"`
	// The ID of the Clb.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The name of the Clb.
	LoadBalancerName pulumi.StringInput `pulumi:"loadBalancerName"`
	// The specifications of the Clb.
	LoadBalancerSpec pulumi.StringInput `pulumi:"loadBalancerSpec"`
	// The reason why Clb is locked.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The modification protection reason of the Clb.
	ModificationProtectionReason pulumi.StringInput `pulumi:"modificationProtectionReason"`
	// The modification protection status of the Clb.
	ModificationProtectionStatus pulumi.StringInput `pulumi:"modificationProtectionStatus"`
	// The overdue time of the Clb.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The status of the Clb.
	Status pulumi.StringInput `pulumi:"status"`
	// The subnet ID of the Clb.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of the Clb.
	Type pulumi.StringInput `pulumi:"type"`
	// The update time of the Clb.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The id of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ClbsClbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClb)(nil)).Elem()
}

func (i ClbsClbArgs) ToClbsClbOutput() ClbsClbOutput {
	return i.ToClbsClbOutputWithContext(context.Background())
}

func (i ClbsClbArgs) ToClbsClbOutputWithContext(ctx context.Context) ClbsClbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbOutput)
}

// ClbsClbArrayInput is an input type that accepts ClbsClbArray and ClbsClbArrayOutput values.
// You can construct a concrete instance of `ClbsClbArrayInput` via:
//
//          ClbsClbArray{ ClbsClbArgs{...} }
type ClbsClbArrayInput interface {
	pulumi.Input

	ToClbsClbArrayOutput() ClbsClbArrayOutput
	ToClbsClbArrayOutputWithContext(context.Context) ClbsClbArrayOutput
}

type ClbsClbArray []ClbsClbInput

func (ClbsClbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClb)(nil)).Elem()
}

func (i ClbsClbArray) ToClbsClbArrayOutput() ClbsClbArrayOutput {
	return i.ToClbsClbArrayOutputWithContext(context.Background())
}

func (i ClbsClbArray) ToClbsClbArrayOutputWithContext(ctx context.Context) ClbsClbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbArrayOutput)
}

type ClbsClbOutput struct{ *pulumi.OutputState }

func (ClbsClbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClb)(nil)).Elem()
}

func (o ClbsClbOutput) ToClbsClbOutput() ClbsClbOutput {
	return o
}

func (o ClbsClbOutput) ToClbsClbOutputWithContext(ctx context.Context) ClbsClbOutput {
	return o
}

// The business status of the Clb.
func (o ClbsClbOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The create time of the Clb.
func (o ClbsClbOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The expected recycle time of the Clb.
func (o ClbsClbOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the Clb.
func (o ClbsClbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Description }).(pulumi.StringOutput)
}

// The Eip address of the Clb.
func (o ClbsClbOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EipAddress }).(pulumi.StringOutput)
}

// The Eip ID of the Clb.
func (o ClbsClbOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EipId }).(pulumi.StringOutput)
}

// The private ip address of the Clb.
func (o ClbsClbOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EniAddress }).(pulumi.StringOutput)
}

// The Eni ID of the Clb.
func (o ClbsClbOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EniId }).(pulumi.StringOutput)
}

// The ID of the Clb.
func (o ClbsClbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Id }).(pulumi.StringOutput)
}

// The billing type of the Clb.
func (o ClbsClbOutput) LoadBalancerBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerBillingType }).(pulumi.StringOutput)
}

// The ID of the Clb.
func (o ClbsClbOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The name of the Clb.
func (o ClbsClbOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The specifications of the Clb.
func (o ClbsClbOutput) LoadBalancerSpec() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerSpec }).(pulumi.StringOutput)
}

// The reason why Clb is locked.
func (o ClbsClbOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LockReason }).(pulumi.StringOutput)
}

// The modification protection reason of the Clb.
func (o ClbsClbOutput) ModificationProtectionReason() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ModificationProtectionReason }).(pulumi.StringOutput)
}

// The modification protection status of the Clb.
func (o ClbsClbOutput) ModificationProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ModificationProtectionStatus }).(pulumi.StringOutput)
}

// The overdue time of the Clb.
func (o ClbsClbOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The status of the Clb.
func (o ClbsClbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Status }).(pulumi.StringOutput)
}

// The subnet ID of the Clb.
func (o ClbsClbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of the Clb.
func (o ClbsClbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Type }).(pulumi.StringOutput)
}

// The update time of the Clb.
func (o ClbsClbOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The id of the VPC.
func (o ClbsClbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClbsClbArrayOutput struct{ *pulumi.OutputState }

func (ClbsClbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClb)(nil)).Elem()
}

func (o ClbsClbArrayOutput) ToClbsClbArrayOutput() ClbsClbArrayOutput {
	return o
}

func (o ClbsClbArrayOutput) ToClbsClbArrayOutputWithContext(ctx context.Context) ClbsClbArrayOutput {
	return o
}

func (o ClbsClbArrayOutput) Index(i pulumi.IntInput) ClbsClbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbsClb {
		return vs[0].([]ClbsClb)[vs[1].(int)]
	}).(ClbsClbOutput)
}

type ListenerHealthCheck struct {
	// The domain of health check.
	Domain *string `pulumi:"domain"`
	// The enable status of health check function. Optional choice contains `on`, `off`.
	Enabled *string `pulumi:"enabled"`
	// The healthy threshold of health check.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The normal http status code of health check.
	HttpCode *string `pulumi:"httpCode"`
	// The interval executing health check.
	Interval *int `pulumi:"interval"`
	// The method of health check.
	Method *string `pulumi:"method"`
	// The response timeout of health check.
	Timeout *int `pulumi:"timeout"`
	// The unhealthy threshold of health check.
	UnHealthyThreshold *int `pulumi:"unHealthyThreshold"`
	// The uri of health check.
	Uri *string `pulumi:"uri"`
}

// ListenerHealthCheckInput is an input type that accepts ListenerHealthCheckArgs and ListenerHealthCheckOutput values.
// You can construct a concrete instance of `ListenerHealthCheckInput` via:
//
//          ListenerHealthCheckArgs{...}
type ListenerHealthCheckInput interface {
	pulumi.Input

	ToListenerHealthCheckOutput() ListenerHealthCheckOutput
	ToListenerHealthCheckOutputWithContext(context.Context) ListenerHealthCheckOutput
}

type ListenerHealthCheckArgs struct {
	// The domain of health check.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The enable status of health check function. Optional choice contains `on`, `off`.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// The healthy threshold of health check.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The normal http status code of health check.
	HttpCode pulumi.StringPtrInput `pulumi:"httpCode"`
	// The interval executing health check.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The method of health check.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The response timeout of health check.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The unhealthy threshold of health check.
	UnHealthyThreshold pulumi.IntPtrInput `pulumi:"unHealthyThreshold"`
	// The uri of health check.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return i.ToListenerHealthCheckOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput)
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput).ToListenerHealthCheckPtrOutputWithContext(ctx)
}

// ListenerHealthCheckPtrInput is an input type that accepts ListenerHealthCheckArgs, ListenerHealthCheckPtr and ListenerHealthCheckPtrOutput values.
// You can construct a concrete instance of `ListenerHealthCheckPtrInput` via:
//
//          ListenerHealthCheckArgs{...}
//
//  or:
//
//          nil
type ListenerHealthCheckPtrInput interface {
	pulumi.Input

	ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput
	ToListenerHealthCheckPtrOutputWithContext(context.Context) ListenerHealthCheckPtrOutput
}

type listenerHealthCheckPtrType ListenerHealthCheckArgs

func ListenerHealthCheckPtr(v *ListenerHealthCheckArgs) ListenerHealthCheckPtrInput {
	return (*listenerHealthCheckPtrType)(v)
}

func (*listenerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckPtrOutput)
}

type ListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerHealthCheck) *ListenerHealthCheck {
		return &v
	}).(ListenerHealthCheckPtrOutput)
}

// The domain of health check.
func (o ListenerHealthCheckOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The enable status of health check function. Optional choice contains `on`, `off`.
func (o ListenerHealthCheckOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// The healthy threshold of health check.
func (o ListenerHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The normal http status code of health check.
func (o ListenerHealthCheckOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.HttpCode }).(pulumi.StringPtrOutput)
}

// The interval executing health check.
func (o ListenerHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The method of health check.
func (o ListenerHealthCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The response timeout of health check.
func (o ListenerHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The unhealthy threshold of health check.
func (o ListenerHealthCheckOutput) UnHealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.UnHealthyThreshold }).(pulumi.IntPtrOutput)
}

// The uri of health check.
func (o ListenerHealthCheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ListenerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) Elem() ListenerHealthCheckOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) ListenerHealthCheck {
		if v != nil {
			return *v
		}
		var ret ListenerHealthCheck
		return ret
	}).(ListenerHealthCheckOutput)
}

// The domain of health check.
func (o ListenerHealthCheckPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The enable status of health check function. Optional choice contains `on`, `off`.
func (o ListenerHealthCheckPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// The healthy threshold of health check.
func (o ListenerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The normal http status code of health check.
func (o ListenerHealthCheckPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCode
	}).(pulumi.StringPtrOutput)
}

// The interval executing health check.
func (o ListenerHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The method of health check.
func (o ListenerHealthCheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The response timeout of health check.
func (o ListenerHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The unhealthy threshold of health check.
func (o ListenerHealthCheckPtrOutput) UnHealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnHealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The uri of health check.
func (o ListenerHealthCheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type ListenersListener struct {
	// The acl ID list to which the Listener is bound.
	AclIds []string `pulumi:"aclIds"`
	// The acl status of the Listener.
	AclStatus string `pulumi:"aclStatus"`
	// The acl type of the Listener.
	AclType string `pulumi:"aclType"`
	// The ID of the certificate which is associated with the Listener.
	CertificateId string `pulumi:"certificateId"`
	// The create time of the Listener.
	CreateTime string `pulumi:"createTime"`
	// The enable status of the Listener.
	Enabled string `pulumi:"enabled"`
	// The domain of health check.
	HealthCheckDomain string `pulumi:"healthCheckDomain"`
	// The enable status of health check function.
	HealthCheckEnabled string `pulumi:"healthCheckEnabled"`
	// The healthy threshold of health check.
	HealthCheckHealthyThreshold int `pulumi:"healthCheckHealthyThreshold"`
	// The normal http status code of health check.
	HealthCheckHttpCode string `pulumi:"healthCheckHttpCode"`
	// The interval executing health check.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// The method of health check.
	HealthCheckMethod string `pulumi:"healthCheckMethod"`
	// The response timeout of health check.
	HealthCheckTimeout int `pulumi:"healthCheckTimeout"`
	// The unhealthy threshold of health check.
	HealthCheckUnHealthyThreshold int `pulumi:"healthCheckUnHealthyThreshold"`
	// The uri of health check.
	HealthCheckUri string `pulumi:"healthCheckUri"`
	// The ID of the Listener.
	Id string `pulumi:"id"`
	// The ID of the Listener.
	ListenerId string `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName string `pulumi:"listenerName"`
	// The port receiving request of the Listener.
	Port int `pulumi:"port"`
	// The protocol of the Listener.
	Protocol string `pulumi:"protocol"`
	// The ID of the backend server group which is associated with the Listener.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The status of the Listener.
	Status string `pulumi:"status"`
	// The update time of the Listener.
	UpdateTime string `pulumi:"updateTime"`
}

// ListenersListenerInput is an input type that accepts ListenersListenerArgs and ListenersListenerOutput values.
// You can construct a concrete instance of `ListenersListenerInput` via:
//
//          ListenersListenerArgs{...}
type ListenersListenerInput interface {
	pulumi.Input

	ToListenersListenerOutput() ListenersListenerOutput
	ToListenersListenerOutputWithContext(context.Context) ListenersListenerOutput
}

type ListenersListenerArgs struct {
	// The acl ID list to which the Listener is bound.
	AclIds pulumi.StringArrayInput `pulumi:"aclIds"`
	// The acl status of the Listener.
	AclStatus pulumi.StringInput `pulumi:"aclStatus"`
	// The acl type of the Listener.
	AclType pulumi.StringInput `pulumi:"aclType"`
	// The ID of the certificate which is associated with the Listener.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The create time of the Listener.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The enable status of the Listener.
	Enabled pulumi.StringInput `pulumi:"enabled"`
	// The domain of health check.
	HealthCheckDomain pulumi.StringInput `pulumi:"healthCheckDomain"`
	// The enable status of health check function.
	HealthCheckEnabled pulumi.StringInput `pulumi:"healthCheckEnabled"`
	// The healthy threshold of health check.
	HealthCheckHealthyThreshold pulumi.IntInput `pulumi:"healthCheckHealthyThreshold"`
	// The normal http status code of health check.
	HealthCheckHttpCode pulumi.StringInput `pulumi:"healthCheckHttpCode"`
	// The interval executing health check.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// The method of health check.
	HealthCheckMethod pulumi.StringInput `pulumi:"healthCheckMethod"`
	// The response timeout of health check.
	HealthCheckTimeout pulumi.IntInput `pulumi:"healthCheckTimeout"`
	// The unhealthy threshold of health check.
	HealthCheckUnHealthyThreshold pulumi.IntInput `pulumi:"healthCheckUnHealthyThreshold"`
	// The uri of health check.
	HealthCheckUri pulumi.StringInput `pulumi:"healthCheckUri"`
	// The ID of the Listener.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the Listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName pulumi.StringInput `pulumi:"listenerName"`
	// The port receiving request of the Listener.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol of the Listener.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The ID of the backend server group which is associated with the Listener.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The status of the Listener.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of the Listener.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ListenersListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenersListener)(nil)).Elem()
}

func (i ListenersListenerArgs) ToListenersListenerOutput() ListenersListenerOutput {
	return i.ToListenersListenerOutputWithContext(context.Background())
}

func (i ListenersListenerArgs) ToListenersListenerOutputWithContext(ctx context.Context) ListenersListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenersListenerOutput)
}

// ListenersListenerArrayInput is an input type that accepts ListenersListenerArray and ListenersListenerArrayOutput values.
// You can construct a concrete instance of `ListenersListenerArrayInput` via:
//
//          ListenersListenerArray{ ListenersListenerArgs{...} }
type ListenersListenerArrayInput interface {
	pulumi.Input

	ToListenersListenerArrayOutput() ListenersListenerArrayOutput
	ToListenersListenerArrayOutputWithContext(context.Context) ListenersListenerArrayOutput
}

type ListenersListenerArray []ListenersListenerInput

func (ListenersListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenersListener)(nil)).Elem()
}

func (i ListenersListenerArray) ToListenersListenerArrayOutput() ListenersListenerArrayOutput {
	return i.ToListenersListenerArrayOutputWithContext(context.Background())
}

func (i ListenersListenerArray) ToListenersListenerArrayOutputWithContext(ctx context.Context) ListenersListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenersListenerArrayOutput)
}

type ListenersListenerOutput struct{ *pulumi.OutputState }

func (ListenersListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenersListener)(nil)).Elem()
}

func (o ListenersListenerOutput) ToListenersListenerOutput() ListenersListenerOutput {
	return o
}

func (o ListenersListenerOutput) ToListenersListenerOutputWithContext(ctx context.Context) ListenersListenerOutput {
	return o
}

// The acl ID list to which the Listener is bound.
func (o ListenersListenerOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ListenersListener) []string { return v.AclIds }).(pulumi.StringArrayOutput)
}

// The acl status of the Listener.
func (o ListenersListenerOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.AclStatus }).(pulumi.StringOutput)
}

// The acl type of the Listener.
func (o ListenersListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.AclType }).(pulumi.StringOutput)
}

// The ID of the certificate which is associated with the Listener.
func (o ListenersListenerOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The create time of the Listener.
func (o ListenersListenerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The enable status of the Listener.
func (o ListenersListenerOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Enabled }).(pulumi.StringOutput)
}

// The domain of health check.
func (o ListenersListenerOutput) HealthCheckDomain() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckDomain }).(pulumi.StringOutput)
}

// The enable status of health check function.
func (o ListenersListenerOutput) HealthCheckEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckEnabled }).(pulumi.StringOutput)
}

// The healthy threshold of health check.
func (o ListenersListenerOutput) HealthCheckHealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckHealthyThreshold }).(pulumi.IntOutput)
}

// The normal http status code of health check.
func (o ListenersListenerOutput) HealthCheckHttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckHttpCode }).(pulumi.StringOutput)
}

// The interval executing health check.
func (o ListenersListenerOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The method of health check.
func (o ListenersListenerOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The response timeout of health check.
func (o ListenersListenerOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The unhealthy threshold of health check.
func (o ListenersListenerOutput) HealthCheckUnHealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckUnHealthyThreshold }).(pulumi.IntOutput)
}

// The uri of health check.
func (o ListenersListenerOutput) HealthCheckUri() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckUri }).(pulumi.StringOutput)
}

// The ID of the Listener.
func (o ListenersListenerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Listener.
func (o ListenersListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

// The name of the Listener.
func (o ListenersListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ListenerName }).(pulumi.StringOutput)
}

// The port receiving request of the Listener.
func (o ListenersListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol of the Listener.
func (o ListenersListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Protocol }).(pulumi.StringOutput)
}

// The ID of the backend server group which is associated with the Listener.
func (o ListenersListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The status of the Listener.
func (o ListenersListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of the Listener.
func (o ListenersListenerOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ListenersListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenersListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenersListener)(nil)).Elem()
}

func (o ListenersListenerArrayOutput) ToListenersListenerArrayOutput() ListenersListenerArrayOutput {
	return o
}

func (o ListenersListenerArrayOutput) ToListenersListenerArrayOutputWithContext(ctx context.Context) ListenersListenerArrayOutput {
	return o
}

func (o ListenersListenerArrayOutput) Index(i pulumi.IntInput) ListenersListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenersListener {
		return vs[0].([]ListenersListener)[vs[1].(int)]
	}).(ListenersListenerOutput)
}

type ServerGroupServersServer struct {
	// The description of the instance.
	Description string `pulumi:"description"`
	// The server id of instance in ServerGroup.
	Id string `pulumi:"id"`
	// The ID of ecs instance or the network card bound to ecs instance.
	InstanceId string `pulumi:"instanceId"`
	// The private ip of the instance.
	Ip string `pulumi:"ip"`
	// The port receiving request.
	Port int `pulumi:"port"`
	// The server id of instance in ServerGroup.
	ServerId string `pulumi:"serverId"`
	// The type of instance. Optional choice contains `ecs`, `eni`.
	Type string `pulumi:"type"`
	// The weight of the instance.
	Weight int `pulumi:"weight"`
}

// ServerGroupServersServerInput is an input type that accepts ServerGroupServersServerArgs and ServerGroupServersServerOutput values.
// You can construct a concrete instance of `ServerGroupServersServerInput` via:
//
//          ServerGroupServersServerArgs{...}
type ServerGroupServersServerInput interface {
	pulumi.Input

	ToServerGroupServersServerOutput() ServerGroupServersServerOutput
	ToServerGroupServersServerOutputWithContext(context.Context) ServerGroupServersServerOutput
}

type ServerGroupServersServerArgs struct {
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The server id of instance in ServerGroup.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ecs instance or the network card bound to ecs instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The private ip of the instance.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port receiving request.
	Port pulumi.IntInput `pulumi:"port"`
	// The server id of instance in ServerGroup.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// The type of instance. Optional choice contains `ecs`, `eni`.
	Type pulumi.StringInput `pulumi:"type"`
	// The weight of the instance.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (ServerGroupServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersServer)(nil)).Elem()
}

func (i ServerGroupServersServerArgs) ToServerGroupServersServerOutput() ServerGroupServersServerOutput {
	return i.ToServerGroupServersServerOutputWithContext(context.Background())
}

func (i ServerGroupServersServerArgs) ToServerGroupServersServerOutputWithContext(ctx context.Context) ServerGroupServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServersServerOutput)
}

// ServerGroupServersServerArrayInput is an input type that accepts ServerGroupServersServerArray and ServerGroupServersServerArrayOutput values.
// You can construct a concrete instance of `ServerGroupServersServerArrayInput` via:
//
//          ServerGroupServersServerArray{ ServerGroupServersServerArgs{...} }
type ServerGroupServersServerArrayInput interface {
	pulumi.Input

	ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput
	ToServerGroupServersServerArrayOutputWithContext(context.Context) ServerGroupServersServerArrayOutput
}

type ServerGroupServersServerArray []ServerGroupServersServerInput

func (ServerGroupServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServersServer)(nil)).Elem()
}

func (i ServerGroupServersServerArray) ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput {
	return i.ToServerGroupServersServerArrayOutputWithContext(context.Background())
}

func (i ServerGroupServersServerArray) ToServerGroupServersServerArrayOutputWithContext(ctx context.Context) ServerGroupServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServersServerArrayOutput)
}

type ServerGroupServersServerOutput struct{ *pulumi.OutputState }

func (ServerGroupServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersServer)(nil)).Elem()
}

func (o ServerGroupServersServerOutput) ToServerGroupServersServerOutput() ServerGroupServersServerOutput {
	return o
}

func (o ServerGroupServersServerOutput) ToServerGroupServersServerOutputWithContext(ctx context.Context) ServerGroupServersServerOutput {
	return o
}

// The description of the instance.
func (o ServerGroupServersServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Description }).(pulumi.StringOutput)
}

// The server id of instance in ServerGroup.
func (o ServerGroupServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ecs instance or the network card bound to ecs instance.
func (o ServerGroupServersServerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The private ip of the instance.
func (o ServerGroupServersServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Ip }).(pulumi.StringOutput)
}

// The port receiving request.
func (o ServerGroupServersServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupServersServer) int { return v.Port }).(pulumi.IntOutput)
}

// The server id of instance in ServerGroup.
func (o ServerGroupServersServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// The type of instance. Optional choice contains `ecs`, `eni`.
func (o ServerGroupServersServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Type }).(pulumi.StringOutput)
}

// The weight of the instance.
func (o ServerGroupServersServerOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupServersServer) int { return v.Weight }).(pulumi.IntOutput)
}

type ServerGroupServersServerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServersServer)(nil)).Elem()
}

func (o ServerGroupServersServerArrayOutput) ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput {
	return o
}

func (o ServerGroupServersServerArrayOutput) ToServerGroupServersServerArrayOutputWithContext(ctx context.Context) ServerGroupServersServerArrayOutput {
	return o
}

func (o ServerGroupServersServerArrayOutput) Index(i pulumi.IntInput) ServerGroupServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupServersServer {
		return vs[0].([]ServerGroupServersServer)[vs[1].(int)]
	}).(ServerGroupServersServerOutput)
}

type ServerGroupsGroup struct {
	// The create time of the ServerGroup.
	CreateTime string `pulumi:"createTime"`
	// The description of the ServerGroup.
	Description string `pulumi:"description"`
	// The ID of the ServerGroup.
	Id string `pulumi:"id"`
	// The ID of the ServerGroup.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The name of the ServerGroup.
	ServerGroupName string `pulumi:"serverGroupName"`
	// The update time of the ServerGroup.
	UpdateTime string `pulumi:"updateTime"`
}

// ServerGroupsGroupInput is an input type that accepts ServerGroupsGroupArgs and ServerGroupsGroupOutput values.
// You can construct a concrete instance of `ServerGroupsGroupInput` via:
//
//          ServerGroupsGroupArgs{...}
type ServerGroupsGroupInput interface {
	pulumi.Input

	ToServerGroupsGroupOutput() ServerGroupsGroupOutput
	ToServerGroupsGroupOutputWithContext(context.Context) ServerGroupsGroupOutput
}

type ServerGroupsGroupArgs struct {
	// The create time of the ServerGroup.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the ServerGroup.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the ServerGroup.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the ServerGroup.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The name of the ServerGroup.
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
	// The update time of the ServerGroup.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ServerGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsGroup)(nil)).Elem()
}

func (i ServerGroupsGroupArgs) ToServerGroupsGroupOutput() ServerGroupsGroupOutput {
	return i.ToServerGroupsGroupOutputWithContext(context.Background())
}

func (i ServerGroupsGroupArgs) ToServerGroupsGroupOutputWithContext(ctx context.Context) ServerGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupsGroupOutput)
}

// ServerGroupsGroupArrayInput is an input type that accepts ServerGroupsGroupArray and ServerGroupsGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupsGroupArrayInput` via:
//
//          ServerGroupsGroupArray{ ServerGroupsGroupArgs{...} }
type ServerGroupsGroupArrayInput interface {
	pulumi.Input

	ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput
	ToServerGroupsGroupArrayOutputWithContext(context.Context) ServerGroupsGroupArrayOutput
}

type ServerGroupsGroupArray []ServerGroupsGroupInput

func (ServerGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupsGroup)(nil)).Elem()
}

func (i ServerGroupsGroupArray) ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput {
	return i.ToServerGroupsGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupsGroupArray) ToServerGroupsGroupArrayOutputWithContext(ctx context.Context) ServerGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupsGroupArrayOutput)
}

type ServerGroupsGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsGroup)(nil)).Elem()
}

func (o ServerGroupsGroupOutput) ToServerGroupsGroupOutput() ServerGroupsGroupOutput {
	return o
}

func (o ServerGroupsGroupOutput) ToServerGroupsGroupOutputWithContext(ctx context.Context) ServerGroupsGroupOutput {
	return o
}

// The create time of the ServerGroup.
func (o ServerGroupsGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the ServerGroup.
func (o ServerGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the ServerGroup.
func (o ServerGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the ServerGroup.
func (o ServerGroupsGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The name of the ServerGroup.
func (o ServerGroupsGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The update time of the ServerGroup.
func (o ServerGroupsGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ServerGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupsGroup)(nil)).Elem()
}

func (o ServerGroupsGroupArrayOutput) ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput {
	return o
}

func (o ServerGroupsGroupArrayOutput) ToServerGroupsGroupArrayOutputWithContext(ctx context.Context) ServerGroupsGroupArrayOutput {
	return o
}

func (o ServerGroupsGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupsGroup {
		return vs[0].([]ServerGroupsGroup)[vs[1].(int)]
	}).(ServerGroupsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClbRulesRuleInput)(nil)).Elem(), ClbRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbRulesRuleArrayInput)(nil)).Elem(), ClbRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbInput)(nil)).Elem(), ClbsClbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbArrayInput)(nil)).Elem(), ClbsClbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckPtrInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenersListenerInput)(nil)).Elem(), ListenersListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenersListenerArrayInput)(nil)).Elem(), ListenersListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServersServerInput)(nil)).Elem(), ServerGroupServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServersServerArrayInput)(nil)).Elem(), ServerGroupServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupsGroupInput)(nil)).Elem(), ServerGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupsGroupArrayInput)(nil)).Elem(), ServerGroupsGroupArray{})
	pulumi.RegisterOutputType(ClbRulesRuleOutput{})
	pulumi.RegisterOutputType(ClbRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(ClbsClbOutput{})
	pulumi.RegisterOutputType(ClbsClbArrayOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(ListenersListenerOutput{})
	pulumi.RegisterOutputType(ListenersListenerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupServersServerOutput{})
	pulumi.RegisterOutputType(ServerGroupServersServerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupsGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupsGroupArrayOutput{})
}
