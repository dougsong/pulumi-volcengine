// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage clb rule
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := Clb.NewClbRule(ctx, "foo", &Clb.ClbRuleArgs{
// 			Domain:        pulumi.String("test-volc123.com"),
// 			ListenerId:    pulumi.String("lsn-273ywvnmiu70g7fap8u2xzg9d"),
// 			ServerGroupId: pulumi.String("rsp-273yxuqfova4g7fap8tyemn6t"),
// 			Url:           pulumi.String("/yyyy"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Rule can be imported using the id, e.g. NoticeresourceId is ruleId, due to the lack of describeRuleAttributes in openapi, for import resources, please use ruleId:listenerId to import. we will fix this problem later.
//
// ```sh
//  $ pulumi import volcengine:Clb/clbRule:ClbRule foo rule-273zb9hzi1gqo7fap8u1k3utb:lsn-273ywvnmiu70g7fap8u2xzg9d
// ```
type ClbRule struct {
	pulumi.CustomResourceState

	// The description of the Rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain of Rule.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// The ID of listener.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Server Group Id.
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewClbRule registers a new resource with the given unique name, arguments, and options.
func NewClbRule(ctx *pulumi.Context,
	name string, args *ClbRuleArgs, opts ...pulumi.ResourceOption) (*ClbRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	var resource ClbRule
	err := ctx.RegisterResource("volcengine:Clb/clbRule:ClbRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClbRule gets an existing ClbRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClbRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClbRuleState, opts ...pulumi.ResourceOption) (*ClbRule, error) {
	var resource ClbRule
	err := ctx.ReadResource("volcengine:Clb/clbRule:ClbRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClbRule resources.
type clbRuleState struct {
	// The description of the Rule.
	Description *string `pulumi:"description"`
	// The domain of Rule.
	Domain *string `pulumi:"domain"`
	// The ID of listener.
	ListenerId *string `pulumi:"listenerId"`
	// Server Group Id.
	ServerGroupId *string `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url *string `pulumi:"url"`
}

type ClbRuleState struct {
	// The description of the Rule.
	Description pulumi.StringPtrInput
	// The domain of Rule.
	Domain pulumi.StringPtrInput
	// The ID of listener.
	ListenerId pulumi.StringPtrInput
	// Server Group Id.
	ServerGroupId pulumi.StringPtrInput
	// The Url of Rule.
	Url pulumi.StringPtrInput
}

func (ClbRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*clbRuleState)(nil)).Elem()
}

type clbRuleArgs struct {
	// The description of the Rule.
	Description *string `pulumi:"description"`
	// The domain of Rule.
	Domain *string `pulumi:"domain"`
	// The ID of listener.
	ListenerId string `pulumi:"listenerId"`
	// Server Group Id.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a ClbRule resource.
type ClbRuleArgs struct {
	// The description of the Rule.
	Description pulumi.StringPtrInput
	// The domain of Rule.
	Domain pulumi.StringPtrInput
	// The ID of listener.
	ListenerId pulumi.StringInput
	// Server Group Id.
	ServerGroupId pulumi.StringInput
	// The Url of Rule.
	Url pulumi.StringPtrInput
}

func (ClbRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clbRuleArgs)(nil)).Elem()
}

type ClbRuleInput interface {
	pulumi.Input

	ToClbRuleOutput() ClbRuleOutput
	ToClbRuleOutputWithContext(ctx context.Context) ClbRuleOutput
}

func (*ClbRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbRule)(nil)).Elem()
}

func (i *ClbRule) ToClbRuleOutput() ClbRuleOutput {
	return i.ToClbRuleOutputWithContext(context.Background())
}

func (i *ClbRule) ToClbRuleOutputWithContext(ctx context.Context) ClbRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbRuleOutput)
}

// ClbRuleArrayInput is an input type that accepts ClbRuleArray and ClbRuleArrayOutput values.
// You can construct a concrete instance of `ClbRuleArrayInput` via:
//
//          ClbRuleArray{ ClbRuleArgs{...} }
type ClbRuleArrayInput interface {
	pulumi.Input

	ToClbRuleArrayOutput() ClbRuleArrayOutput
	ToClbRuleArrayOutputWithContext(context.Context) ClbRuleArrayOutput
}

type ClbRuleArray []ClbRuleInput

func (ClbRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClbRule)(nil)).Elem()
}

func (i ClbRuleArray) ToClbRuleArrayOutput() ClbRuleArrayOutput {
	return i.ToClbRuleArrayOutputWithContext(context.Background())
}

func (i ClbRuleArray) ToClbRuleArrayOutputWithContext(ctx context.Context) ClbRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbRuleArrayOutput)
}

// ClbRuleMapInput is an input type that accepts ClbRuleMap and ClbRuleMapOutput values.
// You can construct a concrete instance of `ClbRuleMapInput` via:
//
//          ClbRuleMap{ "key": ClbRuleArgs{...} }
type ClbRuleMapInput interface {
	pulumi.Input

	ToClbRuleMapOutput() ClbRuleMapOutput
	ToClbRuleMapOutputWithContext(context.Context) ClbRuleMapOutput
}

type ClbRuleMap map[string]ClbRuleInput

func (ClbRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClbRule)(nil)).Elem()
}

func (i ClbRuleMap) ToClbRuleMapOutput() ClbRuleMapOutput {
	return i.ToClbRuleMapOutputWithContext(context.Background())
}

func (i ClbRuleMap) ToClbRuleMapOutputWithContext(ctx context.Context) ClbRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbRuleMapOutput)
}

type ClbRuleOutput struct{ *pulumi.OutputState }

func (ClbRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbRule)(nil)).Elem()
}

func (o ClbRuleOutput) ToClbRuleOutput() ClbRuleOutput {
	return o
}

func (o ClbRuleOutput) ToClbRuleOutputWithContext(ctx context.Context) ClbRuleOutput {
	return o
}

// The description of the Rule.
func (o ClbRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The domain of Rule.
func (o ClbRuleOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbRule) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of listener.
func (o ClbRuleOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbRule) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Server Group Id.
func (o ClbRuleOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClbRule) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The Url of Rule.
func (o ClbRuleOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbRule) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

type ClbRuleArrayOutput struct{ *pulumi.OutputState }

func (ClbRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClbRule)(nil)).Elem()
}

func (o ClbRuleArrayOutput) ToClbRuleArrayOutput() ClbRuleArrayOutput {
	return o
}

func (o ClbRuleArrayOutput) ToClbRuleArrayOutputWithContext(ctx context.Context) ClbRuleArrayOutput {
	return o
}

func (o ClbRuleArrayOutput) Index(i pulumi.IntInput) ClbRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClbRule {
		return vs[0].([]*ClbRule)[vs[1].(int)]
	}).(ClbRuleOutput)
}

type ClbRuleMapOutput struct{ *pulumi.OutputState }

func (ClbRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClbRule)(nil)).Elem()
}

func (o ClbRuleMapOutput) ToClbRuleMapOutput() ClbRuleMapOutput {
	return o
}

func (o ClbRuleMapOutput) ToClbRuleMapOutputWithContext(ctx context.Context) ClbRuleMapOutput {
	return o
}

func (o ClbRuleMapOutput) MapIndex(k pulumi.StringInput) ClbRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClbRule {
		return vs[0].(map[string]*ClbRule)[vs[1].(string)]
	}).(ClbRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClbRuleInput)(nil)).Elem(), &ClbRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbRuleArrayInput)(nil)).Elem(), ClbRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbRuleMapInput)(nil)).Elem(), ClbRuleMap{})
	pulumi.RegisterOutputType(ClbRuleOutput{})
	pulumi.RegisterOutputType(ClbRuleArrayOutput{})
	pulumi.RegisterOutputType(ClbRuleMapOutput{})
}
