// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AclAclEntry struct {
	// The description of the AclEntry.
	Description *string `pulumi:"description"`
	// The content of the AclEntry.
	Entry string `pulumi:"entry"`
}

// AclAclEntryInput is an input type that accepts AclAclEntryArgs and AclAclEntryOutput values.
// You can construct a concrete instance of `AclAclEntryInput` via:
//
//          AclAclEntryArgs{...}
type AclAclEntryInput interface {
	pulumi.Input

	ToAclAclEntryOutput() AclAclEntryOutput
	ToAclAclEntryOutputWithContext(context.Context) AclAclEntryOutput
}

type AclAclEntryArgs struct {
	// The description of the AclEntry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The content of the AclEntry.
	Entry pulumi.StringInput `pulumi:"entry"`
}

func (AclAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArgs) ToAclAclEntryOutput() AclAclEntryOutput {
	return i.ToAclAclEntryOutputWithContext(context.Background())
}

func (i AclAclEntryArgs) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryOutput)
}

// AclAclEntryArrayInput is an input type that accepts AclAclEntryArray and AclAclEntryArrayOutput values.
// You can construct a concrete instance of `AclAclEntryArrayInput` via:
//
//          AclAclEntryArray{ AclAclEntryArgs{...} }
type AclAclEntryArrayInput interface {
	pulumi.Input

	ToAclAclEntryArrayOutput() AclAclEntryArrayOutput
	ToAclAclEntryArrayOutputWithContext(context.Context) AclAclEntryArrayOutput
}

type AclAclEntryArray []AclAclEntryInput

func (AclAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return i.ToAclAclEntryArrayOutputWithContext(context.Background())
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryArrayOutput)
}

type AclAclEntryOutput struct{ *pulumi.OutputState }

func (AclAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryOutput) ToAclAclEntryOutput() AclAclEntryOutput {
	return o
}

func (o AclAclEntryOutput) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return o
}

// The description of the AclEntry.
func (o AclAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The content of the AclEntry.
func (o AclAclEntryOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v AclAclEntry) string { return v.Entry }).(pulumi.StringOutput)
}

type AclAclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) Index(i pulumi.IntInput) AclAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclAclEntry {
		return vs[0].([]AclAclEntry)[vs[1].(int)]
	}).(AclAclEntryOutput)
}

type AclsAcl struct {
	// The count of acl entry.
	AclEntryCount int `pulumi:"aclEntryCount"`
	// The ID of Acl.
	AclId string `pulumi:"aclId"`
	// The name of acl.
	AclName string `pulumi:"aclName"`
	// Creation time of Acl.
	CreateTime string `pulumi:"createTime"`
	// The description of Acl.
	Description string `pulumi:"description"`
	// The ID of Acl.
	Id string `pulumi:"id"`
	// The listeners of Acl.
	Listeners []string `pulumi:"listeners"`
	// Update time of Acl.
	UpdateTime string `pulumi:"updateTime"`
}

// AclsAclInput is an input type that accepts AclsAclArgs and AclsAclOutput values.
// You can construct a concrete instance of `AclsAclInput` via:
//
//          AclsAclArgs{...}
type AclsAclInput interface {
	pulumi.Input

	ToAclsAclOutput() AclsAclOutput
	ToAclsAclOutputWithContext(context.Context) AclsAclOutput
}

type AclsAclArgs struct {
	// The count of acl entry.
	AclEntryCount pulumi.IntInput `pulumi:"aclEntryCount"`
	// The ID of Acl.
	AclId pulumi.StringInput `pulumi:"aclId"`
	// The name of acl.
	AclName pulumi.StringInput `pulumi:"aclName"`
	// Creation time of Acl.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of Acl.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Acl.
	Id pulumi.StringInput `pulumi:"id"`
	// The listeners of Acl.
	Listeners pulumi.StringArrayInput `pulumi:"listeners"`
	// Update time of Acl.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (AclsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAcl)(nil)).Elem()
}

func (i AclsAclArgs) ToAclsAclOutput() AclsAclOutput {
	return i.ToAclsAclOutputWithContext(context.Background())
}

func (i AclsAclArgs) ToAclsAclOutputWithContext(ctx context.Context) AclsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclOutput)
}

// AclsAclArrayInput is an input type that accepts AclsAclArray and AclsAclArrayOutput values.
// You can construct a concrete instance of `AclsAclArrayInput` via:
//
//          AclsAclArray{ AclsAclArgs{...} }
type AclsAclArrayInput interface {
	pulumi.Input

	ToAclsAclArrayOutput() AclsAclArrayOutput
	ToAclsAclArrayOutputWithContext(context.Context) AclsAclArrayOutput
}

type AclsAclArray []AclsAclInput

func (AclsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAcl)(nil)).Elem()
}

func (i AclsAclArray) ToAclsAclArrayOutput() AclsAclArrayOutput {
	return i.ToAclsAclArrayOutputWithContext(context.Background())
}

func (i AclsAclArray) ToAclsAclArrayOutputWithContext(ctx context.Context) AclsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclArrayOutput)
}

type AclsAclOutput struct{ *pulumi.OutputState }

func (AclsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAcl)(nil)).Elem()
}

func (o AclsAclOutput) ToAclsAclOutput() AclsAclOutput {
	return o
}

func (o AclsAclOutput) ToAclsAclOutputWithContext(ctx context.Context) AclsAclOutput {
	return o
}

// The count of acl entry.
func (o AclsAclOutput) AclEntryCount() pulumi.IntOutput {
	return o.ApplyT(func(v AclsAcl) int { return v.AclEntryCount }).(pulumi.IntOutput)
}

// The ID of Acl.
func (o AclsAclOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.AclId }).(pulumi.StringOutput)
}

// The name of acl.
func (o AclsAclOutput) AclName() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.AclName }).(pulumi.StringOutput)
}

// Creation time of Acl.
func (o AclsAclOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of Acl.
func (o AclsAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Acl.
func (o AclsAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.Id }).(pulumi.StringOutput)
}

// The listeners of Acl.
func (o AclsAclOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclsAcl) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

// Update time of Acl.
func (o AclsAclOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type AclsAclArrayOutput struct{ *pulumi.OutputState }

func (AclsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAcl)(nil)).Elem()
}

func (o AclsAclArrayOutput) ToAclsAclArrayOutput() AclsAclArrayOutput {
	return o
}

func (o AclsAclArrayOutput) ToAclsAclArrayOutputWithContext(ctx context.Context) AclsAclArrayOutput {
	return o
}

func (o AclsAclArrayOutput) Index(i pulumi.IntInput) AclsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAcl {
		return vs[0].([]AclsAcl)[vs[1].(int)]
	}).(AclsAclOutput)
}

type CertificatesCertificate struct {
	// The ID of the Certificate.
	CertificateId string `pulumi:"certificateId"`
	// The name of the Certificate.
	CertificateName string `pulumi:"certificateName"`
	// The create time of the Certificate.
	CreateTime string `pulumi:"createTime"`
	// The description of the Certificate.
	Description string `pulumi:"description"`
	// The domain name of the Certificate.
	DomainName string `pulumi:"domainName"`
	// The expire time of the Certificate.
	ExpiredAt string `pulumi:"expiredAt"`
	// The ID of the Certificate.
	Id string `pulumi:"id"`
	// The ID list of the Listener.
	Listeners []string `pulumi:"listeners"`
}

// CertificatesCertificateInput is an input type that accepts CertificatesCertificateArgs and CertificatesCertificateOutput values.
// You can construct a concrete instance of `CertificatesCertificateInput` via:
//
//          CertificatesCertificateArgs{...}
type CertificatesCertificateInput interface {
	pulumi.Input

	ToCertificatesCertificateOutput() CertificatesCertificateOutput
	ToCertificatesCertificateOutputWithContext(context.Context) CertificatesCertificateOutput
}

type CertificatesCertificateArgs struct {
	// The ID of the Certificate.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The name of the Certificate.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// The create time of the Certificate.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the Certificate.
	Description pulumi.StringInput `pulumi:"description"`
	// The domain name of the Certificate.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The expire time of the Certificate.
	ExpiredAt pulumi.StringInput `pulumi:"expiredAt"`
	// The ID of the Certificate.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID list of the Listener.
	Listeners pulumi.StringArrayInput `pulumi:"listeners"`
}

func (CertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificate)(nil)).Elem()
}

func (i CertificatesCertificateArgs) ToCertificatesCertificateOutput() CertificatesCertificateOutput {
	return i.ToCertificatesCertificateOutputWithContext(context.Background())
}

func (i CertificatesCertificateArgs) ToCertificatesCertificateOutputWithContext(ctx context.Context) CertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateOutput)
}

// CertificatesCertificateArrayInput is an input type that accepts CertificatesCertificateArray and CertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `CertificatesCertificateArrayInput` via:
//
//          CertificatesCertificateArray{ CertificatesCertificateArgs{...} }
type CertificatesCertificateArrayInput interface {
	pulumi.Input

	ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput
	ToCertificatesCertificateArrayOutputWithContext(context.Context) CertificatesCertificateArrayOutput
}

type CertificatesCertificateArray []CertificatesCertificateInput

func (CertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificate)(nil)).Elem()
}

func (i CertificatesCertificateArray) ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput {
	return i.ToCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i CertificatesCertificateArray) ToCertificatesCertificateArrayOutputWithContext(ctx context.Context) CertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateArrayOutput)
}

type CertificatesCertificateOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificate)(nil)).Elem()
}

func (o CertificatesCertificateOutput) ToCertificatesCertificateOutput() CertificatesCertificateOutput {
	return o
}

func (o CertificatesCertificateOutput) ToCertificatesCertificateOutputWithContext(ctx context.Context) CertificatesCertificateOutput {
	return o
}

// The ID of the Certificate.
func (o CertificatesCertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The name of the Certificate.
func (o CertificatesCertificateOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CertificateName }).(pulumi.StringOutput)
}

// The create time of the Certificate.
func (o CertificatesCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the Certificate.
func (o CertificatesCertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.Description }).(pulumi.StringOutput)
}

// The domain name of the Certificate.
func (o CertificatesCertificateOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.DomainName }).(pulumi.StringOutput)
}

// The expire time of the Certificate.
func (o CertificatesCertificateOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.ExpiredAt }).(pulumi.StringOutput)
}

// The ID of the Certificate.
func (o CertificatesCertificateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.Id }).(pulumi.StringOutput)
}

// The ID list of the Listener.
func (o CertificatesCertificateOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificatesCertificate) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

type CertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificate)(nil)).Elem()
}

func (o CertificatesCertificateArrayOutput) ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput {
	return o
}

func (o CertificatesCertificateArrayOutput) ToCertificatesCertificateArrayOutputWithContext(ctx context.Context) CertificatesCertificateArrayOutput {
	return o
}

func (o CertificatesCertificateArrayOutput) Index(i pulumi.IntInput) CertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificatesCertificate {
		return vs[0].([]CertificatesCertificate)[vs[1].(int)]
	}).(CertificatesCertificateOutput)
}

type GatewaysNatGateway struct {
	// The billing type of the NatGateway.
	BillingType string `pulumi:"billingType"`
	// Whether the NatGateway is locked.
	BusinessStatus string `pulumi:"businessStatus"`
	// The creation time of the NatGateway.
	CreationTime string `pulumi:"creationTime"`
	// The deleted time of the NatGateway.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the NatGateway.
	Description string `pulumi:"description"`
	// The eip addresses of the NatGateway.
	EipAddresses []GatewaysNatGatewayEipAddress `pulumi:"eipAddresses"`
	// The ID of the NatGateway.
	Id string `pulumi:"id"`
	// The reason why locking NatGateway.
	LockReason string `pulumi:"lockReason"`
	// The ID of the NatGateway.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The name of the NatGateway.
	NatGatewayName string `pulumi:"natGatewayName"`
	// The ID of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The overdue time of the NatGateway.
	OverdueTime string `pulumi:"overdueTime"`
	// The specification of the NatGateway.
	Spec string `pulumi:"spec"`
	// The status of the NatGateway.
	Status string `pulumi:"status"`
	// The id of the Subnet.
	SubnetId string `pulumi:"subnetId"`
	// The update time of the NatGateway.
	UpdatedAt string `pulumi:"updatedAt"`
	// The id of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// GatewaysNatGatewayInput is an input type that accepts GatewaysNatGatewayArgs and GatewaysNatGatewayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayInput` via:
//
//          GatewaysNatGatewayArgs{...}
type GatewaysNatGatewayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput
	ToGatewaysNatGatewayOutputWithContext(context.Context) GatewaysNatGatewayOutput
}

type GatewaysNatGatewayArgs struct {
	// The billing type of the NatGateway.
	BillingType pulumi.StringInput `pulumi:"billingType"`
	// Whether the NatGateway is locked.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The creation time of the NatGateway.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The deleted time of the NatGateway.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the NatGateway.
	Description pulumi.StringInput `pulumi:"description"`
	// The eip addresses of the NatGateway.
	EipAddresses GatewaysNatGatewayEipAddressArrayInput `pulumi:"eipAddresses"`
	// The ID of the NatGateway.
	Id pulumi.StringInput `pulumi:"id"`
	// The reason why locking NatGateway.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The ID of the NatGateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// The name of the NatGateway.
	NatGatewayName pulumi.StringInput `pulumi:"natGatewayName"`
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The overdue time of the NatGateway.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The specification of the NatGateway.
	Spec pulumi.StringInput `pulumi:"spec"`
	// The status of the NatGateway.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of the Subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The update time of the NatGateway.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The id of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GatewaysNatGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGateway)(nil)).Elem()
}

func (i GatewaysNatGatewayArgs) ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput {
	return i.ToGatewaysNatGatewayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayArgs) ToGatewaysNatGatewayOutputWithContext(ctx context.Context) GatewaysNatGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayOutput)
}

// GatewaysNatGatewayArrayInput is an input type that accepts GatewaysNatGatewayArray and GatewaysNatGatewayArrayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayArrayInput` via:
//
//          GatewaysNatGatewayArray{ GatewaysNatGatewayArgs{...} }
type GatewaysNatGatewayArrayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput
	ToGatewaysNatGatewayArrayOutputWithContext(context.Context) GatewaysNatGatewayArrayOutput
}

type GatewaysNatGatewayArray []GatewaysNatGatewayInput

func (GatewaysNatGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGateway)(nil)).Elem()
}

func (i GatewaysNatGatewayArray) ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput {
	return i.ToGatewaysNatGatewayArrayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayArray) ToGatewaysNatGatewayArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayArrayOutput)
}

type GatewaysNatGatewayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGateway)(nil)).Elem()
}

func (o GatewaysNatGatewayOutput) ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput {
	return o
}

func (o GatewaysNatGatewayOutput) ToGatewaysNatGatewayOutputWithContext(ctx context.Context) GatewaysNatGatewayOutput {
	return o
}

// The billing type of the NatGateway.
func (o GatewaysNatGatewayOutput) BillingType() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.BillingType }).(pulumi.StringOutput)
}

// Whether the NatGateway is locked.
func (o GatewaysNatGatewayOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The creation time of the NatGateway.
func (o GatewaysNatGatewayOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The deleted time of the NatGateway.
func (o GatewaysNatGatewayOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the NatGateway.
func (o GatewaysNatGatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Description }).(pulumi.StringOutput)
}

// The eip addresses of the NatGateway.
func (o GatewaysNatGatewayOutput) EipAddresses() GatewaysNatGatewayEipAddressArrayOutput {
	return o.ApplyT(func(v GatewaysNatGateway) []GatewaysNatGatewayEipAddress { return v.EipAddresses }).(GatewaysNatGatewayEipAddressArrayOutput)
}

// The ID of the NatGateway.
func (o GatewaysNatGatewayOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Id }).(pulumi.StringOutput)
}

// The reason why locking NatGateway.
func (o GatewaysNatGatewayOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.LockReason }).(pulumi.StringOutput)
}

// The ID of the NatGateway.
func (o GatewaysNatGatewayOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The name of the NatGateway.
func (o GatewaysNatGatewayOutput) NatGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NatGatewayName }).(pulumi.StringOutput)
}

// The ID of the network interface.
func (o GatewaysNatGatewayOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The overdue time of the NatGateway.
func (o GatewaysNatGatewayOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The specification of the NatGateway.
func (o GatewaysNatGatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Spec }).(pulumi.StringOutput)
}

// The status of the NatGateway.
func (o GatewaysNatGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the Subnet.
func (o GatewaysNatGatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The update time of the NatGateway.
func (o GatewaysNatGatewayOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The id of the VPC.
func (o GatewaysNatGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.VpcId }).(pulumi.StringOutput)
}

type GatewaysNatGatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGateway)(nil)).Elem()
}

func (o GatewaysNatGatewayArrayOutput) ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput {
	return o
}

func (o GatewaysNatGatewayArrayOutput) ToGatewaysNatGatewayArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayArrayOutput {
	return o
}

func (o GatewaysNatGatewayArrayOutput) Index(i pulumi.IntInput) GatewaysNatGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysNatGateway {
		return vs[0].([]GatewaysNatGateway)[vs[1].(int)]
	}).(GatewaysNatGatewayOutput)
}

type GatewaysNatGatewayEipAddress struct {
	// The ID of Eip.
	AllocationId string `pulumi:"allocationId"`
	// The address of Eip.
	EipAddress string `pulumi:"eipAddress"`
	// The using status of Eip.
	UsingStatus string `pulumi:"usingStatus"`
}

// GatewaysNatGatewayEipAddressInput is an input type that accepts GatewaysNatGatewayEipAddressArgs and GatewaysNatGatewayEipAddressOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayEipAddressInput` via:
//
//          GatewaysNatGatewayEipAddressArgs{...}
type GatewaysNatGatewayEipAddressInput interface {
	pulumi.Input

	ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput
	ToGatewaysNatGatewayEipAddressOutputWithContext(context.Context) GatewaysNatGatewayEipAddressOutput
}

type GatewaysNatGatewayEipAddressArgs struct {
	// The ID of Eip.
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// The address of Eip.
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// The using status of Eip.
	UsingStatus pulumi.StringInput `pulumi:"usingStatus"`
}

func (GatewaysNatGatewayEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (i GatewaysNatGatewayEipAddressArgs) ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput {
	return i.ToGatewaysNatGatewayEipAddressOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayEipAddressArgs) ToGatewaysNatGatewayEipAddressOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayEipAddressOutput)
}

// GatewaysNatGatewayEipAddressArrayInput is an input type that accepts GatewaysNatGatewayEipAddressArray and GatewaysNatGatewayEipAddressArrayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayEipAddressArrayInput` via:
//
//          GatewaysNatGatewayEipAddressArray{ GatewaysNatGatewayEipAddressArgs{...} }
type GatewaysNatGatewayEipAddressArrayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput
	ToGatewaysNatGatewayEipAddressArrayOutputWithContext(context.Context) GatewaysNatGatewayEipAddressArrayOutput
}

type GatewaysNatGatewayEipAddressArray []GatewaysNatGatewayEipAddressInput

func (GatewaysNatGatewayEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (i GatewaysNatGatewayEipAddressArray) ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput {
	return i.ToGatewaysNatGatewayEipAddressArrayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayEipAddressArray) ToGatewaysNatGatewayEipAddressArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayEipAddressArrayOutput)
}

type GatewaysNatGatewayEipAddressOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (o GatewaysNatGatewayEipAddressOutput) ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressOutput) ToGatewaysNatGatewayEipAddressOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressOutput {
	return o
}

// The ID of Eip.
func (o GatewaysNatGatewayEipAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The address of Eip.
func (o GatewaysNatGatewayEipAddressOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.EipAddress }).(pulumi.StringOutput)
}

// The using status of Eip.
func (o GatewaysNatGatewayEipAddressOutput) UsingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.UsingStatus }).(pulumi.StringOutput)
}

type GatewaysNatGatewayEipAddressArrayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (o GatewaysNatGatewayEipAddressArrayOutput) ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressArrayOutput) ToGatewaysNatGatewayEipAddressArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressArrayOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressArrayOutput) Index(i pulumi.IntInput) GatewaysNatGatewayEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysNatGatewayEipAddress {
		return vs[0].([]GatewaysNatGatewayEipAddress)[vs[1].(int)]
	}).(GatewaysNatGatewayEipAddressOutput)
}

type NetworkInterfacesNetworkInterface struct {
	// The account id of the ENI creator.
	AccountId string `pulumi:"accountId"`
	// The IP address of the EIP to which the ENI associates.
	AssociatedElasticIpAddress string `pulumi:"associatedElasticIpAddress"`
	// The allocation id of the EIP to which the ENI associates.
	AssociatedElasticIpId string `pulumi:"associatedElasticIpId"`
	// The create time of the ENI.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ENI.
	Description string `pulumi:"description"`
	// The id of the device to which the ENI is bound.
	DeviceId string `pulumi:"deviceId"`
	// The id of the ENI.
	Id string `pulumi:"id"`
	// The mac address of the ENI.
	MacAddress string `pulumi:"macAddress"`
	// The id of the ENI.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// A name of ENI.
	NetworkInterfaceName string `pulumi:"networkInterfaceName"`
	// The enable of port security.
	PortSecurityEnabled bool `pulumi:"portSecurityEnabled"`
	// The primary IP address of the ENI.
	PrimaryIpAddress string `pulumi:"primaryIpAddress"`
	// The list of the security group id to which the secondary ENI belongs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A status of ENI.
	Status string `pulumi:"status"`
	// An id of the subnet to which the ENI is connected.
	SubnetId string `pulumi:"subnetId"`
	// A type of ENI.
	Type string `pulumi:"type"`
	// The last update time of the ENI.
	UpdatedAt string `pulumi:"updatedAt"`
	// An id of the virtual private cloud (VPC) to which the ENI belongs.
	VpcId string `pulumi:"vpcId"`
	// The name of the virtual private cloud (VPC) to which the ENI belongs.
	VpcName string `pulumi:"vpcName"`
	// The zone id of the ENI.
	ZoneId string `pulumi:"zoneId"`
}

// NetworkInterfacesNetworkInterfaceInput is an input type that accepts NetworkInterfacesNetworkInterfaceArgs and NetworkInterfacesNetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfacesNetworkInterfaceInput` via:
//
//          NetworkInterfacesNetworkInterfaceArgs{...}
type NetworkInterfacesNetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfacesNetworkInterfaceOutput() NetworkInterfacesNetworkInterfaceOutput
	ToNetworkInterfacesNetworkInterfaceOutputWithContext(context.Context) NetworkInterfacesNetworkInterfaceOutput
}

type NetworkInterfacesNetworkInterfaceArgs struct {
	// The account id of the ENI creator.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The IP address of the EIP to which the ENI associates.
	AssociatedElasticIpAddress pulumi.StringInput `pulumi:"associatedElasticIpAddress"`
	// The allocation id of the EIP to which the ENI associates.
	AssociatedElasticIpId pulumi.StringInput `pulumi:"associatedElasticIpId"`
	// The create time of the ENI.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ENI.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the device to which the ENI is bound.
	DeviceId pulumi.StringInput `pulumi:"deviceId"`
	// The id of the ENI.
	Id pulumi.StringInput `pulumi:"id"`
	// The mac address of the ENI.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The id of the ENI.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// A name of ENI.
	NetworkInterfaceName pulumi.StringInput `pulumi:"networkInterfaceName"`
	// The enable of port security.
	PortSecurityEnabled pulumi.BoolInput `pulumi:"portSecurityEnabled"`
	// The primary IP address of the ENI.
	PrimaryIpAddress pulumi.StringInput `pulumi:"primaryIpAddress"`
	// The list of the security group id to which the secondary ENI belongs.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// A status of ENI.
	Status pulumi.StringInput `pulumi:"status"`
	// An id of the subnet to which the ENI is connected.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A type of ENI.
	Type pulumi.StringInput `pulumi:"type"`
	// The last update time of the ENI.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// An id of the virtual private cloud (VPC) to which the ENI belongs.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The name of the virtual private cloud (VPC) to which the ENI belongs.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
	// The zone id of the ENI.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (NetworkInterfacesNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfacesNetworkInterface)(nil)).Elem()
}

func (i NetworkInterfacesNetworkInterfaceArgs) ToNetworkInterfacesNetworkInterfaceOutput() NetworkInterfacesNetworkInterfaceOutput {
	return i.ToNetworkInterfacesNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfacesNetworkInterfaceArgs) ToNetworkInterfacesNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfacesNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacesNetworkInterfaceOutput)
}

// NetworkInterfacesNetworkInterfaceArrayInput is an input type that accepts NetworkInterfacesNetworkInterfaceArray and NetworkInterfacesNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfacesNetworkInterfaceArrayInput` via:
//
//          NetworkInterfacesNetworkInterfaceArray{ NetworkInterfacesNetworkInterfaceArgs{...} }
type NetworkInterfacesNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfacesNetworkInterfaceArrayOutput() NetworkInterfacesNetworkInterfaceArrayOutput
	ToNetworkInterfacesNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfacesNetworkInterfaceArrayOutput
}

type NetworkInterfacesNetworkInterfaceArray []NetworkInterfacesNetworkInterfaceInput

func (NetworkInterfacesNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfacesNetworkInterface)(nil)).Elem()
}

func (i NetworkInterfacesNetworkInterfaceArray) ToNetworkInterfacesNetworkInterfaceArrayOutput() NetworkInterfacesNetworkInterfaceArrayOutput {
	return i.ToNetworkInterfacesNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfacesNetworkInterfaceArray) ToNetworkInterfacesNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfacesNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfacesNetworkInterfaceArrayOutput)
}

type NetworkInterfacesNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfacesNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfacesNetworkInterface)(nil)).Elem()
}

func (o NetworkInterfacesNetworkInterfaceOutput) ToNetworkInterfacesNetworkInterfaceOutput() NetworkInterfacesNetworkInterfaceOutput {
	return o
}

func (o NetworkInterfacesNetworkInterfaceOutput) ToNetworkInterfacesNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfacesNetworkInterfaceOutput {
	return o
}

// The account id of the ENI creator.
func (o NetworkInterfacesNetworkInterfaceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.AccountId }).(pulumi.StringOutput)
}

// The IP address of the EIP to which the ENI associates.
func (o NetworkInterfacesNetworkInterfaceOutput) AssociatedElasticIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.AssociatedElasticIpAddress }).(pulumi.StringOutput)
}

// The allocation id of the EIP to which the ENI associates.
func (o NetworkInterfacesNetworkInterfaceOutput) AssociatedElasticIpId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.AssociatedElasticIpId }).(pulumi.StringOutput)
}

// The create time of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the device to which the ENI is bound.
func (o NetworkInterfacesNetworkInterfaceOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.DeviceId }).(pulumi.StringOutput)
}

// The id of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.Id }).(pulumi.StringOutput)
}

// The mac address of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The id of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// A name of ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) NetworkInterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.NetworkInterfaceName }).(pulumi.StringOutput)
}

// The enable of port security.
func (o NetworkInterfacesNetworkInterfaceOutput) PortSecurityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) bool { return v.PortSecurityEnabled }).(pulumi.BoolOutput)
}

// The primary IP address of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.PrimaryIpAddress }).(pulumi.StringOutput)
}

// The list of the security group id to which the secondary ENI belongs.
func (o NetworkInterfacesNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// A status of ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.Status }).(pulumi.StringOutput)
}

// An id of the subnet to which the ENI is connected.
func (o NetworkInterfacesNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

// A type of ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.Type }).(pulumi.StringOutput)
}

// The last update time of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// An id of the virtual private cloud (VPC) to which the ENI belongs.
func (o NetworkInterfacesNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

// The name of the virtual private cloud (VPC) to which the ENI belongs.
func (o NetworkInterfacesNetworkInterfaceOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.VpcName }).(pulumi.StringOutput)
}

// The zone id of the ENI.
func (o NetworkInterfacesNetworkInterfaceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfacesNetworkInterface) string { return v.ZoneId }).(pulumi.StringOutput)
}

type NetworkInterfacesNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfacesNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfacesNetworkInterface)(nil)).Elem()
}

func (o NetworkInterfacesNetworkInterfaceArrayOutput) ToNetworkInterfacesNetworkInterfaceArrayOutput() NetworkInterfacesNetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfacesNetworkInterfaceArrayOutput) ToNetworkInterfacesNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfacesNetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfacesNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfacesNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfacesNetworkInterface {
		return vs[0].([]NetworkInterfacesNetworkInterface)[vs[1].(int)]
	}).(NetworkInterfacesNetworkInterfaceOutput)
}

type RouteEntriesRouteEntry struct {
	// The description of the route entry.
	Description string `pulumi:"description"`
	// A destination CIDR block of route entry.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The id of the route entry.
	Id string `pulumi:"id"`
	// An id of next hop.
	NextHopId string `pulumi:"nextHopId"`
	// The name of the next hop.
	NextHopName string `pulumi:"nextHopName"`
	// A type of next hop.
	NextHopType string `pulumi:"nextHopType"`
	// The id of the route entry.
	RouteEntryId string `pulumi:"routeEntryId"`
	// A name of route entry.
	RouteEntryName string `pulumi:"routeEntryName"`
	// An id of route table.
	RouteTableId string `pulumi:"routeTableId"`
	// The status of the route entry.
	Status string `pulumi:"status"`
	// The type of the route entry.
	Type string `pulumi:"type"`
	// The id of the virtual private cloud (VPC) to which the route entry belongs.
	VpcId string `pulumi:"vpcId"`
}

// RouteEntriesRouteEntryInput is an input type that accepts RouteEntriesRouteEntryArgs and RouteEntriesRouteEntryOutput values.
// You can construct a concrete instance of `RouteEntriesRouteEntryInput` via:
//
//          RouteEntriesRouteEntryArgs{...}
type RouteEntriesRouteEntryInput interface {
	pulumi.Input

	ToRouteEntriesRouteEntryOutput() RouteEntriesRouteEntryOutput
	ToRouteEntriesRouteEntryOutputWithContext(context.Context) RouteEntriesRouteEntryOutput
}

type RouteEntriesRouteEntryArgs struct {
	// The description of the route entry.
	Description pulumi.StringInput `pulumi:"description"`
	// A destination CIDR block of route entry.
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// The id of the route entry.
	Id pulumi.StringInput `pulumi:"id"`
	// An id of next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// The name of the next hop.
	NextHopName pulumi.StringInput `pulumi:"nextHopName"`
	// A type of next hop.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// The id of the route entry.
	RouteEntryId pulumi.StringInput `pulumi:"routeEntryId"`
	// A name of route entry.
	RouteEntryName pulumi.StringInput `pulumi:"routeEntryName"`
	// An id of route table.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The status of the route entry.
	Status pulumi.StringInput `pulumi:"status"`
	// The type of the route entry.
	Type pulumi.StringInput `pulumi:"type"`
	// The id of the virtual private cloud (VPC) to which the route entry belongs.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (RouteEntriesRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteEntriesRouteEntry)(nil)).Elem()
}

func (i RouteEntriesRouteEntryArgs) ToRouteEntriesRouteEntryOutput() RouteEntriesRouteEntryOutput {
	return i.ToRouteEntriesRouteEntryOutputWithContext(context.Background())
}

func (i RouteEntriesRouteEntryArgs) ToRouteEntriesRouteEntryOutputWithContext(ctx context.Context) RouteEntriesRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteEntriesRouteEntryOutput)
}

// RouteEntriesRouteEntryArrayInput is an input type that accepts RouteEntriesRouteEntryArray and RouteEntriesRouteEntryArrayOutput values.
// You can construct a concrete instance of `RouteEntriesRouteEntryArrayInput` via:
//
//          RouteEntriesRouteEntryArray{ RouteEntriesRouteEntryArgs{...} }
type RouteEntriesRouteEntryArrayInput interface {
	pulumi.Input

	ToRouteEntriesRouteEntryArrayOutput() RouteEntriesRouteEntryArrayOutput
	ToRouteEntriesRouteEntryArrayOutputWithContext(context.Context) RouteEntriesRouteEntryArrayOutput
}

type RouteEntriesRouteEntryArray []RouteEntriesRouteEntryInput

func (RouteEntriesRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteEntriesRouteEntry)(nil)).Elem()
}

func (i RouteEntriesRouteEntryArray) ToRouteEntriesRouteEntryArrayOutput() RouteEntriesRouteEntryArrayOutput {
	return i.ToRouteEntriesRouteEntryArrayOutputWithContext(context.Background())
}

func (i RouteEntriesRouteEntryArray) ToRouteEntriesRouteEntryArrayOutputWithContext(ctx context.Context) RouteEntriesRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteEntriesRouteEntryArrayOutput)
}

type RouteEntriesRouteEntryOutput struct{ *pulumi.OutputState }

func (RouteEntriesRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteEntriesRouteEntry)(nil)).Elem()
}

func (o RouteEntriesRouteEntryOutput) ToRouteEntriesRouteEntryOutput() RouteEntriesRouteEntryOutput {
	return o
}

func (o RouteEntriesRouteEntryOutput) ToRouteEntriesRouteEntryOutputWithContext(ctx context.Context) RouteEntriesRouteEntryOutput {
	return o
}

// The description of the route entry.
func (o RouteEntriesRouteEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.Description }).(pulumi.StringOutput)
}

// A destination CIDR block of route entry.
func (o RouteEntriesRouteEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The id of the route entry.
func (o RouteEntriesRouteEntryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.Id }).(pulumi.StringOutput)
}

// An id of next hop.
func (o RouteEntriesRouteEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// The name of the next hop.
func (o RouteEntriesRouteEntryOutput) NextHopName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.NextHopName }).(pulumi.StringOutput)
}

// A type of next hop.
func (o RouteEntriesRouteEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// The id of the route entry.
func (o RouteEntriesRouteEntryOutput) RouteEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.RouteEntryId }).(pulumi.StringOutput)
}

// A name of route entry.
func (o RouteEntriesRouteEntryOutput) RouteEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.RouteEntryName }).(pulumi.StringOutput)
}

// An id of route table.
func (o RouteEntriesRouteEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The status of the route entry.
func (o RouteEntriesRouteEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the route entry.
func (o RouteEntriesRouteEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.Type }).(pulumi.StringOutput)
}

// The id of the virtual private cloud (VPC) to which the route entry belongs.
func (o RouteEntriesRouteEntryOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteEntriesRouteEntry) string { return v.VpcId }).(pulumi.StringOutput)
}

type RouteEntriesRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (RouteEntriesRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteEntriesRouteEntry)(nil)).Elem()
}

func (o RouteEntriesRouteEntryArrayOutput) ToRouteEntriesRouteEntryArrayOutput() RouteEntriesRouteEntryArrayOutput {
	return o
}

func (o RouteEntriesRouteEntryArrayOutput) ToRouteEntriesRouteEntryArrayOutputWithContext(ctx context.Context) RouteEntriesRouteEntryArrayOutput {
	return o
}

func (o RouteEntriesRouteEntryArrayOutput) Index(i pulumi.IntInput) RouteEntriesRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteEntriesRouteEntry {
		return vs[0].([]RouteEntriesRouteEntry)[vs[1].(int)]
	}).(RouteEntriesRouteEntryOutput)
}

type RouteTablesRouteTable struct {
	// The account id of the route table creator.
	AccountId string `pulumi:"accountId"`
	// The create time of the route table.
	CreationTime string `pulumi:"creationTime"`
	// The description of the route table.
	Description string `pulumi:"description"`
	// The id of the route table.
	Id string `pulumi:"id"`
	// The id of the route table.
	RouteTableId string `pulumi:"routeTableId"`
	// A name of route table.
	RouteTableName string `pulumi:"routeTableName"`
	// The type of the route table.
	RouteTableType string `pulumi:"routeTableType"`
	// The list of the subnet ids to which the entry table associates.
	SubnetIds []string `pulumi:"subnetIds"`
	// The last update time of the route table.
	UpdateTime string `pulumi:"updateTime"`
	// An id of VPC.
	VpcId string `pulumi:"vpcId"`
	// The name of the virtual private cloud (VPC) to which the route entry belongs.
	VpcName string `pulumi:"vpcName"`
}

// RouteTablesRouteTableInput is an input type that accepts RouteTablesRouteTableArgs and RouteTablesRouteTableOutput values.
// You can construct a concrete instance of `RouteTablesRouteTableInput` via:
//
//          RouteTablesRouteTableArgs{...}
type RouteTablesRouteTableInput interface {
	pulumi.Input

	ToRouteTablesRouteTableOutput() RouteTablesRouteTableOutput
	ToRouteTablesRouteTableOutputWithContext(context.Context) RouteTablesRouteTableOutput
}

type RouteTablesRouteTableArgs struct {
	// The account id of the route table creator.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The create time of the route table.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The description of the route table.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the route table.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the route table.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// A name of route table.
	RouteTableName pulumi.StringInput `pulumi:"routeTableName"`
	// The type of the route table.
	RouteTableType pulumi.StringInput `pulumi:"routeTableType"`
	// The list of the subnet ids to which the entry table associates.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The last update time of the route table.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// An id of VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The name of the virtual private cloud (VPC) to which the route entry belongs.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (RouteTablesRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesRouteTable)(nil)).Elem()
}

func (i RouteTablesRouteTableArgs) ToRouteTablesRouteTableOutput() RouteTablesRouteTableOutput {
	return i.ToRouteTablesRouteTableOutputWithContext(context.Background())
}

func (i RouteTablesRouteTableArgs) ToRouteTablesRouteTableOutputWithContext(ctx context.Context) RouteTablesRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesRouteTableOutput)
}

// RouteTablesRouteTableArrayInput is an input type that accepts RouteTablesRouteTableArray and RouteTablesRouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTablesRouteTableArrayInput` via:
//
//          RouteTablesRouteTableArray{ RouteTablesRouteTableArgs{...} }
type RouteTablesRouteTableArrayInput interface {
	pulumi.Input

	ToRouteTablesRouteTableArrayOutput() RouteTablesRouteTableArrayOutput
	ToRouteTablesRouteTableArrayOutputWithContext(context.Context) RouteTablesRouteTableArrayOutput
}

type RouteTablesRouteTableArray []RouteTablesRouteTableInput

func (RouteTablesRouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesRouteTable)(nil)).Elem()
}

func (i RouteTablesRouteTableArray) ToRouteTablesRouteTableArrayOutput() RouteTablesRouteTableArrayOutput {
	return i.ToRouteTablesRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTablesRouteTableArray) ToRouteTablesRouteTableArrayOutputWithContext(ctx context.Context) RouteTablesRouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTablesRouteTableArrayOutput)
}

type RouteTablesRouteTableOutput struct{ *pulumi.OutputState }

func (RouteTablesRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTablesRouteTable)(nil)).Elem()
}

func (o RouteTablesRouteTableOutput) ToRouteTablesRouteTableOutput() RouteTablesRouteTableOutput {
	return o
}

func (o RouteTablesRouteTableOutput) ToRouteTablesRouteTableOutputWithContext(ctx context.Context) RouteTablesRouteTableOutput {
	return o
}

// The account id of the route table creator.
func (o RouteTablesRouteTableOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.AccountId }).(pulumi.StringOutput)
}

// The create time of the route table.
func (o RouteTablesRouteTableOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the route table.
func (o RouteTablesRouteTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the route table.
func (o RouteTablesRouteTableOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the route table.
func (o RouteTablesRouteTableOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// A name of route table.
func (o RouteTablesRouteTableOutput) RouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.RouteTableName }).(pulumi.StringOutput)
}

// The type of the route table.
func (o RouteTablesRouteTableOutput) RouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.RouteTableType }).(pulumi.StringOutput)
}

// The list of the subnet ids to which the entry table associates.
func (o RouteTablesRouteTableOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The last update time of the route table.
func (o RouteTablesRouteTableOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// An id of VPC.
func (o RouteTablesRouteTableOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.VpcId }).(pulumi.StringOutput)
}

// The name of the virtual private cloud (VPC) to which the route entry belongs.
func (o RouteTablesRouteTableOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v RouteTablesRouteTable) string { return v.VpcName }).(pulumi.StringOutput)
}

type RouteTablesRouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTablesRouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTablesRouteTable)(nil)).Elem()
}

func (o RouteTablesRouteTableArrayOutput) ToRouteTablesRouteTableArrayOutput() RouteTablesRouteTableArrayOutput {
	return o
}

func (o RouteTablesRouteTableArrayOutput) ToRouteTablesRouteTableArrayOutputWithContext(ctx context.Context) RouteTablesRouteTableArrayOutput {
	return o
}

func (o RouteTablesRouteTableArrayOutput) Index(i pulumi.IntInput) RouteTablesRouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTablesRouteTable {
		return vs[0].([]RouteTablesRouteTable)[vs[1].(int)]
	}).(RouteTablesRouteTableOutput)
}

type SecurityGroupsSecurityGroup struct {
	// The creation time of SecurityGroup.
	CreationTime string `pulumi:"creationTime"`
	// The description of SecurityGroup.
	Description string `pulumi:"description"`
	// The ID of SecurityGroup.
	Id string `pulumi:"id"`
	// The ID of SecurityGroup.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The Name of SecurityGroup.
	SecurityGroupName string `pulumi:"securityGroupName"`
	// The Status of SecurityGroup.
	Status string `pulumi:"status"`
	// A Name Regex of SecurityGroup.
	Type string `pulumi:"type"`
	// The ID of Vpc.
	VpcId string `pulumi:"vpcId"`
}

// SecurityGroupsSecurityGroupInput is an input type that accepts SecurityGroupsSecurityGroupArgs and SecurityGroupsSecurityGroupOutput values.
// You can construct a concrete instance of `SecurityGroupsSecurityGroupInput` via:
//
//          SecurityGroupsSecurityGroupArgs{...}
type SecurityGroupsSecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupsSecurityGroupOutput() SecurityGroupsSecurityGroupOutput
	ToSecurityGroupsSecurityGroupOutputWithContext(context.Context) SecurityGroupsSecurityGroupOutput
}

type SecurityGroupsSecurityGroupArgs struct {
	// The creation time of SecurityGroup.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The description of SecurityGroup.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of SecurityGroup.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of SecurityGroup.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The Name of SecurityGroup.
	SecurityGroupName pulumi.StringInput `pulumi:"securityGroupName"`
	// The Status of SecurityGroup.
	Status pulumi.StringInput `pulumi:"status"`
	// A Name Regex of SecurityGroup.
	Type pulumi.StringInput `pulumi:"type"`
	// The ID of Vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (SecurityGroupsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupsSecurityGroup)(nil)).Elem()
}

func (i SecurityGroupsSecurityGroupArgs) ToSecurityGroupsSecurityGroupOutput() SecurityGroupsSecurityGroupOutput {
	return i.ToSecurityGroupsSecurityGroupOutputWithContext(context.Background())
}

func (i SecurityGroupsSecurityGroupArgs) ToSecurityGroupsSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupsSecurityGroupOutput)
}

// SecurityGroupsSecurityGroupArrayInput is an input type that accepts SecurityGroupsSecurityGroupArray and SecurityGroupsSecurityGroupArrayOutput values.
// You can construct a concrete instance of `SecurityGroupsSecurityGroupArrayInput` via:
//
//          SecurityGroupsSecurityGroupArray{ SecurityGroupsSecurityGroupArgs{...} }
type SecurityGroupsSecurityGroupArrayInput interface {
	pulumi.Input

	ToSecurityGroupsSecurityGroupArrayOutput() SecurityGroupsSecurityGroupArrayOutput
	ToSecurityGroupsSecurityGroupArrayOutputWithContext(context.Context) SecurityGroupsSecurityGroupArrayOutput
}

type SecurityGroupsSecurityGroupArray []SecurityGroupsSecurityGroupInput

func (SecurityGroupsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupsSecurityGroup)(nil)).Elem()
}

func (i SecurityGroupsSecurityGroupArray) ToSecurityGroupsSecurityGroupArrayOutput() SecurityGroupsSecurityGroupArrayOutput {
	return i.ToSecurityGroupsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i SecurityGroupsSecurityGroupArray) ToSecurityGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupsSecurityGroupArrayOutput)
}

type SecurityGroupsSecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupsSecurityGroup)(nil)).Elem()
}

func (o SecurityGroupsSecurityGroupOutput) ToSecurityGroupsSecurityGroupOutput() SecurityGroupsSecurityGroupOutput {
	return o
}

func (o SecurityGroupsSecurityGroupOutput) ToSecurityGroupsSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupsSecurityGroupOutput {
	return o
}

// The creation time of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The Name of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.SecurityGroupName }).(pulumi.StringOutput)
}

// The Status of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.Status }).(pulumi.StringOutput)
}

// A Name Regex of SecurityGroup.
func (o SecurityGroupsSecurityGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.Type }).(pulumi.StringOutput)
}

// The ID of Vpc.
func (o SecurityGroupsSecurityGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityGroupsSecurityGroup) string { return v.VpcId }).(pulumi.StringOutput)
}

type SecurityGroupsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupsSecurityGroup)(nil)).Elem()
}

func (o SecurityGroupsSecurityGroupArrayOutput) ToSecurityGroupsSecurityGroupArrayOutput() SecurityGroupsSecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupsSecurityGroupArrayOutput) ToSecurityGroupsSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupsSecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupsSecurityGroupArrayOutput) Index(i pulumi.IntInput) SecurityGroupsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupsSecurityGroup {
		return vs[0].([]SecurityGroupsSecurityGroup)[vs[1].(int)]
	}).(SecurityGroupsSecurityGroupOutput)
}

type SnatEntriesSnatEntry struct {
	// The public ip address used by the SNAT entry.
	EipAddress string `pulumi:"eipAddress"`
	// An id of the public ip address used by the SNAT entry.
	EipId string `pulumi:"eipId"`
	// The id of the SNAT entry.
	Id string `pulumi:"id"`
	// An id of the nat gateway to which the entry belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The id of the SNAT entry.
	SnatEntryId string `pulumi:"snatEntryId"`
	// A name of SNAT entry.
	SnatEntryName string `pulumi:"snatEntryName"`
	// The status of the SNAT entry.
	Status string `pulumi:"status"`
	// An id of the subnet that is required to access the Internet.
	SubnetId string `pulumi:"subnetId"`
}

// SnatEntriesSnatEntryInput is an input type that accepts SnatEntriesSnatEntryArgs and SnatEntriesSnatEntryOutput values.
// You can construct a concrete instance of `SnatEntriesSnatEntryInput` via:
//
//          SnatEntriesSnatEntryArgs{...}
type SnatEntriesSnatEntryInput interface {
	pulumi.Input

	ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput
	ToSnatEntriesSnatEntryOutputWithContext(context.Context) SnatEntriesSnatEntryOutput
}

type SnatEntriesSnatEntryArgs struct {
	// The public ip address used by the SNAT entry.
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// An id of the public ip address used by the SNAT entry.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The id of the SNAT entry.
	Id pulumi.StringInput `pulumi:"id"`
	// An id of the nat gateway to which the entry belongs.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// The id of the SNAT entry.
	SnatEntryId pulumi.StringInput `pulumi:"snatEntryId"`
	// A name of SNAT entry.
	SnatEntryName pulumi.StringInput `pulumi:"snatEntryName"`
	// The status of the SNAT entry.
	Status pulumi.StringInput `pulumi:"status"`
	// An id of the subnet that is required to access the Internet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (SnatEntriesSnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntriesSnatEntry)(nil)).Elem()
}

func (i SnatEntriesSnatEntryArgs) ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput {
	return i.ToSnatEntriesSnatEntryOutputWithContext(context.Background())
}

func (i SnatEntriesSnatEntryArgs) ToSnatEntriesSnatEntryOutputWithContext(ctx context.Context) SnatEntriesSnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntriesSnatEntryOutput)
}

// SnatEntriesSnatEntryArrayInput is an input type that accepts SnatEntriesSnatEntryArray and SnatEntriesSnatEntryArrayOutput values.
// You can construct a concrete instance of `SnatEntriesSnatEntryArrayInput` via:
//
//          SnatEntriesSnatEntryArray{ SnatEntriesSnatEntryArgs{...} }
type SnatEntriesSnatEntryArrayInput interface {
	pulumi.Input

	ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput
	ToSnatEntriesSnatEntryArrayOutputWithContext(context.Context) SnatEntriesSnatEntryArrayOutput
}

type SnatEntriesSnatEntryArray []SnatEntriesSnatEntryInput

func (SnatEntriesSnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatEntriesSnatEntry)(nil)).Elem()
}

func (i SnatEntriesSnatEntryArray) ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput {
	return i.ToSnatEntriesSnatEntryArrayOutputWithContext(context.Background())
}

func (i SnatEntriesSnatEntryArray) ToSnatEntriesSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntriesSnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntriesSnatEntryArrayOutput)
}

type SnatEntriesSnatEntryOutput struct{ *pulumi.OutputState }

func (SnatEntriesSnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntriesSnatEntry)(nil)).Elem()
}

func (o SnatEntriesSnatEntryOutput) ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput {
	return o
}

func (o SnatEntriesSnatEntryOutput) ToSnatEntriesSnatEntryOutputWithContext(ctx context.Context) SnatEntriesSnatEntryOutput {
	return o
}

// The public ip address used by the SNAT entry.
func (o SnatEntriesSnatEntryOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.EipAddress }).(pulumi.StringOutput)
}

// An id of the public ip address used by the SNAT entry.
func (o SnatEntriesSnatEntryOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.EipId }).(pulumi.StringOutput)
}

// The id of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.Id }).(pulumi.StringOutput)
}

// An id of the nat gateway to which the entry belongs.
func (o SnatEntriesSnatEntryOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The id of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) SnatEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SnatEntryId }).(pulumi.StringOutput)
}

// A name of SNAT entry.
func (o SnatEntriesSnatEntryOutput) SnatEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SnatEntryName }).(pulumi.StringOutput)
}

// The status of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.Status }).(pulumi.StringOutput)
}

// An id of the subnet that is required to access the Internet.
func (o SnatEntriesSnatEntryOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SubnetId }).(pulumi.StringOutput)
}

type SnatEntriesSnatEntryArrayOutput struct{ *pulumi.OutputState }

func (SnatEntriesSnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatEntriesSnatEntry)(nil)).Elem()
}

func (o SnatEntriesSnatEntryArrayOutput) ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput {
	return o
}

func (o SnatEntriesSnatEntryArrayOutput) ToSnatEntriesSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntriesSnatEntryArrayOutput {
	return o
}

func (o SnatEntriesSnatEntryArrayOutput) Index(i pulumi.IntInput) SnatEntriesSnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnatEntriesSnatEntry {
		return vs[0].([]SnatEntriesSnatEntry)[vs[1].(int)]
	}).(SnatEntriesSnatEntryOutput)
}

type SubnetsSubnet struct {
	// The count of available ip address.
	AvailableIpAddressCount int `pulumi:"availableIpAddressCount"`
	// The cidr block of Subnet.
	CidrBlock string `pulumi:"cidrBlock"`
	// Creation time of Subnet.
	CreationTime string `pulumi:"creationTime"`
	// The description of Subnet.
	Description string `pulumi:"description"`
	// The ID of Subnet.
	Id string `pulumi:"id"`
	// The ID of route table.
	RouteTableId string `pulumi:"routeTableId"`
	// The type of route table.
	RouteTableType string `pulumi:"routeTableType"`
	// The Status of Subnet.
	Status string `pulumi:"status"`
	// The Name of Subnet.
	SubnetName string `pulumi:"subnetName"`
	// The Count of ipv4.
	TotalIpv4Count int `pulumi:"totalIpv4Count"`
	// Update time of Subnet.
	UpdateTime string `pulumi:"updateTime"`
	// The Vpc ID of Subnet.
	VpcId string `pulumi:"vpcId"`
	// The ID of Zone.
	ZoneId string `pulumi:"zoneId"`
}

// SubnetsSubnetInput is an input type that accepts SubnetsSubnetArgs and SubnetsSubnetOutput values.
// You can construct a concrete instance of `SubnetsSubnetInput` via:
//
//          SubnetsSubnetArgs{...}
type SubnetsSubnetInput interface {
	pulumi.Input

	ToSubnetsSubnetOutput() SubnetsSubnetOutput
	ToSubnetsSubnetOutputWithContext(context.Context) SubnetsSubnetOutput
}

type SubnetsSubnetArgs struct {
	// The count of available ip address.
	AvailableIpAddressCount pulumi.IntInput `pulumi:"availableIpAddressCount"`
	// The cidr block of Subnet.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// Creation time of Subnet.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The description of Subnet.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Subnet.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of route table.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The type of route table.
	RouteTableType pulumi.StringInput `pulumi:"routeTableType"`
	// The Status of Subnet.
	Status pulumi.StringInput `pulumi:"status"`
	// The Name of Subnet.
	SubnetName pulumi.StringInput `pulumi:"subnetName"`
	// The Count of ipv4.
	TotalIpv4Count pulumi.IntInput `pulumi:"totalIpv4Count"`
	// Update time of Subnet.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The Vpc ID of Subnet.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The ID of Zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (SubnetsSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetsSubnet)(nil)).Elem()
}

func (i SubnetsSubnetArgs) ToSubnetsSubnetOutput() SubnetsSubnetOutput {
	return i.ToSubnetsSubnetOutputWithContext(context.Background())
}

func (i SubnetsSubnetArgs) ToSubnetsSubnetOutputWithContext(ctx context.Context) SubnetsSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetsSubnetOutput)
}

// SubnetsSubnetArrayInput is an input type that accepts SubnetsSubnetArray and SubnetsSubnetArrayOutput values.
// You can construct a concrete instance of `SubnetsSubnetArrayInput` via:
//
//          SubnetsSubnetArray{ SubnetsSubnetArgs{...} }
type SubnetsSubnetArrayInput interface {
	pulumi.Input

	ToSubnetsSubnetArrayOutput() SubnetsSubnetArrayOutput
	ToSubnetsSubnetArrayOutputWithContext(context.Context) SubnetsSubnetArrayOutput
}

type SubnetsSubnetArray []SubnetsSubnetInput

func (SubnetsSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetsSubnet)(nil)).Elem()
}

func (i SubnetsSubnetArray) ToSubnetsSubnetArrayOutput() SubnetsSubnetArrayOutput {
	return i.ToSubnetsSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetsSubnetArray) ToSubnetsSubnetArrayOutputWithContext(ctx context.Context) SubnetsSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetsSubnetArrayOutput)
}

type SubnetsSubnetOutput struct{ *pulumi.OutputState }

func (SubnetsSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetsSubnet)(nil)).Elem()
}

func (o SubnetsSubnetOutput) ToSubnetsSubnetOutput() SubnetsSubnetOutput {
	return o
}

func (o SubnetsSubnetOutput) ToSubnetsSubnetOutputWithContext(ctx context.Context) SubnetsSubnetOutput {
	return o
}

// The count of available ip address.
func (o SubnetsSubnetOutput) AvailableIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v SubnetsSubnet) int { return v.AvailableIpAddressCount }).(pulumi.IntOutput)
}

// The cidr block of Subnet.
func (o SubnetsSubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// Creation time of Subnet.
func (o SubnetsSubnetOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of Subnet.
func (o SubnetsSubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Subnet.
func (o SubnetsSubnetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of route table.
func (o SubnetsSubnetOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// The type of route table.
func (o SubnetsSubnetOutput) RouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.RouteTableType }).(pulumi.StringOutput)
}

// The Status of Subnet.
func (o SubnetsSubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.Status }).(pulumi.StringOutput)
}

// The Name of Subnet.
func (o SubnetsSubnetOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.SubnetName }).(pulumi.StringOutput)
}

// The Count of ipv4.
func (o SubnetsSubnetOutput) TotalIpv4Count() pulumi.IntOutput {
	return o.ApplyT(func(v SubnetsSubnet) int { return v.TotalIpv4Count }).(pulumi.IntOutput)
}

// Update time of Subnet.
func (o SubnetsSubnetOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The Vpc ID of Subnet.
func (o SubnetsSubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of Zone.
func (o SubnetsSubnetOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetsSubnet) string { return v.ZoneId }).(pulumi.StringOutput)
}

type SubnetsSubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetsSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetsSubnet)(nil)).Elem()
}

func (o SubnetsSubnetArrayOutput) ToSubnetsSubnetArrayOutput() SubnetsSubnetArrayOutput {
	return o
}

func (o SubnetsSubnetArrayOutput) ToSubnetsSubnetArrayOutputWithContext(ctx context.Context) SubnetsSubnetArrayOutput {
	return o
}

func (o SubnetsSubnetArrayOutput) Index(i pulumi.IntInput) SubnetsSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetsSubnet {
		return vs[0].([]SubnetsSubnet)[vs[1].(int)]
	}).(SubnetsSubnetOutput)
}

type VpcAssociateCen struct {
	// The ID of CEN.
	CenId *string `pulumi:"cenId"`
	// The owner ID of CEN.
	CenOwnerId *string `pulumi:"cenOwnerId"`
	// The status of CEN.
	CenStatus *string `pulumi:"cenStatus"`
}

// VpcAssociateCenInput is an input type that accepts VpcAssociateCenArgs and VpcAssociateCenOutput values.
// You can construct a concrete instance of `VpcAssociateCenInput` via:
//
//          VpcAssociateCenArgs{...}
type VpcAssociateCenInput interface {
	pulumi.Input

	ToVpcAssociateCenOutput() VpcAssociateCenOutput
	ToVpcAssociateCenOutputWithContext(context.Context) VpcAssociateCenOutput
}

type VpcAssociateCenArgs struct {
	// The ID of CEN.
	CenId pulumi.StringPtrInput `pulumi:"cenId"`
	// The owner ID of CEN.
	CenOwnerId pulumi.StringPtrInput `pulumi:"cenOwnerId"`
	// The status of CEN.
	CenStatus pulumi.StringPtrInput `pulumi:"cenStatus"`
}

func (VpcAssociateCenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAssociateCen)(nil)).Elem()
}

func (i VpcAssociateCenArgs) ToVpcAssociateCenOutput() VpcAssociateCenOutput {
	return i.ToVpcAssociateCenOutputWithContext(context.Background())
}

func (i VpcAssociateCenArgs) ToVpcAssociateCenOutputWithContext(ctx context.Context) VpcAssociateCenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAssociateCenOutput)
}

// VpcAssociateCenArrayInput is an input type that accepts VpcAssociateCenArray and VpcAssociateCenArrayOutput values.
// You can construct a concrete instance of `VpcAssociateCenArrayInput` via:
//
//          VpcAssociateCenArray{ VpcAssociateCenArgs{...} }
type VpcAssociateCenArrayInput interface {
	pulumi.Input

	ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput
	ToVpcAssociateCenArrayOutputWithContext(context.Context) VpcAssociateCenArrayOutput
}

type VpcAssociateCenArray []VpcAssociateCenInput

func (VpcAssociateCenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcAssociateCen)(nil)).Elem()
}

func (i VpcAssociateCenArray) ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput {
	return i.ToVpcAssociateCenArrayOutputWithContext(context.Background())
}

func (i VpcAssociateCenArray) ToVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcAssociateCenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAssociateCenArrayOutput)
}

type VpcAssociateCenOutput struct{ *pulumi.OutputState }

func (VpcAssociateCenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAssociateCen)(nil)).Elem()
}

func (o VpcAssociateCenOutput) ToVpcAssociateCenOutput() VpcAssociateCenOutput {
	return o
}

func (o VpcAssociateCenOutput) ToVpcAssociateCenOutputWithContext(ctx context.Context) VpcAssociateCenOutput {
	return o
}

// The ID of CEN.
func (o VpcAssociateCenOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenId }).(pulumi.StringPtrOutput)
}

// The owner ID of CEN.
func (o VpcAssociateCenOutput) CenOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenOwnerId }).(pulumi.StringPtrOutput)
}

// The status of CEN.
func (o VpcAssociateCenOutput) CenStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenStatus }).(pulumi.StringPtrOutput)
}

type VpcAssociateCenArrayOutput struct{ *pulumi.OutputState }

func (VpcAssociateCenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcAssociateCen)(nil)).Elem()
}

func (o VpcAssociateCenArrayOutput) ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput {
	return o
}

func (o VpcAssociateCenArrayOutput) ToVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcAssociateCenArrayOutput {
	return o
}

func (o VpcAssociateCenArrayOutput) Index(i pulumi.IntInput) VpcAssociateCenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcAssociateCen {
		return vs[0].([]VpcAssociateCen)[vs[1].(int)]
	}).(VpcAssociateCenOutput)
}

type VpcsVpc struct {
	// The account ID of VPC.
	AccountId string `pulumi:"accountId"`
	// The associate cen list of VPC.
	AssociateCens []VpcsVpcAssociateCen `pulumi:"associateCens"`
	// The auxiliary cidr block list of VPC.
	AuxiliaryCidrBlocks []string `pulumi:"auxiliaryCidrBlocks"`
	// The cidr block of VPC.
	CidrBlock string `pulumi:"cidrBlock"`
	// The create time of VPC.
	CreationTime string `pulumi:"creationTime"`
	// The description of VPC.
	Description string `pulumi:"description"`
	// The dns server list of VPC.
	DnsServers []string `pulumi:"dnsServers"`
	// The nat gateway ID list of VPC.
	NatGatewayIds []string `pulumi:"natGatewayIds"`
	// The route table ID list of VPC.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The security group ID list of VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The status of VPC.
	Status string `pulumi:"status"`
	// The subnet ID list of VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	// The update time of VPC.
	UpdateTime string `pulumi:"updateTime"`
	// The ID of VPC.
	VpcId string `pulumi:"vpcId"`
	// The name of VPC.
	VpcName string `pulumi:"vpcName"`
}

// VpcsVpcInput is an input type that accepts VpcsVpcArgs and VpcsVpcOutput values.
// You can construct a concrete instance of `VpcsVpcInput` via:
//
//          VpcsVpcArgs{...}
type VpcsVpcInput interface {
	pulumi.Input

	ToVpcsVpcOutput() VpcsVpcOutput
	ToVpcsVpcOutputWithContext(context.Context) VpcsVpcOutput
}

type VpcsVpcArgs struct {
	// The account ID of VPC.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The associate cen list of VPC.
	AssociateCens VpcsVpcAssociateCenArrayInput `pulumi:"associateCens"`
	// The auxiliary cidr block list of VPC.
	AuxiliaryCidrBlocks pulumi.StringArrayInput `pulumi:"auxiliaryCidrBlocks"`
	// The cidr block of VPC.
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// The create time of VPC.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The description of VPC.
	Description pulumi.StringInput `pulumi:"description"`
	// The dns server list of VPC.
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The nat gateway ID list of VPC.
	NatGatewayIds pulumi.StringArrayInput `pulumi:"natGatewayIds"`
	// The route table ID list of VPC.
	RouteTableIds pulumi.StringArrayInput `pulumi:"routeTableIds"`
	// The security group ID list of VPC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The status of VPC.
	Status pulumi.StringInput `pulumi:"status"`
	// The subnet ID list of VPC.
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// The update time of VPC.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The ID of VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The name of VPC.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (VpcsVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcsVpc)(nil)).Elem()
}

func (i VpcsVpcArgs) ToVpcsVpcOutput() VpcsVpcOutput {
	return i.ToVpcsVpcOutputWithContext(context.Background())
}

func (i VpcsVpcArgs) ToVpcsVpcOutputWithContext(ctx context.Context) VpcsVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsVpcOutput)
}

// VpcsVpcArrayInput is an input type that accepts VpcsVpcArray and VpcsVpcArrayOutput values.
// You can construct a concrete instance of `VpcsVpcArrayInput` via:
//
//          VpcsVpcArray{ VpcsVpcArgs{...} }
type VpcsVpcArrayInput interface {
	pulumi.Input

	ToVpcsVpcArrayOutput() VpcsVpcArrayOutput
	ToVpcsVpcArrayOutputWithContext(context.Context) VpcsVpcArrayOutput
}

type VpcsVpcArray []VpcsVpcInput

func (VpcsVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcsVpc)(nil)).Elem()
}

func (i VpcsVpcArray) ToVpcsVpcArrayOutput() VpcsVpcArrayOutput {
	return i.ToVpcsVpcArrayOutputWithContext(context.Background())
}

func (i VpcsVpcArray) ToVpcsVpcArrayOutputWithContext(ctx context.Context) VpcsVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsVpcArrayOutput)
}

type VpcsVpcOutput struct{ *pulumi.OutputState }

func (VpcsVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcsVpc)(nil)).Elem()
}

func (o VpcsVpcOutput) ToVpcsVpcOutput() VpcsVpcOutput {
	return o
}

func (o VpcsVpcOutput) ToVpcsVpcOutputWithContext(ctx context.Context) VpcsVpcOutput {
	return o
}

// The account ID of VPC.
func (o VpcsVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The associate cen list of VPC.
func (o VpcsVpcOutput) AssociateCens() VpcsVpcAssociateCenArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []VpcsVpcAssociateCen { return v.AssociateCens }).(VpcsVpcAssociateCenArrayOutput)
}

// The auxiliary cidr block list of VPC.
func (o VpcsVpcOutput) AuxiliaryCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.AuxiliaryCidrBlocks }).(pulumi.StringArrayOutput)
}

// The cidr block of VPC.
func (o VpcsVpcOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// The create time of VPC.
func (o VpcsVpcOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of VPC.
func (o VpcsVpcOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.Description }).(pulumi.StringOutput)
}

// The dns server list of VPC.
func (o VpcsVpcOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// The nat gateway ID list of VPC.
func (o VpcsVpcOutput) NatGatewayIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.NatGatewayIds }).(pulumi.StringArrayOutput)
}

// The route table ID list of VPC.
func (o VpcsVpcOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// The security group ID list of VPC.
func (o VpcsVpcOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The status of VPC.
func (o VpcsVpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.Status }).(pulumi.StringOutput)
}

// The subnet ID list of VPC.
func (o VpcsVpcOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpcsVpc) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// The update time of VPC.
func (o VpcsVpcOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of VPC.
func (o VpcsVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

// The name of VPC.
func (o VpcsVpcOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpc) string { return v.VpcName }).(pulumi.StringOutput)
}

type VpcsVpcArrayOutput struct{ *pulumi.OutputState }

func (VpcsVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcsVpc)(nil)).Elem()
}

func (o VpcsVpcArrayOutput) ToVpcsVpcArrayOutput() VpcsVpcArrayOutput {
	return o
}

func (o VpcsVpcArrayOutput) ToVpcsVpcArrayOutputWithContext(ctx context.Context) VpcsVpcArrayOutput {
	return o
}

func (o VpcsVpcArrayOutput) Index(i pulumi.IntInput) VpcsVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcsVpc {
		return vs[0].([]VpcsVpc)[vs[1].(int)]
	}).(VpcsVpcOutput)
}

type VpcsVpcAssociateCen struct {
	// The ID of CEN.
	CenId string `pulumi:"cenId"`
	// The owner ID of CEN.
	CenOwnerId string `pulumi:"cenOwnerId"`
	// The status of CEN.
	CenStatus string `pulumi:"cenStatus"`
}

// VpcsVpcAssociateCenInput is an input type that accepts VpcsVpcAssociateCenArgs and VpcsVpcAssociateCenOutput values.
// You can construct a concrete instance of `VpcsVpcAssociateCenInput` via:
//
//          VpcsVpcAssociateCenArgs{...}
type VpcsVpcAssociateCenInput interface {
	pulumi.Input

	ToVpcsVpcAssociateCenOutput() VpcsVpcAssociateCenOutput
	ToVpcsVpcAssociateCenOutputWithContext(context.Context) VpcsVpcAssociateCenOutput
}

type VpcsVpcAssociateCenArgs struct {
	// The ID of CEN.
	CenId pulumi.StringInput `pulumi:"cenId"`
	// The owner ID of CEN.
	CenOwnerId pulumi.StringInput `pulumi:"cenOwnerId"`
	// The status of CEN.
	CenStatus pulumi.StringInput `pulumi:"cenStatus"`
}

func (VpcsVpcAssociateCenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcsVpcAssociateCen)(nil)).Elem()
}

func (i VpcsVpcAssociateCenArgs) ToVpcsVpcAssociateCenOutput() VpcsVpcAssociateCenOutput {
	return i.ToVpcsVpcAssociateCenOutputWithContext(context.Background())
}

func (i VpcsVpcAssociateCenArgs) ToVpcsVpcAssociateCenOutputWithContext(ctx context.Context) VpcsVpcAssociateCenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsVpcAssociateCenOutput)
}

// VpcsVpcAssociateCenArrayInput is an input type that accepts VpcsVpcAssociateCenArray and VpcsVpcAssociateCenArrayOutput values.
// You can construct a concrete instance of `VpcsVpcAssociateCenArrayInput` via:
//
//          VpcsVpcAssociateCenArray{ VpcsVpcAssociateCenArgs{...} }
type VpcsVpcAssociateCenArrayInput interface {
	pulumi.Input

	ToVpcsVpcAssociateCenArrayOutput() VpcsVpcAssociateCenArrayOutput
	ToVpcsVpcAssociateCenArrayOutputWithContext(context.Context) VpcsVpcAssociateCenArrayOutput
}

type VpcsVpcAssociateCenArray []VpcsVpcAssociateCenInput

func (VpcsVpcAssociateCenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcsVpcAssociateCen)(nil)).Elem()
}

func (i VpcsVpcAssociateCenArray) ToVpcsVpcAssociateCenArrayOutput() VpcsVpcAssociateCenArrayOutput {
	return i.ToVpcsVpcAssociateCenArrayOutputWithContext(context.Background())
}

func (i VpcsVpcAssociateCenArray) ToVpcsVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcsVpcAssociateCenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcsVpcAssociateCenArrayOutput)
}

type VpcsVpcAssociateCenOutput struct{ *pulumi.OutputState }

func (VpcsVpcAssociateCenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcsVpcAssociateCen)(nil)).Elem()
}

func (o VpcsVpcAssociateCenOutput) ToVpcsVpcAssociateCenOutput() VpcsVpcAssociateCenOutput {
	return o
}

func (o VpcsVpcAssociateCenOutput) ToVpcsVpcAssociateCenOutputWithContext(ctx context.Context) VpcsVpcAssociateCenOutput {
	return o
}

// The ID of CEN.
func (o VpcsVpcAssociateCenOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpcAssociateCen) string { return v.CenId }).(pulumi.StringOutput)
}

// The owner ID of CEN.
func (o VpcsVpcAssociateCenOutput) CenOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpcAssociateCen) string { return v.CenOwnerId }).(pulumi.StringOutput)
}

// The status of CEN.
func (o VpcsVpcAssociateCenOutput) CenStatus() pulumi.StringOutput {
	return o.ApplyT(func(v VpcsVpcAssociateCen) string { return v.CenStatus }).(pulumi.StringOutput)
}

type VpcsVpcAssociateCenArrayOutput struct{ *pulumi.OutputState }

func (VpcsVpcAssociateCenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcsVpcAssociateCen)(nil)).Elem()
}

func (o VpcsVpcAssociateCenArrayOutput) ToVpcsVpcAssociateCenArrayOutput() VpcsVpcAssociateCenArrayOutput {
	return o
}

func (o VpcsVpcAssociateCenArrayOutput) ToVpcsVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcsVpcAssociateCenArrayOutput {
	return o
}

func (o VpcsVpcAssociateCenArrayOutput) Index(i pulumi.IntInput) VpcsVpcAssociateCenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcsVpcAssociateCen {
		return vs[0].([]VpcsVpcAssociateCen)[vs[1].(int)]
	}).(VpcsVpcAssociateCenOutput)
}

type ZonesZone struct {
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//          ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//          ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryInput)(nil)).Elem(), AclAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryArrayInput)(nil)).Elem(), AclAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclInput)(nil)).Elem(), AclsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclArrayInput)(nil)).Elem(), AclsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateInput)(nil)).Elem(), CertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateArrayInput)(nil)).Elem(), CertificatesCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayInput)(nil)).Elem(), GatewaysNatGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayArrayInput)(nil)).Elem(), GatewaysNatGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayEipAddressInput)(nil)).Elem(), GatewaysNatGatewayEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayEipAddressArrayInput)(nil)).Elem(), GatewaysNatGatewayEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacesNetworkInterfaceInput)(nil)).Elem(), NetworkInterfacesNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfacesNetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfacesNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteEntriesRouteEntryInput)(nil)).Elem(), RouteEntriesRouteEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteEntriesRouteEntryArrayInput)(nil)).Elem(), RouteEntriesRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesRouteTableInput)(nil)).Elem(), RouteTablesRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTablesRouteTableArrayInput)(nil)).Elem(), RouteTablesRouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupsSecurityGroupInput)(nil)).Elem(), SecurityGroupsSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupsSecurityGroupArrayInput)(nil)).Elem(), SecurityGroupsSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntriesSnatEntryInput)(nil)).Elem(), SnatEntriesSnatEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntriesSnatEntryArrayInput)(nil)).Elem(), SnatEntriesSnatEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetsSubnetInput)(nil)).Elem(), SubnetsSubnetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetsSubnetArrayInput)(nil)).Elem(), SubnetsSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAssociateCenInput)(nil)).Elem(), VpcAssociateCenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAssociateCenArrayInput)(nil)).Elem(), VpcAssociateCenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsVpcInput)(nil)).Elem(), VpcsVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsVpcArrayInput)(nil)).Elem(), VpcsVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsVpcAssociateCenInput)(nil)).Elem(), VpcsVpcAssociateCenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcsVpcAssociateCenArrayInput)(nil)).Elem(), VpcsVpcAssociateCenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(AclAclEntryOutput{})
	pulumi.RegisterOutputType(AclAclEntryArrayOutput{})
	pulumi.RegisterOutputType(AclsAclOutput{})
	pulumi.RegisterOutputType(AclsAclArrayOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateArrayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayEipAddressOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayEipAddressArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfacesNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfacesNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(RouteEntriesRouteEntryOutput{})
	pulumi.RegisterOutputType(RouteEntriesRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(RouteTablesRouteTableOutput{})
	pulumi.RegisterOutputType(RouteTablesRouteTableArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupsSecurityGroupOutput{})
	pulumi.RegisterOutputType(SecurityGroupsSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(SnatEntriesSnatEntryOutput{})
	pulumi.RegisterOutputType(SnatEntriesSnatEntryArrayOutput{})
	pulumi.RegisterOutputType(SubnetsSubnetOutput{})
	pulumi.RegisterOutputType(SubnetsSubnetArrayOutput{})
	pulumi.RegisterOutputType(VpcAssociateCenOutput{})
	pulumi.RegisterOutputType(VpcAssociateCenArrayOutput{})
	pulumi.RegisterOutputType(VpcsVpcOutput{})
	pulumi.RegisterOutputType(VpcsVpcArrayOutput{})
	pulumi.RegisterOutputType(VpcsVpcAssociateCenOutput{})
	pulumi.RegisterOutputType(VpcsVpcAssociateCenArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
