// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of nat gateways
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const defaultGateways = pulumi.output(volcengine.Vpc.Gateways({
 *     ids: [
 *         "ngw-2743w1f6iqby87fap8tvm9kop",
 *         "ngw-274gwbqe340zk7fap8spkzo7x",
 *     ],
 * }));
 * ```
 */
export function gateways(args?: GatewaysArgs, opts?: pulumi.InvokeOptions): Promise<GatewaysResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("volcengine:Vpc/gateways:Gateways", {
        "description": args.description,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "natGatewayName": args.natGatewayName,
        "outputFile": args.outputFile,
        "spec": args.spec,
        "subnetId": args.subnetId,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking Gateways.
 */
export interface GatewaysArgs {
    /**
     * The description of the NatGateway.
     */
    description?: string;
    /**
     * The list of NatGateway IDs.
     */
    ids?: string[];
    /**
     * The Name Regex of NatGateway.
     */
    nameRegex?: string;
    /**
     * The name of the NatGateway.
     */
    natGatewayName?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The specification of the NatGateway.
     */
    spec?: string;
    /**
     * The id of the Subnet.
     */
    subnetId?: string;
    /**
     * The id of the VPC.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by Gateways.
 */
export interface GatewaysResult {
    /**
     * The description of the NatGateway.
     */
    readonly description?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly nameRegex?: string;
    /**
     * The name of the NatGateway.
     */
    readonly natGatewayName?: string;
    /**
     * The collection of NatGateway query.
     */
    readonly natGateways: outputs.Vpc.GatewaysNatGateway[];
    readonly outputFile?: string;
    /**
     * The specification of the NatGateway.
     */
    readonly spec?: string;
    /**
     * The ID of the Subnet.
     */
    readonly subnetId?: string;
    /**
     * The total count of NatGateway query.
     */
    readonly totalCount: number;
    /**
     * The ID of the VPC.
     */
    readonly vpcId?: string;
}

export function gatewaysOutput(args?: GatewaysOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GatewaysResult> {
    return pulumi.output(args).apply(a => gateways(a, opts))
}

/**
 * A collection of arguments for invoking Gateways.
 */
export interface GatewaysOutputArgs {
    /**
     * The description of the NatGateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The list of NatGateway IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name Regex of NatGateway.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * The name of the NatGateway.
     */
    natGatewayName?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The specification of the NatGateway.
     */
    spec?: pulumi.Input<string>;
    /**
     * The id of the Subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The id of the VPC.
     */
    vpcId?: pulumi.Input<string>;
}
