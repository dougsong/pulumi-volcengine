// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage scaling policy
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = new volcengine.autoscaling.ScalingPolicy("foo", {
 *     active: false,
 *     adjustmentType: "QuantityChangeInCapacity",
 *     adjustmentValue: 100,
 *     alarmPolicyConditionComparisonOperator: "=",
 *     alarmPolicyConditionMetricName: "Instance_CpuBusy_Avg",
 *     alarmPolicyConditionMetricUnit: "Percent",
 *     alarmPolicyConditionThreshold: "100",
 *     alarmPolicyEvaluationCount: 1,
 *     alarmPolicyRuleType: "Static",
 *     cooldown: 10,
 *     scalingGroupId: "scg-ybqm0b6kcigh9zu9ce6t",
 *     scalingPolicyName: "tf-test",
 *     scalingPolicyType: "Alarm",
 *     scheduledPolicyLaunchTime: "2022-07-09T09:59Z",
 *     scheduledPolicyRecurrenceEndTime: "2022-07-24T09:25Z",
 *     scheduledPolicyRecurrenceType: "Daily",
 *     scheduledPolicyRecurrenceValue: "10",
 * });
 * ```
 *
 * ## Import
 *
 * ScalingPolicy can be imported using the ScalingGroupId:ScalingPolicyId, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:autoscaling/scalingPolicy:ScalingPolicy default scg-yblfbfhy7agh9zn72iaz:sp-yblf9l4fvcl8j1prohsp
 * ```
 */
export class ScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScalingPolicyState, opts?: pulumi.CustomResourceOptions): ScalingPolicy {
        return new ScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:autoscaling/scalingPolicy:ScalingPolicy';

    /**
     * Returns true if the given object is an instance of ScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScalingPolicy.__pulumiType;
    }

    /**
     * The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
     */
    public readonly adjustmentType!: pulumi.Output<string>;
    /**
     * The adjustment value of the scaling policy.
     */
    public readonly adjustmentValue!: pulumi.Output<number>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy. Valid values: >, <, =.
     */
    public readonly alarmPolicyConditionComparisonOperator!: pulumi.Output<string | undefined>;
    /**
     * The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
     */
    public readonly alarmPolicyConditionMetricName!: pulumi.Output<string | undefined>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy.
     */
    public readonly alarmPolicyConditionMetricUnit!: pulumi.Output<string | undefined>;
    /**
     * The threshold of the alarm policy condition of the scaling policy.
     */
    public readonly alarmPolicyConditionThreshold!: pulumi.Output<string | undefined>;
    /**
     * The evaluation count of the alarm policy of the scaling policy.
     */
    public readonly alarmPolicyEvaluationCount!: pulumi.Output<number | undefined>;
    /**
     * The rule type of the alarm policy of the scaling policy. Valid value: Static.
     */
    public readonly alarmPolicyRuleType!: pulumi.Output<string | undefined>;
    /**
     * The cooldown of the scaling policy. Default value is the cooldown time of the scaling group.
     */
    public readonly cooldown!: pulumi.Output<number>;
    /**
     * The id of the scaling group to which the scaling policy belongs.
     */
    public readonly scalingGroupId!: pulumi.Output<string>;
    /**
     * The name of the scaling policy.
     */
    public readonly scalingPolicyName!: pulumi.Output<string>;
    /**
     * The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
     */
    public readonly scalingPolicyType!: pulumi.Output<string>;
    /**
     * The launch time of the scheduled policy of the scaling policy.
     */
    public readonly scheduledPolicyLaunchTime!: pulumi.Output<string>;
    /**
     * The recurrence end time of the scheduled policy of the scaling policy.
     */
    public readonly scheduledPolicyRecurrenceEndTime!: pulumi.Output<string | undefined>;
    /**
     * The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
     */
    public readonly scheduledPolicyRecurrenceType!: pulumi.Output<string | undefined>;
    /**
     * The recurrence value the scheduled policy of the scaling policy.
     */
    public readonly scheduledPolicyRecurrenceValue!: pulumi.Output<string | undefined>;
    /**
     * The status of the scaling policy. Valid values: Active, InActive.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScalingPolicyArgs | ScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScalingPolicyState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["adjustmentType"] = state ? state.adjustmentType : undefined;
            resourceInputs["adjustmentValue"] = state ? state.adjustmentValue : undefined;
            resourceInputs["alarmPolicyConditionComparisonOperator"] = state ? state.alarmPolicyConditionComparisonOperator : undefined;
            resourceInputs["alarmPolicyConditionMetricName"] = state ? state.alarmPolicyConditionMetricName : undefined;
            resourceInputs["alarmPolicyConditionMetricUnit"] = state ? state.alarmPolicyConditionMetricUnit : undefined;
            resourceInputs["alarmPolicyConditionThreshold"] = state ? state.alarmPolicyConditionThreshold : undefined;
            resourceInputs["alarmPolicyEvaluationCount"] = state ? state.alarmPolicyEvaluationCount : undefined;
            resourceInputs["alarmPolicyRuleType"] = state ? state.alarmPolicyRuleType : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingPolicyName"] = state ? state.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = state ? state.scalingPolicyType : undefined;
            resourceInputs["scheduledPolicyLaunchTime"] = state ? state.scheduledPolicyLaunchTime : undefined;
            resourceInputs["scheduledPolicyRecurrenceEndTime"] = state ? state.scheduledPolicyRecurrenceEndTime : undefined;
            resourceInputs["scheduledPolicyRecurrenceType"] = state ? state.scheduledPolicyRecurrenceType : undefined;
            resourceInputs["scheduledPolicyRecurrenceValue"] = state ? state.scheduledPolicyRecurrenceValue : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ScalingPolicyArgs | undefined;
            if ((!args || args.adjustmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adjustmentType'");
            }
            if ((!args || args.adjustmentValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adjustmentValue'");
            }
            if ((!args || args.scalingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            if ((!args || args.scalingPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyName'");
            }
            if ((!args || args.scalingPolicyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyType'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["adjustmentType"] = args ? args.adjustmentType : undefined;
            resourceInputs["adjustmentValue"] = args ? args.adjustmentValue : undefined;
            resourceInputs["alarmPolicyConditionComparisonOperator"] = args ? args.alarmPolicyConditionComparisonOperator : undefined;
            resourceInputs["alarmPolicyConditionMetricName"] = args ? args.alarmPolicyConditionMetricName : undefined;
            resourceInputs["alarmPolicyConditionMetricUnit"] = args ? args.alarmPolicyConditionMetricUnit : undefined;
            resourceInputs["alarmPolicyConditionThreshold"] = args ? args.alarmPolicyConditionThreshold : undefined;
            resourceInputs["alarmPolicyEvaluationCount"] = args ? args.alarmPolicyEvaluationCount : undefined;
            resourceInputs["alarmPolicyRuleType"] = args ? args.alarmPolicyRuleType : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["scalingGroupId"] = args ? args.scalingGroupId : undefined;
            resourceInputs["scalingPolicyName"] = args ? args.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = args ? args.scalingPolicyType : undefined;
            resourceInputs["scheduledPolicyLaunchTime"] = args ? args.scheduledPolicyLaunchTime : undefined;
            resourceInputs["scheduledPolicyRecurrenceEndTime"] = args ? args.scheduledPolicyRecurrenceEndTime : undefined;
            resourceInputs["scheduledPolicyRecurrenceType"] = args ? args.scheduledPolicyRecurrenceType : undefined;
            resourceInputs["scheduledPolicyRecurrenceValue"] = args ? args.scheduledPolicyRecurrenceValue : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScalingPolicy resources.
 */
export interface ScalingPolicyState {
    /**
     * The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The adjustment value of the scaling policy.
     */
    adjustmentValue?: pulumi.Input<number>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy. Valid values: >, <, =.
     */
    alarmPolicyConditionComparisonOperator?: pulumi.Input<string>;
    /**
     * The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
     */
    alarmPolicyConditionMetricName?: pulumi.Input<string>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy.
     */
    alarmPolicyConditionMetricUnit?: pulumi.Input<string>;
    /**
     * The threshold of the alarm policy condition of the scaling policy.
     */
    alarmPolicyConditionThreshold?: pulumi.Input<string>;
    /**
     * The evaluation count of the alarm policy of the scaling policy.
     */
    alarmPolicyEvaluationCount?: pulumi.Input<number>;
    /**
     * The rule type of the alarm policy of the scaling policy. Valid value: Static.
     */
    alarmPolicyRuleType?: pulumi.Input<string>;
    /**
     * The cooldown of the scaling policy. Default value is the cooldown time of the scaling group.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * The id of the scaling group to which the scaling policy belongs.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * The name of the scaling policy.
     */
    scalingPolicyName?: pulumi.Input<string>;
    /**
     * The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
     */
    scalingPolicyType?: pulumi.Input<string>;
    /**
     * The launch time of the scheduled policy of the scaling policy.
     */
    scheduledPolicyLaunchTime?: pulumi.Input<string>;
    /**
     * The recurrence end time of the scheduled policy of the scaling policy.
     */
    scheduledPolicyRecurrenceEndTime?: pulumi.Input<string>;
    /**
     * The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
     */
    scheduledPolicyRecurrenceType?: pulumi.Input<string>;
    /**
     * The recurrence value the scheduled policy of the scaling policy.
     */
    scheduledPolicyRecurrenceValue?: pulumi.Input<string>;
    /**
     * The status of the scaling policy. Valid values: Active, InActive.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScalingPolicy resource.
 */
export interface ScalingPolicyArgs {
    /**
     * The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
     */
    adjustmentType: pulumi.Input<string>;
    /**
     * The adjustment value of the scaling policy.
     */
    adjustmentValue: pulumi.Input<number>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy. Valid values: >, <, =.
     */
    alarmPolicyConditionComparisonOperator?: pulumi.Input<string>;
    /**
     * The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
     */
    alarmPolicyConditionMetricName?: pulumi.Input<string>;
    /**
     * The comparison operator of the alarm policy condition of the scaling policy.
     */
    alarmPolicyConditionMetricUnit?: pulumi.Input<string>;
    /**
     * The threshold of the alarm policy condition of the scaling policy.
     */
    alarmPolicyConditionThreshold?: pulumi.Input<string>;
    /**
     * The evaluation count of the alarm policy of the scaling policy.
     */
    alarmPolicyEvaluationCount?: pulumi.Input<number>;
    /**
     * The rule type of the alarm policy of the scaling policy. Valid value: Static.
     */
    alarmPolicyRuleType?: pulumi.Input<string>;
    /**
     * The cooldown of the scaling policy. Default value is the cooldown time of the scaling group.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * The id of the scaling group to which the scaling policy belongs.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * The name of the scaling policy.
     */
    scalingPolicyName: pulumi.Input<string>;
    /**
     * The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
     */
    scalingPolicyType: pulumi.Input<string>;
    /**
     * The launch time of the scheduled policy of the scaling policy.
     */
    scheduledPolicyLaunchTime?: pulumi.Input<string>;
    /**
     * The recurrence end time of the scheduled policy of the scaling policy.
     */
    scheduledPolicyRecurrenceEndTime?: pulumi.Input<string>;
    /**
     * The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
     */
    scheduledPolicyRecurrenceType?: pulumi.Input<string>;
    /**
     * The recurrence value the scheduled policy of the scaling policy.
     */
    scheduledPolicyRecurrenceValue?: pulumi.Input<string>;
}
