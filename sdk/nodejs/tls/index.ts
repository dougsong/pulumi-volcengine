// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./alarm";
export * from "./alarmNotifyGroup";
export * from "./alarmNotifyGroups";
export * from "./alarms";
export * from "./host";
export * from "./hostGroup";
export * from "./hostGroups";
export * from "./hosts";
export * from "./index_";
export * from "./indexes";
export * from "./kafkaConsumer";
export * from "./kafkaConsumers";
export * from "./project";
export * from "./projects";
export * from "./rule";
export * from "./ruleApplier";
export * from "./ruleAppliers";
export * from "./rules";
export * from "./shards";
export * from "./topic";
export * from "./topics";

// Import resources to register:
import { Alarm } from "./alarm";
import { AlarmNotifyGroup } from "./alarmNotifyGroup";
import { Host } from "./host";
import { HostGroup } from "./hostGroup";
import { Index } from "./index_";
import { KafkaConsumer } from "./kafkaConsumer";
import { Project } from "./project";
import { Rule } from "./rule";
import { RuleApplier } from "./ruleApplier";
import { Topic } from "./topic";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:tls/alarm:Alarm":
                return new Alarm(name, <any>undefined, { urn })
            case "volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup":
                return new AlarmNotifyGroup(name, <any>undefined, { urn })
            case "volcengine:tls/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "volcengine:tls/hostGroup:HostGroup":
                return new HostGroup(name, <any>undefined, { urn })
            case "volcengine:tls/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "volcengine:tls/kafkaConsumer:KafkaConsumer":
                return new KafkaConsumer(name, <any>undefined, { urn })
            case "volcengine:tls/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "volcengine:tls/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "volcengine:tls/ruleApplier:RuleApplier":
                return new RuleApplier(name, <any>undefined, { urn })
            case "volcengine:tls/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "tls/alarm", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/alarmNotifyGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/host", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/hostGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/index", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/kafkaConsumer", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/project", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/rule", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/ruleApplier", _module)
pulumi.runtime.registerResourceModule("volcengine", "tls/topic", _module)
