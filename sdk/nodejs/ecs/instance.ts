// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ecs instance
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = new volcengine.vpc.Vpc("foo", {
 *     vpcName: "tf-test-2",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const foo1Subnet = new volcengine.vpc.Subnet("foo1Subnet", {
 *     subnetName: "subnet-test-1",
 *     cidrBlock: "172.16.1.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: foo.id,
 * });
 * const foo1SecurityGroup = new volcengine.vpc.SecurityGroup("foo1SecurityGroup", {vpcId: foo.id}, {
 *     dependsOn: [foo1Subnet],
 * });
 * const _default = new volcengine.ecs.Instance("default", {
 *     zoneId: "cn-beijing-a",
 *     imageId: "image-aagd56zrw2jtdro3bnrl",
 *     instanceType: "ecs.g1.large",
 *     instanceName: "xym-tf-test-2",
 *     description: "xym-tf-test-desc-1",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "PTSSD",
 *     systemVolumeSize: 60,
 *     subnetId: foo1Subnet.id,
 *     securityGroupIds: [foo1SecurityGroup.id],
 *     dataVolumes: [{
 *         volumeType: "PTSSD",
 *         size: 100,
 *         deleteWithInstance: true,
 *     }],
 * });
 * //  secondary_network_interfaces {
 * //    subnet_id = volcengine_subnet.foo1.id
 * //    security_group_ids = [volcengine_security_group.foo1.id]
 * //  }
 * ```
 *
 * ## Import
 *
 * ECS Instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:Ecs/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
     */
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    /**
     * The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
     */
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    /**
     * The number of ECS instance CPU cores.
     */
    public /*out*/ readonly cpus!: pulumi.Output<number>;
    /**
     * The create time of ECS instance.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The data volume collection of  ECS instance.
     */
    public readonly dataVolumes!: pulumi.Output<outputs.Ecs.InstanceDataVolume[] | undefined>;
    /**
     * The description of ECS instance.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The host name of ECS instance.
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * The hpc cluster ID of ECS instance.
     */
    public readonly hpcClusterId!: pulumi.Output<string | undefined>;
    /**
     * The Image ID of ECS instance.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
     */
    public readonly includeDataVolumes!: pulumi.Output<boolean | undefined>;
    /**
     * The charge type of ECS instance.
     */
    public readonly instanceChargeType!: pulumi.Output<string>;
    /**
     * The ID of ECS instance.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * The name of ECS instance.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * The instance type of ECS instance.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * The ssh key ID of ECS instance.
     */
    public /*out*/ readonly keyPairId!: pulumi.Output<string>;
    /**
     * The ssh key name of ECS instance.
     */
    public readonly keyPairName!: pulumi.Output<string>;
    /**
     * The memory size of ECS instance.
     */
    public /*out*/ readonly memorySize!: pulumi.Output<number>;
    /**
     * The ID of primary networkInterface.
     */
    public /*out*/ readonly networkInterfaceId!: pulumi.Output<string>;
    /**
     * The os name of ECS instance.
     */
    public /*out*/ readonly osName!: pulumi.Output<string>;
    /**
     * The os type of ECS instance.
     */
    public /*out*/ readonly osType!: pulumi.Output<string>;
    /**
     * The password of ECS instance.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * The secondary networkInterface detail collection of ECS instance.
     */
    public readonly secondaryNetworkInterfaces!: pulumi.Output<outputs.Ecs.InstanceSecondaryNetworkInterface[] | undefined>;
    /**
     * The security enhancement strategy of ECS instance.Default is true.
     */
    public readonly securityEnhancementStrategy!: pulumi.Output<string | undefined>;
    /**
     * The security group ID set of primary networkInterface.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * The status of ECS instance.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The stop mode of ECS instance.
     */
    public /*out*/ readonly stoppedMode!: pulumi.Output<string>;
    /**
     * The subnet ID of primary networkInterface.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The ID of system volume.
     */
    public /*out*/ readonly systemVolumeId!: pulumi.Output<string>;
    /**
     * The size of system volume.
     */
    public readonly systemVolumeSize!: pulumi.Output<number>;
    /**
     * The type of system volume.
     */
    public readonly systemVolumeType!: pulumi.Output<string>;
    /**
     * The update time of ECS instance.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The user data of ECS instance.
     */
    public readonly userData!: pulumi.Output<string>;
    /**
     * The VPC ID of ECS instance.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The available zone ID of ECS instance.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["hpcClusterId"] = state ? state.hpcClusterId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["includeDataVolumes"] = state ? state.includeDataVolumes : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["secondaryNetworkInterfaces"] = state ? state.secondaryNetworkInterfaces : undefined;
            resourceInputs["securityEnhancementStrategy"] = state ? state.securityEnhancementStrategy : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stoppedMode"] = state ? state.stoppedMode : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemVolumeId"] = state ? state.systemVolumeId : undefined;
            resourceInputs["systemVolumeSize"] = state ? state.systemVolumeSize : undefined;
            resourceInputs["systemVolumeType"] = state ? state.systemVolumeType : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.systemVolumeSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemVolumeSize'");
            }
            if ((!args || args.systemVolumeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemVolumeType'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["hpcClusterId"] = args ? args.hpcClusterId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["includeDataVolumes"] = args ? args.includeDataVolumes : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["secondaryNetworkInterfaces"] = args ? args.secondaryNetworkInterfaces : undefined;
            resourceInputs["securityEnhancementStrategy"] = args ? args.securityEnhancementStrategy : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["systemVolumeSize"] = args ? args.systemVolumeSize : undefined;
            resourceInputs["systemVolumeType"] = args ? args.systemVolumeType : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["cpus"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
            resourceInputs["memorySize"] = undefined /*out*/;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["osType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["stoppedMode"] = undefined /*out*/;
            resourceInputs["systemVolumeId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * The number of ECS instance CPU cores.
     */
    cpus?: pulumi.Input<number>;
    /**
     * The create time of ECS instance.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The data volume collection of  ECS instance.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataVolume>[]>;
    /**
     * The description of ECS instance.
     */
    description?: pulumi.Input<string>;
    /**
     * The host name of ECS instance.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The hpc cluster ID of ECS instance.
     */
    hpcClusterId?: pulumi.Input<string>;
    /**
     * The Image ID of ECS instance.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
     */
    includeDataVolumes?: pulumi.Input<boolean>;
    /**
     * The charge type of ECS instance.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * The ID of ECS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of ECS instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The instance type of ECS instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The ssh key ID of ECS instance.
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * The ssh key name of ECS instance.
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * The memory size of ECS instance.
     */
    memorySize?: pulumi.Input<number>;
    /**
     * The ID of primary networkInterface.
     */
    networkInterfaceId?: pulumi.Input<string>;
    /**
     * The os name of ECS instance.
     */
    osName?: pulumi.Input<string>;
    /**
     * The os type of ECS instance.
     */
    osType?: pulumi.Input<string>;
    /**
     * The password of ECS instance.
     */
    password?: pulumi.Input<string>;
    /**
     * The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
     */
    period?: pulumi.Input<number>;
    /**
     * The secondary networkInterface detail collection of ECS instance.
     */
    secondaryNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSecondaryNetworkInterface>[]>;
    /**
     * The security enhancement strategy of ECS instance.Default is true.
     */
    securityEnhancementStrategy?: pulumi.Input<string>;
    /**
     * The security group ID set of primary networkInterface.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of ECS instance.
     */
    status?: pulumi.Input<string>;
    /**
     * The stop mode of ECS instance.
     */
    stoppedMode?: pulumi.Input<string>;
    /**
     * The subnet ID of primary networkInterface.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The ID of system volume.
     */
    systemVolumeId?: pulumi.Input<string>;
    /**
     * The size of system volume.
     */
    systemVolumeSize?: pulumi.Input<number>;
    /**
     * The type of system volume.
     */
    systemVolumeType?: pulumi.Input<string>;
    /**
     * The update time of ECS instance.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The user data of ECS instance.
     */
    userData?: pulumi.Input<string>;
    /**
     * The VPC ID of ECS instance.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The available zone ID of ECS instance.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The auto renew flag of ECS instance.Only effective when instanceChargeType is PrePaid. Default is true.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The auto renew period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 1.
     */
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * The data volume collection of  ECS instance.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataVolume>[]>;
    /**
     * The description of ECS instance.
     */
    description?: pulumi.Input<string>;
    /**
     * The host name of ECS instance.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The hpc cluster ID of ECS instance.
     */
    hpcClusterId?: pulumi.Input<string>;
    /**
     * The Image ID of ECS instance.
     */
    imageId: pulumi.Input<string>;
    /**
     * The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
     */
    includeDataVolumes?: pulumi.Input<boolean>;
    /**
     * The charge type of ECS instance.
     */
    instanceChargeType?: pulumi.Input<string>;
    /**
     * The name of ECS instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The instance type of ECS instance.
     */
    instanceType: pulumi.Input<string>;
    /**
     * The ssh key name of ECS instance.
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * The password of ECS instance.
     */
    password?: pulumi.Input<string>;
    /**
     * The period of ECS instance.Only effective when instanceChargeType is PrePaid. Default is 12. Unit is Month.
     */
    period?: pulumi.Input<number>;
    /**
     * The secondary networkInterface detail collection of ECS instance.
     */
    secondaryNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSecondaryNetworkInterface>[]>;
    /**
     * The security enhancement strategy of ECS instance.Default is true.
     */
    securityEnhancementStrategy?: pulumi.Input<string>;
    /**
     * The security group ID set of primary networkInterface.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subnet ID of primary networkInterface.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The size of system volume.
     */
    systemVolumeSize: pulumi.Input<number>;
    /**
     * The type of system volume.
     */
    systemVolumeType: pulumi.Input<string>;
    /**
     * The user data of ECS instance.
     */
    userData?: pulumi.Input<string>;
    /**
     * The available zone ID of ECS instance.
     */
    zoneId: pulumi.Input<string>;
}
