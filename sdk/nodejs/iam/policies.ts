// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of iam policies
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const defaultPolicies = pulumi.output(volcengine.Iam.Policies({
 *     query: "AdministratorAccess",
 * }));
 * ```
 */
export function policies(args?: PoliciesArgs, opts?: pulumi.InvokeOptions): Promise<PoliciesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("volcengine:Iam/policies:Policies", {
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "query": args.query,
        "scope": args.scope,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking Policies.
 */
export interface PoliciesArgs {
    /**
     * A Name Regex of Policy.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * Query policies, support policy name or description.
     */
    query?: string;
    /**
     * The scope of the Policy.
     */
    scope?: string;
    /**
     * The status of policy.
     */
    status?: string;
}

/**
 * A collection of values returned by Policies.
 */
export interface PoliciesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The collection of Policy query.
     */
    readonly policies: outputs.Iam.PoliciesPolicy[];
    readonly query?: string;
    readonly scope?: string;
    readonly status?: string;
    /**
     * The total count of Policy query.
     */
    readonly totalCount: number;
}

export function policiesOutput(args?: PoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<PoliciesResult> {
    return pulumi.output(args).apply(a => policies(a, opts))
}

/**
 * A collection of arguments for invoking Policies.
 */
export interface PoliciesOutputArgs {
    /**
     * A Name Regex of Policy.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Query policies, support policy name or description.
     */
    query?: pulumi.Input<string>;
    /**
     * The scope of the Policy.
     */
    scope?: pulumi.Input<string>;
    /**
     * The status of policy.
     */
    status?: pulumi.Input<string>;
}
