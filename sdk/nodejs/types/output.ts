// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export namespace Clb {
    export interface ClbRulesRule {
        /**
         * The Description of Rule.
         */
        description: string;
        /**
         * The Domain of Rule.
         */
        domain: string;
        /**
         * The Id of Rule.
         */
        id: string;
        /**
         * The Id of Rule.
         */
        ruleId: string;
        /**
         * The Id of Server Group.
         */
        serverGroupId: string;
        /**
         * The Url of Rule.
         */
        url: string;
    }

    export interface ClbsClb {
        /**
         * The business status of the Clb.
         */
        businessStatus: string;
        /**
         * The create time of the Clb.
         */
        createTime: string;
        /**
         * The expected recycle time of the Clb.
         */
        deletedTime: string;
        /**
         * The description of the Clb.
         */
        description: string;
        /**
         * The Eip address of the Clb.
         */
        eipAddress: string;
        /**
         * The Eip ID of the Clb.
         */
        eipId: string;
        /**
         * The private ip address of the Clb.
         */
        eniAddress: string;
        /**
         * The Eni ID of the Clb.
         */
        eniId: string;
        /**
         * The ID of the Clb.
         */
        id: string;
        /**
         * The billing type of the Clb.
         */
        loadBalancerBillingType: string;
        /**
         * The ID of the Clb.
         */
        loadBalancerId: string;
        /**
         * The name of the Clb.
         */
        loadBalancerName: string;
        /**
         * The specifications of the Clb.
         */
        loadBalancerSpec: string;
        /**
         * The reason why Clb is locked.
         */
        lockReason: string;
        /**
         * The modification protection reason of the Clb.
         */
        modificationProtectionReason: string;
        /**
         * The modification protection status of the Clb.
         */
        modificationProtectionStatus: string;
        /**
         * The overdue time of the Clb.
         */
        overdueTime: string;
        /**
         * The status of the Clb.
         */
        status: string;
        /**
         * The subnet ID of the Clb.
         */
        subnetId: string;
        /**
         * The type of the Clb.
         */
        type: string;
        /**
         * The update time of the Clb.
         */
        updateTime: string;
        /**
         * The id of the VPC.
         */
        vpcId: string;
    }

    export interface ListenerHealthCheck {
        /**
         * The domain of health check.
         */
        domain?: string;
        /**
         * The enable status of health check function. Optional choice contains `on`, `off`.
         */
        enabled?: string;
        /**
         * The healthy threshold of health check.
         */
        healthyThreshold?: number;
        /**
         * The normal http status code of health check.
         */
        httpCode?: string;
        /**
         * The interval executing health check.
         */
        interval?: number;
        /**
         * The method of health check.
         */
        method?: string;
        /**
         * The response timeout of health check.
         */
        timeout?: number;
        /**
         * The unhealthy threshold of health check.
         */
        unHealthyThreshold?: number;
        /**
         * The uri of health check.
         */
        uri?: string;
    }

    export interface ListenersListener {
        /**
         * The acl ID list to which the Listener is bound.
         */
        aclIds: string[];
        /**
         * The acl status of the Listener.
         */
        aclStatus: string;
        /**
         * The acl type of the Listener.
         */
        aclType: string;
        /**
         * The ID of the certificate which is associated with the Listener.
         */
        certificateId: string;
        /**
         * The create time of the Listener.
         */
        createTime: string;
        /**
         * The enable status of the Listener.
         */
        enabled: string;
        /**
         * The domain of health check.
         */
        healthCheckDomain: string;
        /**
         * The enable status of health check function.
         */
        healthCheckEnabled: string;
        /**
         * The healthy threshold of health check.
         */
        healthCheckHealthyThreshold: number;
        /**
         * The normal http status code of health check.
         */
        healthCheckHttpCode: string;
        /**
         * The interval executing health check.
         */
        healthCheckInterval: number;
        /**
         * The method of health check.
         */
        healthCheckMethod: string;
        /**
         * The response timeout of health check.
         */
        healthCheckTimeout: number;
        /**
         * The unhealthy threshold of health check.
         */
        healthCheckUnHealthyThreshold: number;
        /**
         * The uri of health check.
         */
        healthCheckUri: string;
        /**
         * The ID of the Listener.
         */
        id: string;
        /**
         * The ID of the Listener.
         */
        listenerId: string;
        /**
         * The name of the Listener.
         */
        listenerName: string;
        /**
         * The port receiving request of the Listener.
         */
        port: number;
        /**
         * The protocol of the Listener.
         */
        protocol: string;
        /**
         * The ID of the backend server group which is associated with the Listener.
         */
        serverGroupId: string;
        /**
         * The status of the Listener.
         */
        status: string;
        /**
         * The update time of the Listener.
         */
        updateTime: string;
    }

    export interface ServerGroupServersServer {
        /**
         * The description of the instance.
         */
        description: string;
        /**
         * The server id of instance in ServerGroup.
         */
        id: string;
        /**
         * The ID of ecs instance or the network card bound to ecs instance.
         */
        instanceId: string;
        /**
         * The private ip of the instance.
         */
        ip: string;
        /**
         * The port receiving request.
         */
        port: number;
        /**
         * The server id of instance in ServerGroup.
         */
        serverId: string;
        /**
         * The type of instance. Optional choice contains `ecs`, `eni`.
         */
        type: string;
        /**
         * The weight of the instance.
         */
        weight: number;
    }

    export interface ServerGroupsGroup {
        /**
         * The create time of the ServerGroup.
         */
        createTime: string;
        /**
         * The description of the ServerGroup.
         */
        description: string;
        /**
         * The ID of the ServerGroup.
         */
        id: string;
        /**
         * The ID of the ServerGroup.
         */
        serverGroupId: string;
        /**
         * The name of the ServerGroup.
         */
        serverGroupName: string;
        /**
         * The update time of the ServerGroup.
         */
        updateTime: string;
    }

}

export namespace Ebs {
    export interface VolumesVolume {
        billingType: number;
        createdAt: string;
        deleteWithInstance: boolean;
        description: string;
        deviceName: string;
        expiredTime: string;
        id: string;
        imageId: string;
        /**
         * The Id of instance.
         */
        instanceId: string;
        /**
         * The Kind of Volume.
         */
        kind: string;
        payType: string;
        renewType: number;
        size: number;
        status: string;
        tradeStatus: number;
        updatedAt: string;
        volumeId: string;
        /**
         * The name of Volume.
         */
        volumeName: string;
        /**
         * The type of Volume.
         */
        volumeType: string;
        /**
         * The Id of Zone.
         */
        zoneId: string;
    }

}

export namespace Ecs {
    export interface ImagesImage {
        /**
         * The architecture of Image.
         */
        architecture: string;
        /**
         * The create time of Image.
         */
        createdAt: string;
        /**
         * The description of Image.
         */
        description: string;
        /**
         * The ID of Image.
         */
        imageId: string;
        /**
         * The name of Image.
         */
        imageName: string;
        /**
         * Whether the Image support cloud-init.
         */
        isSupportCloudInit: boolean;
        /**
         * The name of Image operating system.
         */
        osName: string;
        /**
         * The operating system type of Image.
         */
        osType: string;
        /**
         * The platform of Image.
         */
        platform: string;
        /**
         * The platform version of Image.
         */
        platformVersion: string;
        /**
         * The share mode of Image.
         */
        shareStatus: string;
        /**
         * The size(GiB) of Image.
         */
        size: number;
        /**
         * A list of Image status.
         */
        status: string;
        /**
         * The update time of Image.
         */
        updatedAt: string;
        /**
         * The visibility of Image.
         */
        visibility: string;
    }

    export interface InstanceDataVolume {
        /**
         * The delete with instance flag of volume.
         */
        deleteWithInstance?: boolean;
        /**
         * The size of volume.
         */
        size: number;
        /**
         * The type of volume.
         */
        volumeType: string;
    }

    export interface InstanceSecondaryNetworkInterface {
        /**
         * The security group ID set of secondary networkInterface.
         */
        securityGroupIds: string[];
        /**
         * The subnet ID of secondary networkInterface.
         */
        subnetId: string;
    }

    export interface InstancesInstance {
        /**
         * The number of ECS instance CPU cores.
         */
        cpus: number;
        /**
         * The create time of ECS instance.
         */
        createdAt: string;
        /**
         * The description of ECS instance.
         */
        description: string;
        /**
         * The host name of ECS instance.
         */
        hostName: string;
        /**
         * The image ID of ECS instance.
         */
        imageId: string;
        /**
         * The charge type of ECS instance.
         */
        instanceChargeType: string;
        /**
         * The ID of ECS instance.
         */
        instanceId: string;
        /**
         * The name of ECS instance.
         */
        instanceName: string;
        /**
         * The spec type of ECS instance.
         */
        instanceType: string;
        /**
         * The ssh key ID of ECS instance.
         */
        keyPairId: string;
        /**
         * The key pair name of ECS instance.
         */
        keyPairName: string;
        /**
         * The memory size of ECS instance.
         */
        memorySize: number;
        /**
         * The networkInterface detail collection of ECS instance.
         */
        networkInterfaces: outputs.Ecs.InstancesInstanceNetworkInterface[];
        /**
         * The os name of ECS instance.
         */
        osName: string;
        /**
         * The os type of ECS instance.
         */
        osType: string;
        /**
         * The status of ECS instance.
         */
        status: string;
        /**
         * The stop mode of ECS instance.
         */
        stoppedMode: string;
        /**
         * The update time of ECS instance.
         */
        updatedAt: string;
        /**
         * The volume detail collection of volume.
         */
        volumes: outputs.Ecs.InstancesInstanceVolume[];
        /**
         * The VPC ID of ECS instance.
         */
        vpcId: string;
        /**
         * The available zone ID of ECS instance.
         */
        zoneId: string;
    }

    export interface InstancesInstanceNetworkInterface {
        /**
         * The mac address of networkInterface.
         */
        macAddress: string;
        /**
         * The ID of networkInterface.
         */
        networkInterfaceId: string;
        /**
         * The primary ip address of ECS instance.
         */
        primaryIpAddress: string;
        /**
         * The subnet ID of networkInterface.
         */
        subnetId: string;
        /**
         * The type of networkInterface.
         */
        type: string;
        /**
         * The VPC ID of ECS instance.
         */
        vpcId: string;
    }

    export interface InstancesInstanceVolume {
        /**
         * The delete with instance flag of volume.
         */
        deleteWithInstance: boolean;
        /**
         * The size of volume.
         */
        size: number;
        /**
         * The ID of volume.
         */
        volumeId: string;
        /**
         * The Name of volume.
         */
        volumeName: string;
        /**
         * The type of volume.
         */
        volumeType: string;
    }

}

export namespace Eip {
    export interface AddressesAddress {
        /**
         * The id of the EIP address.
         */
        allocationId: string;
        /**
         * The allocation time of the EIP.
         */
        allocationTime: string;
        /**
         * The peek bandwidth of the EIP.
         */
        bandwidth: number;
        /**
         * The billing type of the EIP.
         */
        billingType: string;
        /**
         * The business status of the EIP.
         */
        businessStatus: string;
        /**
         * The deleted time of the EIP.
         */
        deletedTime: string;
        /**
         * The description of the EIP.
         */
        description: string;
        /**
         * The EIP ip address of the EIP.
         */
        eipAddress: string;
        /**
         * The expired time of the EIP.
         */
        expiredTime: string;
        /**
         * The id of the EIP address.
         */
        id: string;
        /**
         * The instance id which be associated to the EIP.
         */
        instanceId: string;
        /**
         * The type of the associated instance.
         */
        instanceType: string;
        /**
         * An ISP of EIP Address.
         */
        isp: string;
        /**
         * The lock reason of the EIP.
         */
        lockReason: string;
        /**
         * A name of EIP.
         */
        name: string;
        /**
         * The overdue time of the EIP.
         */
        overdueTime: string;
        /**
         * A status of EIP.
         */
        status: string;
        /**
         * The last update time of the EIP.
         */
        updatedAt: string;
    }

}

export namespace Iam {
    export interface PoliciesPolicy {
        /**
         * The create time of the Policy.
         */
        createDate: string;
        /**
         * The description of the Policy.
         */
        description: string;
        /**
         * The ID of the Policy.
         */
        id: string;
        /**
         * The document of the Policy.
         */
        policyDocument: string;
        /**
         * The name of the Policy.
         */
        policyName: string;
        /**
         * The resource name of the Policy.
         */
        policyTrn: string;
        /**
         * The type of the Policy.
         */
        policyType: string;
        /**
         * The update time of the Policy.
         */
        updateDate: string;
    }

    export interface RolesRole {
        /**
         * The create time of the Role.
         */
        createDate: string;
        /**
         * The description of the Role.
         */
        description: string;
        /**
         * The ID of the Role.
         */
        id: string;
        /**
         * The name of the Role, comma separated.
         */
        roleName: string;
        /**
         * The resource name of the Role.
         */
        trn: string;
        /**
         * The trust policy document of the Role.
         */
        trustPolicyDocument: string;
    }

    export interface UsersUser {
        /**
         * The account id of the user.
         */
        accountId: string;
        /**
         * The create date of the user.
         */
        createDate: string;
        /**
         * The trn of the user.
         */
        trn: string;
        /**
         * The update date of the user.
         */
        updateDate: string;
        /**
         * The name of the user.
         */
        userName: string;
    }

}

export namespace Vke {
    export interface ClusterClusterConfig {
        /**
         * Cluster API Server public network access configuration.
         */
        apiServerPublicAccessConfig?: outputs.Vke.ClusterClusterConfigApiServerPublicAccessConfig;
        /**
         * Cluster API Server public network access configuration, the value is `true` or `false`.
         */
        apiServerPublicAccessEnabled?: boolean;
        /**
         * Node public network access configuration, the value is `true` or `false`.
         */
        resourcePublicAccessDefaultEnabled?: boolean;
        /**
         * The subnet ID for the cluster control plane to communicate within the private network.
         */
        subnetIds: string[];
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfig {
        /**
         * Public network access network configuration.
         */
        publicAccessNetworkConfig?: outputs.Vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig {
        /**
         * The peak bandwidth of the public IP, unit: Mbps.
         */
        bandwidth?: number;
        /**
         * Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
         */
        billingType?: string;
    }

    export interface ClusterPodsConfig {
        /**
         * Flannel network configuration.
         */
        flannelConfig?: outputs.Vke.ClusterPodsConfigFlannelConfig;
        /**
         * The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
         */
        podNetworkMode: string;
        /**
         * VPC-CNI network configuration.
         */
        vpcCniConfig?: outputs.Vke.ClusterPodsConfigVpcCniConfig;
    }

    export interface ClusterPodsConfigFlannelConfig {
        /**
         * The maximum number of single-node Pod instances for a Flannel container network.
         */
        maxPodsPerNode?: number;
        /**
         * Pod CIDR for the Flannel container network.
         */
        podCidrs?: string[];
    }

    export interface ClusterPodsConfigVpcCniConfig {
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds?: string[];
        /**
         * The private network where the cluster control plane network resides.
         */
        vpcId?: string;
    }

    export interface ClusterServicesConfig {
        /**
         * The IPv4 private network address exposed by the service.
         */
        serviceCidrsv4s: string[];
    }

    export interface ClustersCluster {
        /**
         * The config of the cluster.
         */
        clusterConfig: outputs.Vke.ClustersClusterClusterConfig;
        /**
         * ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
         */
        createClientToken?: string;
        /**
         * Cluster creation time. UTC+0 time in standard RFC3339 format.
         */
        createTime: string;
        /**
         * The delete protection of the cluster, the value is `true` or `false`.
         */
        deleteProtectionEnabled: boolean;
        /**
         * The description of the cluster.
         */
        description: string;
        /**
         * Eip allocation Id.
         */
        eipAllocationId: string;
        /**
         * The ID of the Cluster.
         */
        id: string;
        /**
         * Kubeconfig data with private network access, returned in BASE64 encoding.
         */
        kubeconfigPrivate: string;
        /**
         * Kubeconfig data with public network access, returned in BASE64 encoding.
         */
        kubeconfigPublic: string;
        /**
         * The Kubernetes version information corresponding to the cluster, specific to the patch version.
         */
        kubernetesVersion: string;
        /**
         * The name of the cluster.
         */
        name: string;
        /**
         * Statistics on the number of nodes corresponding to each master state in the cluster.
         */
        nodeStatistics: outputs.Vke.ClustersClusterNodeStatistics;
        /**
         * The config of the pods.
         */
        podsConfig: outputs.Vke.ClustersClusterPodsConfig;
        /**
         * The config of the services.
         */
        servicesConfig: outputs.Vke.ClustersClusterServicesConfig;
        /**
         * The status of the cluster.
         */
        status: outputs.Vke.ClustersClusterStatus;
        /**
         * The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
         */
        updateClientToken?: string;
        /**
         * The last time a request was accepted by the cluster and executed or completed. UTC+0 time in standard RFC3339 format.
         */
        updateTime: string;
    }

    export interface ClustersClusterClusterConfig {
        /**
         * Endpoint information accessed by the cluster API Server.
         */
        apiServerEndpoints: outputs.Vke.ClustersClusterClusterConfigApiServerEndpoints;
        /**
         * Cluster API Server public network access configuration.
         */
        apiServerPublicAccessConfig: outputs.Vke.ClustersClusterClusterConfigApiServerPublicAccessConfig;
        /**
         * Cluster API Server public network access configuration, the value is `true` or `false`.
         */
        apiServerPublicAccessEnabled: boolean;
        /**
         * Node public network access configuration, the value is `true` or `false`.
         */
        resourcePublicAccessDefaultEnabled: boolean;
        /**
         * The security group used by the cluster control plane and nodes.
         */
        securityGroupIds: string[];
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds: string[];
        /**
         * The private network where the cluster control plane network resides.
         */
        vpcId: string;
    }

    export interface ClustersClusterClusterConfigApiServerEndpoints {
        /**
         * Endpoint address of the cluster API Server private network.
         */
        privateIp: outputs.Vke.ClustersClusterClusterConfigApiServerEndpointsPrivateIp;
        /**
         * Endpoint address of the cluster API Server public network.
         */
        publicIp: outputs.Vke.ClustersClusterClusterConfigApiServerEndpointsPublicIp;
    }

    export interface ClustersClusterClusterConfigApiServerEndpointsPrivateIp {
        /**
         * Ipv4 address.
         */
        ipv4: string;
    }

    export interface ClustersClusterClusterConfigApiServerEndpointsPublicIp {
        /**
         * Ipv4 address.
         */
        ipv4: string;
    }

    export interface ClustersClusterClusterConfigApiServerPublicAccessConfig {
        /**
         * IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
         */
        accessSourceIpsv4s: string[];
        /**
         * Public network access network configuration.
         */
        publicAccessNetworkConfig: outputs.Vke.ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig;
    }

    export interface ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig {
        /**
         * The peak bandwidth of the public IP, unit: Mbps.
         */
        bandwidth: number;
        /**
         * Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
         */
        billingType: string;
        /**
         * The ISP of public IP.
         */
        isp: string;
    }

    export interface ClustersClusterNodeStatistics {
        /**
         * Phase=Creating total number of nodes.
         */
        creatingCount: number;
        /**
         * Phase=Deleting total number of nodes.
         */
        deletingCount: number;
        /**
         * Phase=Failed total number of nodes.
         */
        failedCount: number;
        /**
         * Phase=Running total number of nodes.
         */
        runningCount: number;
        /**
         * Phase=Stopped total number of nodes.
         */
        stoppedCount: number;
        /**
         * The total count of Cluster query.
         */
        totalCount: number;
        /**
         * Phase=Updating total number of nodes.
         */
        updatingCount: number;
    }

    export interface ClustersClusterPodsConfig {
        /**
         * Flannel network configuration.
         */
        flannelConfig: outputs.Vke.ClustersClusterPodsConfigFlannelConfig;
        /**
         * Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
         */
        podNetworkMode: string;
        /**
         * VPC-CNI network configuration.
         */
        vpcCniConfig: outputs.Vke.ClustersClusterPodsConfigVpcCniConfig;
    }

    export interface ClustersClusterPodsConfigFlannelConfig {
        /**
         * The maximum number of single-node Pod instances for a Flannel container network.
         */
        maxPodsPerNode: number;
        /**
         * Pod CIDR for the Flannel container network.
         */
        podCidrs: string[];
    }

    export interface ClustersClusterPodsConfigVpcCniConfig {
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds: string[];
        /**
         * The private network where the cluster control plane network resides.
         */
        vpcId: string;
    }

    export interface ClustersClusterServicesConfig {
        /**
         * The IPv4 private network address exposed by the service.
         */
        serviceCidrsv4s: string[];
    }

    export interface ClustersClusterStatus {
        /**
         * The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
         */
        conditions: outputs.Vke.ClustersClusterStatusCondition[];
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase: string;
    }

    export interface ClustersClusterStatusCondition {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
         */
        type: string;
    }

    export interface ClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface NodePoolAutoScaling {
        /**
         * The DesiredReplicas of AutoScaling.
         */
        desiredReplicas: number;
        /**
         * Is Enabled of AutoScaling.
         */
        enabled: boolean;
        /**
         * The MaxReplicas of AutoScaling.
         */
        maxReplicas: number;
        /**
         * The MinReplicas of AutoScaling.
         */
        minReplicas: number;
        /**
         * The Priority of AutoScaling.
         */
        priority: number;
    }

    export interface NodePoolKubernetesConfig {
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon?: boolean;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: outputs.Vke.NodePoolKubernetesConfigLabel[];
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: outputs.Vke.NodePoolKubernetesConfigTaint[];
    }

    export interface NodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: string;
        /**
         * The Value of Labels.
         */
        value?: string;
    }

    export interface NodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints.
         */
        effect?: string;
        /**
         * The Key of Taints.
         */
        key?: string;
        /**
         * The Value of Taints.
         */
        value?: string;
    }

    export interface NodePoolNodeConfig {
        /**
         * The AdditionalContainerStorageEnabled of NodeConfig.
         */
        additionalContainerStorageEnabled?: boolean;
        /**
         * The DataVolumes of NodeConfig.
         */
        dataVolumes?: outputs.Vke.NodePoolNodeConfigDataVolume[];
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: string;
        /**
         * The InstanceTypeIds of NodeConfig.
         */
        instanceTypeIds?: string[];
        /**
         * The Security of NodeConfig.
         */
        security?: outputs.Vke.NodePoolNodeConfigSecurity;
        /**
         * The SubnetIds of NodeConfig.
         */
        subnetIds?: string[];
        /**
         * The SystemVolume of NodeConfig.
         */
        systemVolume?: outputs.Vke.NodePoolNodeConfigSystemVolume;
    }

    export interface NodePoolNodeConfigDataVolume {
        /**
         * The Size of DataVolumes.
         */
        size?: number;
        /**
         * The Type of DataVolumes.
         */
        type?: string;
    }

    export interface NodePoolNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        login?: outputs.Vke.NodePoolNodeConfigSecurityLogin;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds: string[];
        /**
         * The SecurityStrategies of Security.
         */
        securityStrategies?: string[];
    }

    export interface NodePoolNodeConfigSecurityLogin {
        /**
         * The Password of Security.
         */
        password?: string;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: string;
    }

    export interface NodePoolNodeConfigSystemVolume {
        /**
         * The Size of SystemVolume.
         */
        size?: number;
        /**
         * The Type of SystemVolume.
         */
        type?: string;
    }

    export interface NodePoolStatus {
        /**
         * Indicates the status condition of the node pool in the active state.
         */
        conditionsType?: string;
        /**
         * The Phase of Status.
         */
        phase?: string;
    }

    export interface NodePoolsNodePool {
        /**
         * Is AdditionalContainerStorageEnabled of NodeConfig.
         */
        additionalContainerStorageEnabled: boolean;
        /**
         * The ClusterId of NodePool.
         */
        clusterId: string;
        /**
         * The Condition of Status.
         */
        conditionTypes: string[];
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon: boolean;
        /**
         * The ClientToken when successfully created.
         */
        createClientToken: string;
        /**
         * The CreateTime of NodePool.
         */
        createTime: string;
        /**
         * The DataVolume of NodeConfig.
         */
        dataVolumes: outputs.Vke.NodePoolsNodePoolDataVolume[];
        /**
         * The Description of NodePool.
         */
        description: string;
        /**
         * The DesiredReplicas of AutoScaling.
         */
        desiredReplicas: number;
        /**
         * Is Enabled of AutoScaling.
         */
        enabled: boolean;
        /**
         * The Id of NodePool.
         */
        id: string;
        /**
         * The InitializeScript of NodeConfig.
         */
        initializeScript: string;
        /**
         * The InstanceTypeIds of NodeConfig.
         */
        instanceTypeIds: string[];
        /**
         * The LabelContent of KubernetesConfig.
         */
        labelContents: outputs.Vke.NodePoolsNodePoolLabelContent[];
        /**
         * The MaxReplicas of AutoScaling.
         */
        maxReplicas: number;
        /**
         * The MinReplicas of AutoScaling.
         */
        minReplicas: number;
        /**
         * The Name of NodePool.
         */
        name: string;
        /**
         * The NodeStatistics of NodeConfig.
         */
        nodeStatistics: outputs.Vke.NodePoolsNodePoolNodeStatistics;
        /**
         * The Phase of Status.
         */
        phase: string;
        /**
         * The Priority of AutoScaling.
         */
        priority: number;
        /**
         * The SubnetId of NodeConfig.
         */
        subnetIds: string[];
        /**
         * The SystemVolume of NodeConfig.
         */
        systemVolume: outputs.Vke.NodePoolsNodePoolSystemVolume;
        /**
         * The TaintContent of NodeConfig.
         */
        taintContents: outputs.Vke.NodePoolsNodePoolTaintContent[];
        /**
         * The ClientToken when last update was successful.
         */
        updateClientToken: string;
        /**
         * The UpdateTime time of NodePool.
         */
        updateTime: string;
    }

    export interface NodePoolsNodePoolDataVolume {
        /**
         * The Size of SystemVolume.
         */
        size: string;
        /**
         * The Type of SystemVolume.
         */
        type: string;
    }

    export interface NodePoolsNodePoolLabelContent {
        /**
         * The Key of Taint.
         */
        key: string;
        /**
         * The Value of Taint.
         */
        value: string;
    }

    export interface NodePoolsNodePoolNodeStatistics {
        /**
         * The CreatingCount of Node.
         */
        creatingCount: number;
        /**
         * The DeletingCount of Node.
         */
        deletingCount: number;
        /**
         * The FailedCount of Node.
         */
        failedCount: number;
        /**
         * The RunningCount of Node.
         */
        runningCount: number;
        /**
         * Returns the total amount of the data list.
         */
        totalCount: number;
        /**
         * The UpdatingCount of Node.
         */
        updatingCount: number;
    }

    export interface NodePoolsNodePoolSystemVolume {
        /**
         * The Size of SystemVolume.
         */
        size: string;
        /**
         * The Type of SystemVolume.
         */
        type: string;
    }

    export interface NodePoolsNodePoolTaintContent {
        /**
         * The Effect of Taint.
         */
        effect: string;
        /**
         * The Key of Taint.
         */
        key: string;
        /**
         * The Value of Taint.
         */
        value: string;
    }

    export interface NodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state.
         */
        conditionsType?: string;
        /**
         * The Phase of Status.
         */
        phase?: string;
    }

    export interface NodesNode {
        /**
         * Is Additional Container storage enables.
         */
        additionalContainerStorageEnabled: boolean;
        /**
         * The cluster id of node.
         */
        clusterId: string;
        /**
         * The Condition of Node.
         */
        conditionTypes: string[];
        /**
         * The Storage Path.
         */
        containerStoragePath: string;
        /**
         * The Create Client Token.
         */
        createClientToken: string;
        /**
         * The create time of Node.
         */
        createTime: string;
        /**
         * The ID of Node.
         */
        id: string;
        /**
         * The instance id of node.
         */
        instanceId: string;
        /**
         * Is virtual node.
         */
        isVirtual: boolean;
        /**
         * The Name of Node.
         */
        name: string;
        /**
         * The node pool id.
         */
        nodePoolId: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
         */
        phase: string;
        /**
         * The roles of node.
         */
        roles: string[];
        /**
         * The update time of Node.
         */
        updateTime: string;
    }

    export interface NodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
         */
        phase?: string;
    }

}

export namespace Vpc {
    export interface AclAclEntry {
        /**
         * The description of the AclEntry.
         */
        description?: string;
        /**
         * The content of the AclEntry.
         */
        entry: string;
    }

    export interface AclsAcl {
        /**
         * The count of acl entry.
         */
        aclEntryCount: number;
        /**
         * The ID of Acl.
         */
        aclId: string;
        /**
         * The name of acl.
         */
        aclName: string;
        /**
         * Creation time of Acl.
         */
        createTime: string;
        /**
         * The description of Acl.
         */
        description: string;
        /**
         * The ID of Acl.
         */
        id: string;
        /**
         * The listeners of Acl.
         */
        listeners: string[];
        /**
         * Update time of Acl.
         */
        updateTime: string;
    }

    export interface CertificatesCertificate {
        /**
         * The ID of the Certificate.
         */
        certificateId: string;
        /**
         * The name of the Certificate.
         */
        certificateName: string;
        /**
         * The create time of the Certificate.
         */
        createTime: string;
        /**
         * The description of the Certificate.
         */
        description: string;
        /**
         * The domain name of the Certificate.
         */
        domainName: string;
        /**
         * The expire time of the Certificate.
         */
        expiredAt: string;
        /**
         * The ID of the Certificate.
         */
        id: string;
        /**
         * The ID list of the Listener.
         */
        listeners: string[];
    }

    export interface GatewaysNatGateway {
        /**
         * The billing type of the NatGateway.
         */
        billingType: string;
        /**
         * Whether the NatGateway is locked.
         */
        businessStatus: string;
        /**
         * The creation time of the NatGateway.
         */
        creationTime: string;
        /**
         * The deleted time of the NatGateway.
         */
        deletedTime: string;
        /**
         * The description of the NatGateway.
         */
        description: string;
        /**
         * The eip addresses of the NatGateway.
         */
        eipAddresses: outputs.Vpc.GatewaysNatGatewayEipAddress[];
        /**
         * The ID of the NatGateway.
         */
        id: string;
        /**
         * The reason why locking NatGateway.
         */
        lockReason: string;
        /**
         * The ID of the NatGateway.
         */
        natGatewayId: string;
        /**
         * The name of the NatGateway.
         */
        natGatewayName: string;
        /**
         * The ID of the network interface.
         */
        networkInterfaceId: string;
        /**
         * The overdue time of the NatGateway.
         */
        overdueTime: string;
        /**
         * The specification of the NatGateway.
         */
        spec: string;
        /**
         * The status of the NatGateway.
         */
        status: string;
        /**
         * The id of the Subnet.
         */
        subnetId: string;
        /**
         * The update time of the NatGateway.
         */
        updatedAt: string;
        /**
         * The id of the VPC.
         */
        vpcId: string;
    }

    export interface GatewaysNatGatewayEipAddress {
        /**
         * The ID of Eip.
         */
        allocationId: string;
        /**
         * The address of Eip.
         */
        eipAddress: string;
        /**
         * The using status of Eip.
         */
        usingStatus: string;
    }

    export interface NetworkInterfacesNetworkInterface {
        /**
         * The account id of the ENI creator.
         */
        accountId: string;
        /**
         * The IP address of the EIP to which the ENI associates.
         */
        associatedElasticIpAddress: string;
        /**
         * The allocation id of the EIP to which the ENI associates.
         */
        associatedElasticIpId: string;
        /**
         * The create time of the ENI.
         */
        createdAt: string;
        /**
         * The description of the ENI.
         */
        description: string;
        /**
         * The id of the device to which the ENI is bound.
         */
        deviceId: string;
        /**
         * The id of the ENI.
         */
        id: string;
        /**
         * The mac address of the ENI.
         */
        macAddress: string;
        /**
         * The id of the ENI.
         */
        networkInterfaceId: string;
        /**
         * A name of ENI.
         */
        networkInterfaceName: string;
        /**
         * The enable of port security.
         */
        portSecurityEnabled: boolean;
        /**
         * The primary IP address of the ENI.
         */
        primaryIpAddress: string;
        /**
         * The list of the security group id to which the secondary ENI belongs.
         */
        securityGroupIds: string[];
        /**
         * A status of ENI.
         */
        status: string;
        /**
         * An id of the subnet to which the ENI is connected.
         */
        subnetId: string;
        /**
         * A type of ENI.
         */
        type: string;
        /**
         * The last update time of the ENI.
         */
        updatedAt: string;
        /**
         * An id of the virtual private cloud (VPC) to which the ENI belongs.
         */
        vpcId: string;
        /**
         * The name of the virtual private cloud (VPC) to which the ENI belongs.
         */
        vpcName: string;
        /**
         * The zone id of the ENI.
         */
        zoneId: string;
    }

    export interface RouteEntriesRouteEntry {
        /**
         * The description of the route entry.
         */
        description: string;
        /**
         * A destination CIDR block of route entry.
         */
        destinationCidrBlock: string;
        /**
         * The id of the route entry.
         */
        id: string;
        /**
         * An id of next hop.
         */
        nextHopId: string;
        /**
         * The name of the next hop.
         */
        nextHopName: string;
        /**
         * A type of next hop.
         */
        nextHopType: string;
        /**
         * The id of the route entry.
         */
        routeEntryId: string;
        /**
         * A name of route entry.
         */
        routeEntryName: string;
        /**
         * An id of route table.
         */
        routeTableId: string;
        /**
         * The status of the route entry.
         */
        status: string;
        /**
         * The type of the route entry.
         */
        type: string;
        /**
         * The id of the virtual private cloud (VPC) to which the route entry belongs.
         */
        vpcId: string;
    }

    export interface RouteTablesRouteTable {
        /**
         * The account id of the route table creator.
         */
        accountId: string;
        /**
         * The create time of the route table.
         */
        creationTime: string;
        /**
         * The description of the route table.
         */
        description: string;
        /**
         * The id of the route table.
         */
        id: string;
        /**
         * The id of the route table.
         */
        routeTableId: string;
        /**
         * A name of route table.
         */
        routeTableName: string;
        /**
         * The type of the route table.
         */
        routeTableType: string;
        /**
         * The list of the subnet ids to which the entry table associates.
         */
        subnetIds: string[];
        /**
         * The last update time of the route table.
         */
        updateTime: string;
        /**
         * An id of VPC.
         */
        vpcId: string;
        /**
         * The name of the virtual private cloud (VPC) to which the route entry belongs.
         */
        vpcName: string;
    }

    export interface SecurityGroupsSecurityGroup {
        /**
         * The creation time of SecurityGroup.
         */
        creationTime: string;
        /**
         * The description of SecurityGroup.
         */
        description: string;
        /**
         * The ID of SecurityGroup.
         */
        id: string;
        /**
         * The ID of SecurityGroup.
         */
        securityGroupId: string;
        /**
         * The Name of SecurityGroup.
         */
        securityGroupName: string;
        /**
         * The Status of SecurityGroup.
         */
        status: string;
        /**
         * A Name Regex of SecurityGroup.
         */
        type: string;
        /**
         * The ID of Vpc.
         */
        vpcId: string;
    }

    export interface SnatEntriesSnatEntry {
        /**
         * The public ip address used by the SNAT entry.
         */
        eipAddress: string;
        /**
         * An id of the public ip address used by the SNAT entry.
         */
        eipId: string;
        /**
         * The id of the SNAT entry.
         */
        id: string;
        /**
         * An id of the nat gateway to which the entry belongs.
         */
        natGatewayId: string;
        /**
         * The id of the SNAT entry.
         */
        snatEntryId: string;
        /**
         * A name of SNAT entry.
         */
        snatEntryName: string;
        /**
         * The status of the SNAT entry.
         */
        status: string;
        /**
         * An id of the subnet that is required to access the Internet.
         */
        subnetId: string;
    }

    export interface SubnetsSubnet {
        /**
         * The count of available ip address.
         */
        availableIpAddressCount: number;
        /**
         * The cidr block of Subnet.
         */
        cidrBlock: string;
        /**
         * Creation time of Subnet.
         */
        creationTime: string;
        /**
         * The description of Subnet.
         */
        description: string;
        /**
         * The ID of Subnet.
         */
        id: string;
        /**
         * The ID of route table.
         */
        routeTableId: string;
        /**
         * The type of route table.
         */
        routeTableType: string;
        /**
         * The Status of Subnet.
         */
        status: string;
        /**
         * The Name of Subnet.
         */
        subnetName: string;
        /**
         * The Count of ipv4.
         */
        totalIpv4Count: number;
        /**
         * Update time of Subnet.
         */
        updateTime: string;
        /**
         * The Vpc ID of Subnet.
         */
        vpcId: string;
        /**
         * The ID of Zone.
         */
        zoneId: string;
    }

    export interface VpcAssociateCen {
        /**
         * The ID of CEN.
         */
        cenId: string;
        /**
         * The owner ID of CEN.
         */
        cenOwnerId: string;
        /**
         * The status of CEN.
         */
        cenStatus: string;
    }

    export interface VpcsVpc {
        /**
         * The account ID of VPC.
         */
        accountId: string;
        /**
         * The associate cen list of VPC.
         */
        associateCens: outputs.Vpc.VpcsVpcAssociateCen[];
        /**
         * The auxiliary cidr block list of VPC.
         */
        auxiliaryCidrBlocks: string[];
        /**
         * The cidr block of VPC.
         */
        cidrBlock: string;
        /**
         * The create time of VPC.
         */
        creationTime: string;
        /**
         * The description of VPC.
         */
        description: string;
        /**
         * The dns server list of VPC.
         */
        dnsServers: string[];
        /**
         * The nat gateway ID list of VPC.
         */
        natGatewayIds: string[];
        /**
         * The route table ID list of VPC.
         */
        routeTableIds: string[];
        /**
         * The security group ID list of VPC.
         */
        securityGroupIds: string[];
        /**
         * The status of VPC.
         */
        status: string;
        /**
         * The subnet ID list of VPC.
         */
        subnetIds: string[];
        /**
         * The update time of VPC.
         */
        updateTime: string;
        /**
         * The ID of VPC.
         */
        vpcId: string;
        /**
         * The name of VPC.
         */
        vpcName: string;
    }

    export interface VpcsVpcAssociateCen {
        /**
         * The ID of CEN.
         */
        cenId: string;
        /**
         * The owner ID of CEN.
         */
        cenOwnerId: string;
        /**
         * The status of CEN.
         */
        cenStatus: string;
    }

    export interface ZonesZone {
        /**
         * The id of the zone.
         */
        id: string;
        /**
         * The id of the zone.
         */
        zoneId: string;
    }

}
