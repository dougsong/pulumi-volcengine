// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export namespace Clb {
    export interface ListenerHealthCheck {
        /**
         * The domain of health check.
         */
        domain?: pulumi.Input<string>;
        /**
         * The enable status of health check function. Optional choice contains `on`, `off`.
         */
        enabled?: pulumi.Input<string>;
        /**
         * The healthy threshold of health check.
         */
        healthyThreshold?: pulumi.Input<number>;
        /**
         * The normal http status code of health check.
         */
        httpCode?: pulumi.Input<string>;
        /**
         * The interval executing health check.
         */
        interval?: pulumi.Input<number>;
        /**
         * The method of health check.
         */
        method?: pulumi.Input<string>;
        /**
         * The response timeout of health check.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The unhealthy threshold of health check.
         */
        unHealthyThreshold?: pulumi.Input<number>;
        /**
         * The uri of health check.
         */
        uri?: pulumi.Input<string>;
    }

}

export namespace Ebs {
}

export namespace Ecs {
    export interface InstanceDataVolume {
        /**
         * The delete with instance flag of volume.
         */
        deleteWithInstance?: pulumi.Input<boolean>;
        /**
         * The size of volume.
         */
        size: pulumi.Input<number>;
        /**
         * The type of volume.
         */
        volumeType: pulumi.Input<string>;
    }

    export interface InstanceSecondaryNetworkInterface {
        /**
         * The security group ID set of secondary networkInterface.
         */
        securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The subnet ID of secondary networkInterface.
         */
        subnetId: pulumi.Input<string>;
    }

}

export namespace Eip {
}

export namespace Iam {
}

export namespace Vke {
    export interface ClusterClusterConfig {
        /**
         * Cluster API Server public network access configuration.
         */
        apiServerPublicAccessConfig?: pulumi.Input<inputs.Vke.ClusterClusterConfigApiServerPublicAccessConfig>;
        /**
         * Cluster API Server public network access configuration, the value is `true` or `false`.
         */
        apiServerPublicAccessEnabled?: pulumi.Input<boolean>;
        /**
         * Node public network access configuration, the value is `true` or `false`.
         */
        resourcePublicAccessDefaultEnabled?: pulumi.Input<boolean>;
        /**
         * The subnet ID for the cluster control plane to communicate within the private network.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfig {
        /**
         * Public network access network configuration.
         */
        publicAccessNetworkConfig?: pulumi.Input<inputs.Vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig {
        /**
         * The peak bandwidth of the public IP, unit: Mbps.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
         */
        billingType?: pulumi.Input<string>;
    }

    export interface ClusterPodsConfig {
        /**
         * Flannel network configuration.
         */
        flannelConfig?: pulumi.Input<inputs.Vke.ClusterPodsConfigFlannelConfig>;
        /**
         * The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
         */
        podNetworkMode: pulumi.Input<string>;
        /**
         * VPC-CNI network configuration.
         */
        vpcCniConfig?: pulumi.Input<inputs.Vke.ClusterPodsConfigVpcCniConfig>;
    }

    export interface ClusterPodsConfigFlannelConfig {
        /**
         * The maximum number of single-node Pod instances for a Flannel container network.
         */
        maxPodsPerNode?: pulumi.Input<number>;
        /**
         * Pod CIDR for the Flannel container network.
         */
        podCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterPodsConfigVpcCniConfig {
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The private network where the cluster control plane network resides.
         */
        vpcId?: pulumi.Input<string>;
    }

    export interface ClusterServicesConfig {
        /**
         * The IPv4 private network address exposed by the service.
         */
        serviceCidrsv4s: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClustersStatusArgs {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface ClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface NodePoolAutoScaling {
        /**
         * The DesiredReplicas of AutoScaling.
         */
        desiredReplicas?: pulumi.Input<number>;
        /**
         * Is Enabled of AutoScaling.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The MaxReplicas of AutoScaling.
         */
        maxReplicas?: pulumi.Input<number>;
        /**
         * The MinReplicas of AutoScaling.
         */
        minReplicas?: pulumi.Input<number>;
        /**
         * The Priority of AutoScaling.
         */
        priority?: pulumi.Input<number>;
    }

    export interface NodePoolKubernetesConfig {
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon?: pulumi.Input<boolean>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.Vke.NodePoolKubernetesConfigLabel>[]>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.Vke.NodePoolKubernetesConfigTaint>[]>;
    }

    export interface NodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfig {
        /**
         * The AdditionalContainerStorageEnabled of NodeConfig.
         */
        additionalContainerStorageEnabled?: pulumi.Input<boolean>;
        /**
         * The DataVolumes of NodeConfig.
         */
        dataVolumes?: pulumi.Input<pulumi.Input<inputs.Vke.NodePoolNodeConfigDataVolume>[]>;
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: pulumi.Input<string>;
        /**
         * The InstanceTypeIds of NodeConfig.
         */
        instanceTypeIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The Security of NodeConfig.
         */
        security?: pulumi.Input<inputs.Vke.NodePoolNodeConfigSecurity>;
        /**
         * The SubnetIds of NodeConfig.
         */
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SystemVolume of NodeConfig.
         */
        systemVolume?: pulumi.Input<inputs.Vke.NodePoolNodeConfigSystemVolume>;
    }

    export interface NodePoolNodeConfigDataVolume {
        /**
         * The Size of DataVolumes.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of DataVolumes.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        login?: pulumi.Input<inputs.Vke.NodePoolNodeConfigSecurityLogin>;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SecurityStrategies of Security.
         */
        securityStrategies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NodePoolNodeConfigSecurityLogin {
        /**
         * The Password of Security.
         */
        password?: pulumi.Input<string>;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSystemVolume {
        /**
         * The Size of SystemVolume.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of SystemVolume.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolStatus {
        /**
         * Indicates the status condition of the node pool in the active state.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state.
         */
        conditionsType?: string;
        /**
         * The Phase of Status.
         */
        phase?: string;
    }

    export interface NodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodesStatusArgs {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
         */
        phase?: string;
    }
}

export namespace Vpc {
    export interface AclAclEntry {
        /**
         * The description of the AclEntry.
         */
        description?: pulumi.Input<string>;
        /**
         * The content of the AclEntry.
         */
        entry: pulumi.Input<string>;
    }

    export interface VpcAssociateCen {
        /**
         * The ID of CEN.
         */
        cenId?: pulumi.Input<string>;
        /**
         * The owner ID of CEN.
         */
        cenOwnerId?: pulumi.Input<string>;
        /**
         * The status of CEN.
         */
        cenStatus?: pulumi.Input<string>;
    }

}
