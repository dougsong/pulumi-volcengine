# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ImagesImageResult',
    'InstanceDataVolume',
    'InstanceSecondaryNetworkInterface',
    'InstancesInstanceResult',
    'InstancesInstanceNetworkInterfaceResult',
    'InstancesInstanceVolumeResult',
]

@pulumi.output_type
class ImagesImageResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 created_at: str,
                 description: str,
                 image_id: str,
                 image_name: str,
                 is_support_cloud_init: bool,
                 os_name: str,
                 os_type: str,
                 platform: str,
                 platform_version: str,
                 share_status: str,
                 size: int,
                 status: str,
                 updated_at: str,
                 visibility: str):
        """
        :param str architecture: The architecture of Image.
        :param str created_at: The create time of Image.
        :param str description: The description of Image.
        :param str image_id: The ID of Image.
        :param str image_name: The name of Image.
        :param bool is_support_cloud_init: Whether the Image support cloud-init.
        :param str os_name: The name of Image operating system.
        :param str os_type: The operating system type of Image.
        :param str platform: The platform of Image.
        :param str platform_version: The platform version of Image.
        :param str share_status: The share mode of Image.
        :param int size: The size(GiB) of Image.
        :param str status: A list of Image status.
        :param str updated_at: The update time of Image.
        :param str visibility: The visibility of Image.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "is_support_cloud_init", is_support_cloud_init)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "platform_version", platform_version)
        pulumi.set(__self__, "share_status", share_status)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        The architecture of Image.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The create time of Image.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The ID of Image.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        The name of Image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> bool:
        """
        Whether the Image support cloud-init.
        """
        return pulumi.get(self, "is_support_cloud_init")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        The name of Image operating system.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The operating system type of Image.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The platform of Image.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> str:
        """
        The platform version of Image.
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> str:
        """
        The share mode of Image.
        """
        return pulumi.get(self, "share_status")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size(GiB) of Image.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A list of Image status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The update time of Image.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def visibility(self) -> str:
        """
        The visibility of Image.
        """
        return pulumi.get(self, "visibility")


@pulumi.output_type
class InstanceDataVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"
        elif key == "deleteWithInstance":
            suggest = "delete_with_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceDataVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceDataVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceDataVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: int,
                 volume_type: str,
                 delete_with_instance: Optional[bool] = None):
        """
        :param int size: The size of volume.
        :param str volume_type: The type of volume.
        :param bool delete_with_instance: The delete with instance flag of volume.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of volume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of volume.
        """
        return pulumi.get(self, "volume_type")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        """
        The delete with instance flag of volume.
        """
        return pulumi.get(self, "delete_with_instance")


@pulumi.output_type
class InstanceSecondaryNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSecondaryNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSecondaryNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSecondaryNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnet_id: str):
        """
        :param Sequence[str] security_group_ids: The security group ID set of secondary networkInterface.
        :param str subnet_id: The subnet ID of secondary networkInterface.
        """
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The security group ID set of secondary networkInterface.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet ID of secondary networkInterface.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class InstancesInstanceResult(dict):
    def __init__(__self__, *,
                 cpus: int,
                 created_at: str,
                 description: str,
                 host_name: str,
                 image_id: str,
                 instance_charge_type: str,
                 instance_id: str,
                 instance_name: str,
                 instance_type: str,
                 key_pair_id: str,
                 key_pair_name: str,
                 memory_size: int,
                 network_interfaces: Sequence['outputs.InstancesInstanceNetworkInterfaceResult'],
                 os_name: str,
                 os_type: str,
                 status: str,
                 stopped_mode: str,
                 updated_at: str,
                 volumes: Sequence['outputs.InstancesInstanceVolumeResult'],
                 vpc_id: str,
                 zone_id: str):
        """
        :param int cpus: The number of ECS instance CPU cores.
        :param str created_at: The create time of ECS instance.
        :param str description: The description of ECS instance.
        :param str host_name: The host name of ECS instance.
        :param str image_id: The image ID of ECS instance.
        :param str instance_charge_type: The charge type of ECS instance.
        :param str instance_id: The ID of ECS instance.
        :param str instance_name: The name of ECS instance.
        :param str instance_type: The spec type of ECS instance.
        :param str key_pair_id: The ssh key ID of ECS instance.
        :param str key_pair_name: The key pair name of ECS instance.
        :param int memory_size: The memory size of ECS instance.
        :param Sequence['InstancesInstanceNetworkInterfaceArgs'] network_interfaces: The networkInterface detail collection of ECS instance.
        :param str os_name: The os name of ECS instance.
        :param str os_type: The os type of ECS instance.
        :param str status: The status of ECS instance.
        :param str stopped_mode: The stop mode of ECS instance.
        :param str updated_at: The update time of ECS instance.
        :param Sequence['InstancesInstanceVolumeArgs'] volumes: The volume detail collection of volume.
        :param str vpc_id: The VPC ID of ECS instance.
        :param str zone_id: The available zone ID of ECS instance.
        """
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "key_pair_id", key_pair_id)
        pulumi.set(__self__, "key_pair_name", key_pair_name)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stopped_mode", stopped_mode)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "volumes", volumes)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def cpus(self) -> int:
        """
        The number of ECS instance CPU cores.
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The create time of ECS instance.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of ECS instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        """
        The host name of ECS instance.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        The image ID of ECS instance.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        """
        The charge type of ECS instance.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The ID of ECS instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        The name of ECS instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        """
        The spec type of ECS instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="keyPairId")
    def key_pair_id(self) -> str:
        """
        The ssh key ID of ECS instance.
        """
        return pulumi.get(self, "key_pair_id")

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> str:
        """
        The key pair name of ECS instance.
        """
        return pulumi.get(self, "key_pair_name")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> int:
        """
        The memory size of ECS instance.
        """
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.InstancesInstanceNetworkInterfaceResult']:
        """
        The networkInterface detail collection of ECS instance.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        The os name of ECS instance.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        The os type of ECS instance.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of ECS instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stoppedMode")
    def stopped_mode(self) -> str:
        """
        The stop mode of ECS instance.
        """
        return pulumi.get(self, "stopped_mode")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The update time of ECS instance.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def volumes(self) -> Sequence['outputs.InstancesInstanceVolumeResult']:
        """
        The volume detail collection of volume.
        """
        return pulumi.get(self, "volumes")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The VPC ID of ECS instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The available zone ID of ECS instance.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class InstancesInstanceNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 mac_address: str,
                 network_interface_id: str,
                 primary_ip_address: str,
                 subnet_id: str,
                 type: str,
                 vpc_id: str):
        """
        :param str mac_address: The mac address of networkInterface.
        :param str network_interface_id: The ID of networkInterface.
        :param str primary_ip_address: The primary ip address of ECS instance.
        :param str subnet_id: The subnet ID of networkInterface.
        :param str type: The type of networkInterface.
        :param str vpc_id: The VPC ID of ECS instance.
        """
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "primary_ip_address", primary_ip_address)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        The mac address of networkInterface.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The ID of networkInterface.
        """
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="primaryIpAddress")
    def primary_ip_address(self) -> str:
        """
        The primary ip address of ECS instance.
        """
        return pulumi.get(self, "primary_ip_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet ID of networkInterface.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of networkInterface.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The VPC ID of ECS instance.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class InstancesInstanceVolumeResult(dict):
    def __init__(__self__, *,
                 delete_with_instance: bool,
                 size: int,
                 volume_id: str,
                 volume_name: str,
                 volume_type: str):
        """
        :param bool delete_with_instance: The delete with instance flag of volume.
        :param int size: The size of volume.
        :param str volume_id: The ID of volume.
        :param str volume_name: The Name of volume.
        :param str volume_type: The type of volume.
        """
        pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "volume_name", volume_name)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> bool:
        """
        The delete with instance flag of volume.
        """
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of volume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        """
        The ID of volume.
        """
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> str:
        """
        The Name of volume.
        """
        return pulumi.get(self, "volume_name")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        """
        The type of volume.
        """
        return pulumi.get(self, "volume_type")


