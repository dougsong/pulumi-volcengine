# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_id: pulumi.Input[str],
                 system_volume_size: pulumi.Input[int],
                 system_volume_type: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 auto_renew_period: Optional[pulumi.Input[int]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 include_data_volumes: Optional[pulumi.Input[bool]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 secondary_network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]] = None,
                 security_enhancement_strategy: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] image_id: The Image ID of ECS instance.
        :param pulumi.Input[str] instance_type: The instance type of ECS instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID set of primary networkInterface.
        :param pulumi.Input[str] subnet_id: The subnet ID of primary networkInterface.
        :param pulumi.Input[int] system_volume_size: The size of system volume.
        :param pulumi.Input[str] system_volume_type: The type of system volume.
        :param pulumi.Input[str] zone_id: The available zone ID of ECS instance.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        :param pulumi.Input[int] auto_renew_period: The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]] data_volumes: The data volume collection of  ECS instance.
        :param pulumi.Input[str] description: The description of ECS instance.
        :param pulumi.Input[str] host_name: The host name of ECS instance.
        :param pulumi.Input[str] hpc_cluster_id: The hpc cluster ID of ECS instance.
        :param pulumi.Input[bool] include_data_volumes: The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        :param pulumi.Input[str] instance_charge_type: The charge type of ECS instance.
        :param pulumi.Input[str] instance_name: The name of ECS instance.
        :param pulumi.Input[str] key_pair_name: The ssh key name of ECS instance.
        :param pulumi.Input[str] password: The password of ECS instance.
        :param pulumi.Input[int] period: The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]] secondary_network_interfaces: The secondary networkInterface detail collection of ECS instance.
        :param pulumi.Input[str] security_enhancement_strategy: The security enhancement strategy of ECS instance.Default is true.
        :param pulumi.Input[str] user_data: The user data of ECS instance.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_volume_size", system_volume_size)
        pulumi.set(__self__, "system_volume_type", system_volume_type)
        pulumi.set(__self__, "zone_id", zone_id)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_renew_period is not None:
            pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if include_data_volumes is not None:
            pulumi.set(__self__, "include_data_volumes", include_data_volumes)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if key_pair_name is not None:
            pulumi.set(__self__, "key_pair_name", key_pair_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if secondary_network_interfaces is not None:
            pulumi.set(__self__, "secondary_network_interfaces", secondary_network_interfaces)
        if security_enhancement_strategy is not None:
            pulumi.set(__self__, "security_enhancement_strategy", security_enhancement_strategy)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        The Image ID of ECS instance.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        The instance type of ECS instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The security group ID set of primary networkInterface.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet ID of primary networkInterface.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="systemVolumeSize")
    def system_volume_size(self) -> pulumi.Input[int]:
        """
        The size of system volume.
        """
        return pulumi.get(self, "system_volume_size")

    @system_volume_size.setter
    def system_volume_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "system_volume_size", value)

    @property
    @pulumi.getter(name="systemVolumeType")
    def system_volume_type(self) -> pulumi.Input[str]:
        """
        The type of system volume.
        """
        return pulumi.get(self, "system_volume_type")

    @system_volume_type.setter
    def system_volume_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_volume_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The available zone ID of ECS instance.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> Optional[pulumi.Input[int]]:
        """
        The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        """
        return pulumi.get(self, "auto_renew_period")

    @auto_renew_period.setter
    def auto_renew_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_period", value)

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]]:
        """
        The data volume collection of  ECS instance.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of ECS instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of ECS instance.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The hpc cluster ID of ECS instance.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="includeDataVolumes")
    def include_data_volumes(self) -> Optional[pulumi.Input[bool]]:
        """
        The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        """
        return pulumi.get(self, "include_data_volumes")

    @include_data_volumes.setter
    def include_data_volumes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_data_volumes", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of ECS instance.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of ECS instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh key name of ECS instance.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of ECS instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="secondaryNetworkInterfaces")
    def secondary_network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]]:
        """
        The secondary networkInterface detail collection of ECS instance.
        """
        return pulumi.get(self, "secondary_network_interfaces")

    @secondary_network_interfaces.setter
    def secondary_network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]]):
        pulumi.set(self, "secondary_network_interfaces", value)

    @property
    @pulumi.getter(name="securityEnhancementStrategy")
    def security_enhancement_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The security enhancement strategy of ECS instance.Default is true.
        """
        return pulumi.get(self, "security_enhancement_strategy")

    @security_enhancement_strategy.setter
    def security_enhancement_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_enhancement_strategy", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The user data of ECS instance.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 auto_renew_period: Optional[pulumi.Input[int]] = None,
                 cpus: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 include_data_volumes: Optional[pulumi.Input[bool]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 key_pair_id: Optional[pulumi.Input[str]] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[int]] = None,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 secondary_network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]] = None,
                 security_enhancement_strategy: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stopped_mode: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 system_volume_id: Optional[pulumi.Input[str]] = None,
                 system_volume_size: Optional[pulumi.Input[int]] = None,
                 system_volume_type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        :param pulumi.Input[int] auto_renew_period: The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        :param pulumi.Input[int] cpus: The number of ECS instance CPU cores.
        :param pulumi.Input[str] created_at: The create time of ECS instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]] data_volumes: The data volume collection of  ECS instance.
        :param pulumi.Input[str] description: The description of ECS instance.
        :param pulumi.Input[str] host_name: The host name of ECS instance.
        :param pulumi.Input[str] hpc_cluster_id: The hpc cluster ID of ECS instance.
        :param pulumi.Input[str] image_id: The Image ID of ECS instance.
        :param pulumi.Input[bool] include_data_volumes: The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        :param pulumi.Input[str] instance_charge_type: The charge type of ECS instance.
        :param pulumi.Input[str] instance_id: The ID of ECS instance.
        :param pulumi.Input[str] instance_name: The name of ECS instance.
        :param pulumi.Input[str] instance_type: The instance type of ECS instance.
        :param pulumi.Input[str] key_pair_id: The ssh key ID of ECS instance.
        :param pulumi.Input[str] key_pair_name: The ssh key name of ECS instance.
        :param pulumi.Input[int] memory_size: The memory size of ECS instance.
        :param pulumi.Input[str] network_interface_id: The ID of primary networkInterface.
        :param pulumi.Input[str] os_name: The os name of ECS instance.
        :param pulumi.Input[str] os_type: The os type of ECS instance.
        :param pulumi.Input[str] password: The password of ECS instance.
        :param pulumi.Input[int] period: The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]] secondary_network_interfaces: The secondary networkInterface detail collection of ECS instance.
        :param pulumi.Input[str] security_enhancement_strategy: The security enhancement strategy of ECS instance.Default is true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID set of primary networkInterface.
        :param pulumi.Input[str] status: The status of ECS instance.
        :param pulumi.Input[str] stopped_mode: The stop mode of ECS instance.
        :param pulumi.Input[str] subnet_id: The subnet ID of primary networkInterface.
        :param pulumi.Input[str] system_volume_id: The ID of system volume.
        :param pulumi.Input[int] system_volume_size: The size of system volume.
        :param pulumi.Input[str] system_volume_type: The type of system volume.
        :param pulumi.Input[str] updated_at: The update time of ECS instance.
        :param pulumi.Input[str] user_data: The user data of ECS instance.
        :param pulumi.Input[str] vpc_id: The VPC ID of ECS instance.
        :param pulumi.Input[str] zone_id: The available zone ID of ECS instance.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_renew_period is not None:
            pulumi.set(__self__, "auto_renew_period", auto_renew_period)
        if cpus is not None:
            pulumi.set(__self__, "cpus", cpus)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if include_data_volumes is not None:
            pulumi.set(__self__, "include_data_volumes", include_data_volumes)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if key_pair_id is not None:
            pulumi.set(__self__, "key_pair_id", key_pair_id)
        if key_pair_name is not None:
            pulumi.set(__self__, "key_pair_name", key_pair_name)
        if memory_size is not None:
            pulumi.set(__self__, "memory_size", memory_size)
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if secondary_network_interfaces is not None:
            pulumi.set(__self__, "secondary_network_interfaces", secondary_network_interfaces)
        if security_enhancement_strategy is not None:
            pulumi.set(__self__, "security_enhancement_strategy", security_enhancement_strategy)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stopped_mode is not None:
            pulumi.set(__self__, "stopped_mode", stopped_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_volume_id is not None:
            pulumi.set(__self__, "system_volume_id", system_volume_id)
        if system_volume_size is not None:
            pulumi.set(__self__, "system_volume_size", system_volume_size)
        if system_volume_type is not None:
            pulumi.set(__self__, "system_volume_type", system_volume_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[bool]]:
        """
        The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> Optional[pulumi.Input[int]]:
        """
        The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        """
        return pulumi.get(self, "auto_renew_period")

    @auto_renew_period.setter
    def auto_renew_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_period", value)

    @property
    @pulumi.getter
    def cpus(self) -> Optional[pulumi.Input[int]]:
        """
        The number of ECS instance CPU cores.
        """
        return pulumi.get(self, "cpus")

    @cpus.setter
    def cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpus", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of ECS instance.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]]:
        """
        The data volume collection of  ECS instance.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of ECS instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of ECS instance.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The hpc cluster ID of ECS instance.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Image ID of ECS instance.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="includeDataVolumes")
    def include_data_volumes(self) -> Optional[pulumi.Input[bool]]:
        """
        The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        """
        return pulumi.get(self, "include_data_volumes")

    @include_data_volumes.setter
    def include_data_volumes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_data_volumes", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of ECS instance.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of ECS instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of ECS instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type of ECS instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="keyPairId")
    def key_pair_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh key ID of ECS instance.
        """
        return pulumi.get(self, "key_pair_id")

    @key_pair_id.setter
    def key_pair_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair_id", value)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ssh key name of ECS instance.
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair_name", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[int]]:
        """
        The memory size of ECS instance.
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_size", value)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of primary networkInterface.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        The os name of ECS instance.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The os type of ECS instance.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of ECS instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="secondaryNetworkInterfaces")
    def secondary_network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]]:
        """
        The secondary networkInterface detail collection of ECS instance.
        """
        return pulumi.get(self, "secondary_network_interfaces")

    @secondary_network_interfaces.setter
    def secondary_network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSecondaryNetworkInterfaceArgs']]]]):
        pulumi.set(self, "secondary_network_interfaces", value)

    @property
    @pulumi.getter(name="securityEnhancementStrategy")
    def security_enhancement_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The security enhancement strategy of ECS instance.Default is true.
        """
        return pulumi.get(self, "security_enhancement_strategy")

    @security_enhancement_strategy.setter
    def security_enhancement_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_enhancement_strategy", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group ID set of primary networkInterface.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of ECS instance.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stoppedMode")
    def stopped_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The stop mode of ECS instance.
        """
        return pulumi.get(self, "stopped_mode")

    @stopped_mode.setter
    def stopped_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stopped_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet ID of primary networkInterface.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="systemVolumeId")
    def system_volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of system volume.
        """
        return pulumi.get(self, "system_volume_id")

    @system_volume_id.setter
    def system_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_volume_id", value)

    @property
    @pulumi.getter(name="systemVolumeSize")
    def system_volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of system volume.
        """
        return pulumi.get(self, "system_volume_size")

    @system_volume_size.setter
    def system_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "system_volume_size", value)

    @property
    @pulumi.getter(name="systemVolumeType")
    def system_volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of system volume.
        """
        return pulumi.get(self, "system_volume_type")

    @system_volume_type.setter
    def system_volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_volume_type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The update time of ECS instance.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The user data of ECS instance.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VPC ID of ECS instance.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The available zone ID of ECS instance.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 auto_renew_period: Optional[pulumi.Input[int]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDataVolumeArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 include_data_volumes: Optional[pulumi.Input[bool]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 secondary_network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSecondaryNetworkInterfaceArgs']]]]] = None,
                 security_enhancement_strategy: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 system_volume_size: Optional[pulumi.Input[int]] = None,
                 system_volume_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to manage ecs instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vpc.Vpc("foo",
            vpc_name="tf-test-2",
            cidr_block="172.16.0.0/16")
        foo1_subnet = volcengine.vpc.Subnet("foo1Subnet",
            subnet_name="subnet-test-1",
            cidr_block="172.16.1.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo.id)
        foo1_security_group = volcengine.vpc.SecurityGroup("foo1SecurityGroup", vpc_id=foo.id,
        opts=pulumi.ResourceOptions(depends_on=[foo1_subnet]))
        default = volcengine.ecs.Instance("default",
            zone_id="cn-beijing-a",
            image_id="image-aagd56zrw2jtdro3bnrl",
            instance_type="ecs.g1.large",
            instance_name="xym-tf-test-2",
            description="xym-tf-test-desc-1",
            password="93f0cb0614Aab12",
            instance_charge_type="PostPaid",
            system_volume_type="PTSSD",
            system_volume_size=60,
            subnet_id=foo1_subnet.id,
            security_group_ids=[foo1_security_group.id],
            data_volumes=[volcengine.ecs.InstanceDataVolumeArgs(
                volume_type="PTSSD",
                size=100,
                delete_with_instance=True,
            )])
        #  secondary_network_interfaces {
        #    subnet_id = volcengine_subnet.foo1.id
        #    security_group_ids = [volcengine_security_group.foo1.id]
        #  }
        ```

        ## Import

        ECS Instance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        :param pulumi.Input[int] auto_renew_period: The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDataVolumeArgs']]]] data_volumes: The data volume collection of  ECS instance.
        :param pulumi.Input[str] description: The description of ECS instance.
        :param pulumi.Input[str] host_name: The host name of ECS instance.
        :param pulumi.Input[str] hpc_cluster_id: The hpc cluster ID of ECS instance.
        :param pulumi.Input[str] image_id: The Image ID of ECS instance.
        :param pulumi.Input[bool] include_data_volumes: The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        :param pulumi.Input[str] instance_charge_type: The charge type of ECS instance.
        :param pulumi.Input[str] instance_name: The name of ECS instance.
        :param pulumi.Input[str] instance_type: The instance type of ECS instance.
        :param pulumi.Input[str] key_pair_name: The ssh key name of ECS instance.
        :param pulumi.Input[str] password: The password of ECS instance.
        :param pulumi.Input[int] period: The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSecondaryNetworkInterfaceArgs']]]] secondary_network_interfaces: The secondary networkInterface detail collection of ECS instance.
        :param pulumi.Input[str] security_enhancement_strategy: The security enhancement strategy of ECS instance.Default is true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID set of primary networkInterface.
        :param pulumi.Input[str] subnet_id: The subnet ID of primary networkInterface.
        :param pulumi.Input[int] system_volume_size: The size of system volume.
        :param pulumi.Input[str] system_volume_type: The type of system volume.
        :param pulumi.Input[str] user_data: The user data of ECS instance.
        :param pulumi.Input[str] zone_id: The available zone ID of ECS instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage ecs instance
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        foo = volcengine.vpc.Vpc("foo",
            vpc_name="tf-test-2",
            cidr_block="172.16.0.0/16")
        foo1_subnet = volcengine.vpc.Subnet("foo1Subnet",
            subnet_name="subnet-test-1",
            cidr_block="172.16.1.0/24",
            zone_id="cn-beijing-a",
            vpc_id=foo.id)
        foo1_security_group = volcengine.vpc.SecurityGroup("foo1SecurityGroup", vpc_id=foo.id,
        opts=pulumi.ResourceOptions(depends_on=[foo1_subnet]))
        default = volcengine.ecs.Instance("default",
            zone_id="cn-beijing-a",
            image_id="image-aagd56zrw2jtdro3bnrl",
            instance_type="ecs.g1.large",
            instance_name="xym-tf-test-2",
            description="xym-tf-test-desc-1",
            password="93f0cb0614Aab12",
            instance_charge_type="PostPaid",
            system_volume_type="PTSSD",
            system_volume_size=60,
            subnet_id=foo1_subnet.id,
            security_group_ids=[foo1_security_group.id],
            data_volumes=[volcengine.ecs.InstanceDataVolumeArgs(
                volume_type="PTSSD",
                size=100,
                delete_with_instance=True,
            )])
        #  secondary_network_interfaces {
        #    subnet_id = volcengine_subnet.foo1.id
        #    security_group_ids = [volcengine_security_group.foo1.id]
        #  }
        ```

        ## Import

        ECS Instance can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[bool]] = None,
                 auto_renew_period: Optional[pulumi.Input[int]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDataVolumeArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 include_data_volumes: Optional[pulumi.Input[bool]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 secondary_network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSecondaryNetworkInterfaceArgs']]]]] = None,
                 security_enhancement_strategy: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 system_volume_size: Optional[pulumi.Input[int]] = None,
                 system_volume_type: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["auto_renew_period"] = auto_renew_period
            __props__.__dict__["data_volumes"] = data_volumes
            __props__.__dict__["description"] = description
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["include_data_volumes"] = include_data_volumes
            __props__.__dict__["instance_charge_type"] = instance_charge_type
            __props__.__dict__["instance_name"] = instance_name
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["key_pair_name"] = key_pair_name
            __props__.__dict__["password"] = password
            __props__.__dict__["period"] = period
            __props__.__dict__["secondary_network_interfaces"] = secondary_network_interfaces
            __props__.__dict__["security_enhancement_strategy"] = security_enhancement_strategy
            if security_group_ids is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_ids'")
            __props__.__dict__["security_group_ids"] = security_group_ids
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if system_volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'system_volume_size'")
            __props__.__dict__["system_volume_size"] = system_volume_size
            if system_volume_type is None and not opts.urn:
                raise TypeError("Missing required property 'system_volume_type'")
            __props__.__dict__["system_volume_type"] = system_volume_type
            __props__.__dict__["user_data"] = user_data
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["cpus"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["key_pair_id"] = None
            __props__.__dict__["memory_size"] = None
            __props__.__dict__["network_interface_id"] = None
            __props__.__dict__["os_name"] = None
            __props__.__dict__["os_type"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["stopped_mode"] = None
            __props__.__dict__["system_volume_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["vpc_id"] = None
        super(Instance, __self__).__init__(
            'volcengine:Ecs/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[bool]] = None,
            auto_renew_period: Optional[pulumi.Input[int]] = None,
            cpus: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDataVolumeArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            hpc_cluster_id: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            include_data_volumes: Optional[pulumi.Input[bool]] = None,
            instance_charge_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            key_pair_id: Optional[pulumi.Input[str]] = None,
            key_pair_name: Optional[pulumi.Input[str]] = None,
            memory_size: Optional[pulumi.Input[int]] = None,
            network_interface_id: Optional[pulumi.Input[str]] = None,
            os_name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            secondary_network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSecondaryNetworkInterfaceArgs']]]]] = None,
            security_enhancement_strategy: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            stopped_mode: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            system_volume_id: Optional[pulumi.Input[str]] = None,
            system_volume_size: Optional[pulumi.Input[int]] = None,
            system_volume_type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_renew: The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        :param pulumi.Input[int] auto_renew_period: The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        :param pulumi.Input[int] cpus: The number of ECS instance CPU cores.
        :param pulumi.Input[str] created_at: The create time of ECS instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceDataVolumeArgs']]]] data_volumes: The data volume collection of  ECS instance.
        :param pulumi.Input[str] description: The description of ECS instance.
        :param pulumi.Input[str] host_name: The host name of ECS instance.
        :param pulumi.Input[str] hpc_cluster_id: The hpc cluster ID of ECS instance.
        :param pulumi.Input[str] image_id: The Image ID of ECS instance.
        :param pulumi.Input[bool] include_data_volumes: The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        :param pulumi.Input[str] instance_charge_type: The charge type of ECS instance.
        :param pulumi.Input[str] instance_id: The ID of ECS instance.
        :param pulumi.Input[str] instance_name: The name of ECS instance.
        :param pulumi.Input[str] instance_type: The instance type of ECS instance.
        :param pulumi.Input[str] key_pair_id: The ssh key ID of ECS instance.
        :param pulumi.Input[str] key_pair_name: The ssh key name of ECS instance.
        :param pulumi.Input[int] memory_size: The memory size of ECS instance.
        :param pulumi.Input[str] network_interface_id: The ID of primary networkInterface.
        :param pulumi.Input[str] os_name: The os name of ECS instance.
        :param pulumi.Input[str] os_type: The os type of ECS instance.
        :param pulumi.Input[str] password: The password of ECS instance.
        :param pulumi.Input[int] period: The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceSecondaryNetworkInterfaceArgs']]]] secondary_network_interfaces: The secondary networkInterface detail collection of ECS instance.
        :param pulumi.Input[str] security_enhancement_strategy: The security enhancement strategy of ECS instance.Default is true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID set of primary networkInterface.
        :param pulumi.Input[str] status: The status of ECS instance.
        :param pulumi.Input[str] stopped_mode: The stop mode of ECS instance.
        :param pulumi.Input[str] subnet_id: The subnet ID of primary networkInterface.
        :param pulumi.Input[str] system_volume_id: The ID of system volume.
        :param pulumi.Input[int] system_volume_size: The size of system volume.
        :param pulumi.Input[str] system_volume_type: The type of system volume.
        :param pulumi.Input[str] updated_at: The update time of ECS instance.
        :param pulumi.Input[str] user_data: The user data of ECS instance.
        :param pulumi.Input[str] vpc_id: The VPC ID of ECS instance.
        :param pulumi.Input[str] zone_id: The available zone ID of ECS instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["auto_renew_period"] = auto_renew_period
        __props__.__dict__["cpus"] = cpus
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_volumes"] = data_volumes
        __props__.__dict__["description"] = description
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["include_data_volumes"] = include_data_volumes
        __props__.__dict__["instance_charge_type"] = instance_charge_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["key_pair_id"] = key_pair_id
        __props__.__dict__["key_pair_name"] = key_pair_name
        __props__.__dict__["memory_size"] = memory_size
        __props__.__dict__["network_interface_id"] = network_interface_id
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["password"] = password
        __props__.__dict__["period"] = period
        __props__.__dict__["secondary_network_interfaces"] = secondary_network_interfaces
        __props__.__dict__["security_enhancement_strategy"] = security_enhancement_strategy
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["stopped_mode"] = stopped_mode
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["system_volume_id"] = system_volume_id
        __props__.__dict__["system_volume_size"] = system_volume_size
        __props__.__dict__["system_volume_type"] = system_volume_type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone_id"] = zone_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[bool]]:
        """
        The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoRenewPeriod")
    def auto_renew_period(self) -> pulumi.Output[Optional[int]]:
        """
        The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        """
        return pulumi.get(self, "auto_renew_period")

    @property
    @pulumi.getter
    def cpus(self) -> pulumi.Output[int]:
        """
        The number of ECS instance CPU cores.
        """
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The create time of ECS instance.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceDataVolume']]]:
        """
        The data volume collection of  ECS instance.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of ECS instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[str]:
        """
        The host name of ECS instance.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        The hpc cluster ID of ECS instance.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        The Image ID of ECS instance.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="includeDataVolumes")
    def include_data_volumes(self) -> pulumi.Output[Optional[bool]]:
        """
        The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        """
        return pulumi.get(self, "include_data_volumes")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Output[str]:
        """
        The charge type of ECS instance.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of ECS instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of ECS instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        The instance type of ECS instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="keyPairId")
    def key_pair_id(self) -> pulumi.Output[str]:
        """
        The ssh key ID of ECS instance.
        """
        return pulumi.get(self, "key_pair_id")

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> pulumi.Output[str]:
        """
        The ssh key name of ECS instance.
        """
        return pulumi.get(self, "key_pair_name")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> pulumi.Output[int]:
        """
        The memory size of ECS instance.
        """
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Output[str]:
        """
        The ID of primary networkInterface.
        """
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[str]:
        """
        The os name of ECS instance.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        The os type of ECS instance.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password of ECS instance.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="secondaryNetworkInterfaces")
    def secondary_network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceSecondaryNetworkInterface']]]:
        """
        The secondary networkInterface detail collection of ECS instance.
        """
        return pulumi.get(self, "secondary_network_interfaces")

    @property
    @pulumi.getter(name="securityEnhancementStrategy")
    def security_enhancement_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        The security enhancement strategy of ECS instance.Default is true.
        """
        return pulumi.get(self, "security_enhancement_strategy")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The security group ID set of primary networkInterface.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of ECS instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stoppedMode")
    def stopped_mode(self) -> pulumi.Output[str]:
        """
        The stop mode of ECS instance.
        """
        return pulumi.get(self, "stopped_mode")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet ID of primary networkInterface.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemVolumeId")
    def system_volume_id(self) -> pulumi.Output[str]:
        """
        The ID of system volume.
        """
        return pulumi.get(self, "system_volume_id")

    @property
    @pulumi.getter(name="systemVolumeSize")
    def system_volume_size(self) -> pulumi.Output[int]:
        """
        The size of system volume.
        """
        return pulumi.get(self, "system_volume_size")

    @property
    @pulumi.getter(name="systemVolumeType")
    def system_volume_type(self) -> pulumi.Output[str]:
        """
        The type of system volume.
        """
        return pulumi.get(self, "system_volume_type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The update time of ECS instance.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[str]:
        """
        The user data of ECS instance.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The VPC ID of ECS instance.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The available zone ID of ECS instance.
        """
        return pulumi.get(self, "zone_id")

