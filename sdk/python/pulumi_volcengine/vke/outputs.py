# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterClusterConfig',
    'ClusterClusterConfigApiServerPublicAccessConfig',
    'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig',
    'ClusterPodsConfig',
    'ClusterPodsConfigFlannelConfig',
    'ClusterPodsConfigVpcCniConfig',
    'ClusterServicesConfig',
    'ClustersClusterResult',
    'ClustersClusterClusterConfigResult',
    'ClustersClusterClusterConfigApiServerEndpointsResult',
    'ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
    'ClustersClusterClusterConfigApiServerEndpointsPublicIpResult',
    'ClustersClusterClusterConfigApiServerPublicAccessConfigResult',
    'ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult',
    'ClustersClusterNodeStatisticsResult',
    'ClustersClusterPodsConfigResult',
    'ClustersClusterPodsConfigFlannelConfigResult',
    'ClustersClusterPodsConfigVpcCniConfigResult',
    'ClustersClusterServicesConfigResult',
    'ClustersClusterStatusResult',
    'ClustersClusterStatusConditionResult',
    'ClustersStatusResult',
    'NodePoolAutoScaling',
    'NodePoolKubernetesConfig',
    'NodePoolKubernetesConfigLabel',
    'NodePoolKubernetesConfigTaint',
    'NodePoolNodeConfig',
    'NodePoolNodeConfigDataVolume',
    'NodePoolNodeConfigSecurity',
    'NodePoolNodeConfigSecurityLogin',
    'NodePoolNodeConfigSystemVolume',
    'NodePoolStatus',
    'NodePoolsNodePoolResult',
    'NodePoolsNodePoolDataVolumeResult',
    'NodePoolsNodePoolLabelContentResult',
    'NodePoolsNodePoolNodeStatisticsResult',
    'NodePoolsNodePoolSystemVolumeResult',
    'NodePoolsNodePoolTaintContentResult',
    'NodePoolsStatusResult',
    'NodesNodeResult',
    'NodesStatusResult',
]

@pulumi.output_type
class ClusterClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "apiServerPublicAccessConfig":
            suggest = "api_server_public_access_config"
        elif key == "apiServerPublicAccessEnabled":
            suggest = "api_server_public_access_enabled"
        elif key == "resourcePublicAccessDefaultEnabled":
            suggest = "resource_public_access_default_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 api_server_public_access_config: Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfig'] = None,
                 api_server_public_access_enabled: Optional[bool] = None,
                 resource_public_access_default_enabled: Optional[bool] = None):
        """
        :param Sequence[str] subnet_ids: The subnet ID for the cluster control plane to communicate within the private network.
        :param 'ClusterClusterConfigApiServerPublicAccessConfigArgs' api_server_public_access_config: Cluster API Server public network access configuration.
        :param bool api_server_public_access_enabled: Cluster API Server public network access configuration, the value is `true` or `false`.
        :param bool resource_public_access_default_enabled: Node public network access configuration, the value is `true` or `false`.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if api_server_public_access_config is not None:
            pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        if api_server_public_access_enabled is not None:
            pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        if resource_public_access_default_enabled is not None:
            pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ID for the cluster control plane to communicate within the private network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfig']:
        """
        Cluster API Server public network access configuration.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> Optional[bool]:
        """
        Cluster API Server public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> Optional[bool]:
        """
        Node public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")


@pulumi.output_type
class ClusterClusterConfigApiServerPublicAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicAccessNetworkConfig":
            suggest = "public_access_network_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfigApiServerPublicAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_access_network_config: Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig'] = None):
        """
        :param 'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs' public_access_network_config: Public network access network configuration.
        """
        if public_access_network_config is not None:
            pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> Optional['outputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig']:
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")


@pulumi.output_type
class ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "billingType":
            suggest = "billing_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: Optional[int] = None,
                 billing_type: Optional[str] = None):
        """
        :param int bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param str billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[str]:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")


@pulumi.output_type
class ClusterPodsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podNetworkMode":
            suggest = "pod_network_mode"
        elif key == "flannelConfig":
            suggest = "flannel_config"
        elif key == "vpcCniConfig":
            suggest = "vpc_cni_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_network_mode: str,
                 flannel_config: Optional['outputs.ClusterPodsConfigFlannelConfig'] = None,
                 vpc_cni_config: Optional['outputs.ClusterPodsConfigVpcCniConfig'] = None):
        """
        :param str pod_network_mode: The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param 'ClusterPodsConfigFlannelConfigArgs' flannel_config: Flannel network configuration.
        :param 'ClusterPodsConfigVpcCniConfigArgs' vpc_cni_config: VPC-CNI network configuration.
        """
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        if flannel_config is not None:
            pulumi.set(__self__, "flannel_config", flannel_config)
        if vpc_cni_config is not None:
            pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> str:
        """
        The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_mode")

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> Optional['outputs.ClusterPodsConfigFlannelConfig']:
        """
        Flannel network configuration.
        """
        return pulumi.get(self, "flannel_config")

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> Optional['outputs.ClusterPodsConfigVpcCniConfig']:
        """
        VPC-CNI network configuration.
        """
        return pulumi.get(self, "vpc_cni_config")


@pulumi.output_type
class ClusterPodsConfigFlannelConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPodsPerNode":
            suggest = "max_pods_per_node"
        elif key == "podCidrs":
            suggest = "pod_cidrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfigFlannelConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfigFlannelConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfigFlannelConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_pods_per_node: Optional[int] = None,
                 pod_cidrs: Optional[Sequence[str]] = None):
        """
        :param int max_pods_per_node: The maximum number of single-node Pod instances for a Flannel container network.
        :param Sequence[str] pod_cidrs: Pod CIDR for the Flannel container network.
        """
        if max_pods_per_node is not None:
            pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        if pod_cidrs is not None:
            pulumi.set(__self__, "pod_cidrs", pod_cidrs)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> Optional[int]:
        """
        The maximum number of single-node Pod instances for a Flannel container network.
        """
        return pulumi.get(self, "max_pods_per_node")

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Optional[Sequence[str]]:
        """
        Pod CIDR for the Flannel container network.
        """
        return pulumi.get(self, "pod_cidrs")


@pulumi.output_type
class ClusterPodsConfigVpcCniConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPodsConfigVpcCniConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPodsConfigVpcCniConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPodsConfigVpcCniConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Optional[Sequence[str]] = None,
                 vpc_id: Optional[str] = None):
        """
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClusterServicesConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceCidrsv4s":
            suggest = "service_cidrsv4s"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterServicesConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterServicesConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterServicesConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_cidrsv4s: Sequence[str]):
        """
        :param Sequence[str] service_cidrsv4s: The IPv4 private network address exposed by the service.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> Sequence[str]:
        """
        The IPv4 private network address exposed by the service.
        """
        return pulumi.get(self, "service_cidrsv4s")


@pulumi.output_type
class ClustersClusterResult(dict):
    def __init__(__self__, *,
                 cluster_config: 'outputs.ClustersClusterClusterConfigResult',
                 create_time: str,
                 delete_protection_enabled: bool,
                 description: str,
                 eip_allocation_id: str,
                 id: str,
                 kubeconfig_private: str,
                 kubeconfig_public: str,
                 kubernetes_version: str,
                 name: str,
                 node_statistics: 'outputs.ClustersClusterNodeStatisticsResult',
                 pods_config: 'outputs.ClustersClusterPodsConfigResult',
                 services_config: 'outputs.ClustersClusterServicesConfigResult',
                 status: 'outputs.ClustersClusterStatusResult',
                 update_time: str,
                 create_client_token: Optional[str] = None,
                 update_client_token: Optional[str] = None):
        """
        :param 'ClustersClusterClusterConfigArgs' cluster_config: The config of the cluster.
        :param str create_time: Cluster creation time. UTC+0 time in standard RFC3339 format.
        :param bool delete_protection_enabled: The delete protection of the cluster, the value is `true` or `false`.
        :param str description: The description of the cluster.
        :param str eip_allocation_id: Eip allocation Id.
        :param str id: The ID of the Cluster.
        :param str kubeconfig_private: Kubeconfig data with private network access, returned in BASE64 encoding.
        :param str kubeconfig_public: Kubeconfig data with public network access, returned in BASE64 encoding.
        :param str kubernetes_version: The Kubernetes version information corresponding to the cluster, specific to the patch version.
        :param str name: The name of the cluster.
        :param 'ClustersClusterNodeStatisticsArgs' node_statistics: Statistics on the number of nodes corresponding to each master state in the cluster.
        :param 'ClustersClusterPodsConfigArgs' pods_config: The config of the pods.
        :param 'ClustersClusterServicesConfigArgs' services_config: The config of the services.
        :param 'ClustersClusterStatusArgs' status: The status of the cluster.
        :param str update_time: The last time a request was accepted by the cluster and executed or completed. UTC+0 time in standard RFC3339 format.
        :param str create_client_token: ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        :param str update_client_token: The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_protection_enabled", delete_protection_enabled)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "eip_allocation_id", eip_allocation_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kubeconfig_private", kubeconfig_private)
        pulumi.set(__self__, "kubeconfig_public", kubeconfig_public)
        pulumi.set(__self__, "kubernetes_version", kubernetes_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "pods_config", pods_config)
        pulumi.set(__self__, "services_config", services_config)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        if create_client_token is not None:
            pulumi.set(__self__, "create_client_token", create_client_token)
        if update_client_token is not None:
            pulumi.set(__self__, "update_client_token", update_client_token)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.ClustersClusterClusterConfigResult':
        """
        The config of the cluster.
        """
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Cluster creation time. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteProtectionEnabled")
    def delete_protection_enabled(self) -> bool:
        """
        The delete protection of the cluster, the value is `true` or `false`.
        """
        return pulumi.get(self, "delete_protection_enabled")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eipAllocationId")
    def eip_allocation_id(self) -> str:
        """
        Eip allocation Id.
        """
        return pulumi.get(self, "eip_allocation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Cluster.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kubeconfigPrivate")
    def kubeconfig_private(self) -> str:
        """
        Kubeconfig data with private network access, returned in BASE64 encoding.
        """
        return pulumi.get(self, "kubeconfig_private")

    @property
    @pulumi.getter(name="kubeconfigPublic")
    def kubeconfig_public(self) -> str:
        """
        Kubeconfig data with public network access, returned in BASE64 encoding.
        """
        return pulumi.get(self, "kubeconfig_public")

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> str:
        """
        The Kubernetes version information corresponding to the cluster, specific to the patch version.
        """
        return pulumi.get(self, "kubernetes_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> 'outputs.ClustersClusterNodeStatisticsResult':
        """
        Statistics on the number of nodes corresponding to each master state in the cluster.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter(name="podsConfig")
    def pods_config(self) -> 'outputs.ClustersClusterPodsConfigResult':
        """
        The config of the pods.
        """
        return pulumi.get(self, "pods_config")

    @property
    @pulumi.getter(name="servicesConfig")
    def services_config(self) -> 'outputs.ClustersClusterServicesConfigResult':
        """
        The config of the services.
        """
        return pulumi.get(self, "services_config")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.ClustersClusterStatusResult':
        """
        The status of the cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last time a request was accepted by the cluster and executed or completed. UTC+0 time in standard RFC3339 format.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> Optional[str]:
        """
        ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> Optional[str]:
        """
        The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        """
        return pulumi.get(self, "update_client_token")


@pulumi.output_type
class ClustersClusterClusterConfigResult(dict):
    def __init__(__self__, *,
                 api_server_endpoints: 'outputs.ClustersClusterClusterConfigApiServerEndpointsResult',
                 api_server_public_access_config: 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigResult',
                 api_server_public_access_enabled: bool,
                 resource_public_access_default_enabled: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param 'ClustersClusterClusterConfigApiServerEndpointsArgs' api_server_endpoints: Endpoint information accessed by the cluster API Server.
        :param 'ClustersClusterClusterConfigApiServerPublicAccessConfigArgs' api_server_public_access_config: Cluster API Server public network access configuration.
        :param bool api_server_public_access_enabled: Cluster API Server public network access configuration, the value is `true` or `false`.
        :param bool resource_public_access_default_enabled: Node public network access configuration, the value is `true` or `false`.
        :param Sequence[str] security_group_ids: The security group used by the cluster control plane and nodes.
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "api_server_endpoints", api_server_endpoints)
        pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="apiServerEndpoints")
    def api_server_endpoints(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsResult':
        """
        Endpoint information accessed by the cluster API Server.
        """
        return pulumi.get(self, "api_server_endpoints")

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigResult':
        """
        Cluster API Server public network access configuration.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> bool:
        """
        Cluster API Server public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> bool:
        """
        Node public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The security group used by the cluster control plane and nodes.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsResult(dict):
    def __init__(__self__, *,
                 private_ip: 'outputs.ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult',
                 public_ip: 'outputs.ClustersClusterClusterConfigApiServerEndpointsPublicIpResult'):
        """
        :param 'ClustersClusterClusterConfigApiServerEndpointsPrivateIpArgs' private_ip: Endpoint address of the cluster API Server private network.
        :param 'ClustersClusterClusterConfigApiServerEndpointsPublicIpArgs' public_ip: Endpoint address of the cluster API Server public network.
        """
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult':
        """
        Endpoint address of the cluster API Server private network.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> 'outputs.ClustersClusterClusterConfigApiServerEndpointsPublicIpResult':
        """
        Endpoint address of the cluster API Server public network.
        """
        return pulumi.get(self, "public_ip")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsPrivateIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerEndpointsPublicIpResult(dict):
    def __init__(__self__, *,
                 ipv4: str):
        """
        :param str ipv4: Ipv4 address.
        """
        pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> str:
        """
        Ipv4 address.
        """
        return pulumi.get(self, "ipv4")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerPublicAccessConfigResult(dict):
    def __init__(__self__, *,
                 access_source_ipsv4s: Sequence[str],
                 public_access_network_config: 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult'):
        """
        :param Sequence[str] access_source_ipsv4s: IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        :param 'ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs' public_access_network_config: Public network access network configuration.
        """
        pulumi.set(__self__, "access_source_ipsv4s", access_source_ipsv4s)
        pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="accessSourceIpsv4s")
    def access_source_ipsv4s(self) -> Sequence[str]:
        """
        IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.
        """
        return pulumi.get(self, "access_source_ipsv4s")

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> 'outputs.ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult':
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")


@pulumi.output_type
class ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 billing_type: str,
                 isp: str):
        """
        :param int bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param str billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        :param str isp: The ISP of public IP.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "isp", isp)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter
    def isp(self) -> str:
        """
        The ISP of public IP.
        """
        return pulumi.get(self, "isp")


@pulumi.output_type
class ClustersClusterNodeStatisticsResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 stopped_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: Phase=Creating total number of nodes.
        :param int deleting_count: Phase=Deleting total number of nodes.
        :param int failed_count: Phase=Failed total number of nodes.
        :param int running_count: Phase=Running total number of nodes.
        :param int stopped_count: Phase=Stopped total number of nodes.
        :param int total_count: The total count of Cluster query.
        :param int updating_count: Phase=Updating total number of nodes.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "stopped_count", stopped_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        Phase=Creating total number of nodes.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        Phase=Deleting total number of nodes.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        Phase=Failed total number of nodes.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        Phase=Running total number of nodes.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="stoppedCount")
    def stopped_count(self) -> int:
        """
        Phase=Stopped total number of nodes.
        """
        return pulumi.get(self, "stopped_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of Cluster query.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        Phase=Updating total number of nodes.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class ClustersClusterPodsConfigResult(dict):
    def __init__(__self__, *,
                 flannel_config: 'outputs.ClustersClusterPodsConfigFlannelConfigResult',
                 pod_network_mode: str,
                 vpc_cni_config: 'outputs.ClustersClusterPodsConfigVpcCniConfigResult'):
        """
        :param 'ClustersClusterPodsConfigFlannelConfigArgs' flannel_config: Flannel network configuration.
        :param str pod_network_mode: Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        :param 'ClustersClusterPodsConfigVpcCniConfigArgs' vpc_cni_config: VPC-CNI network configuration.
        """
        pulumi.set(__self__, "flannel_config", flannel_config)
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> 'outputs.ClustersClusterPodsConfigFlannelConfigResult':
        """
        Flannel network configuration.
        """
        return pulumi.get(self, "flannel_config")

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> str:
        """
        Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.
        """
        return pulumi.get(self, "pod_network_mode")

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> 'outputs.ClustersClusterPodsConfigVpcCniConfigResult':
        """
        VPC-CNI network configuration.
        """
        return pulumi.get(self, "vpc_cni_config")


@pulumi.output_type
class ClustersClusterPodsConfigFlannelConfigResult(dict):
    def __init__(__self__, *,
                 max_pods_per_node: int,
                 pod_cidrs: Sequence[str]):
        """
        :param int max_pods_per_node: The maximum number of single-node Pod instances for a Flannel container network.
        :param Sequence[str] pod_cidrs: Pod CIDR for the Flannel container network.
        """
        pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        pulumi.set(__self__, "pod_cidrs", pod_cidrs)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> int:
        """
        The maximum number of single-node Pod instances for a Flannel container network.
        """
        return pulumi.get(self, "max_pods_per_node")

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Sequence[str]:
        """
        Pod CIDR for the Flannel container network.
        """
        return pulumi.get(self, "pod_cidrs")


@pulumi.output_type
class ClustersClusterPodsConfigVpcCniConfigResult(dict):
    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 vpc_id: str):
        """
        :param Sequence[str] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param str vpc_id: The private network where the cluster control plane network resides.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClustersClusterServicesConfigResult(dict):
    def __init__(__self__, *,
                 service_cidrsv4s: Sequence[str]):
        """
        :param Sequence[str] service_cidrsv4s: The IPv4 private network address exposed by the service.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> Sequence[str]:
        """
        The IPv4 private network address exposed by the service.
        """
        return pulumi.get(self, "service_cidrsv4s")


@pulumi.output_type
class ClustersClusterStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.ClustersClusterStatusConditionResult'],
                 phase: str):
        """
        :param Sequence['ClustersClusterStatusConditionArgs'] conditions: The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ClustersClusterStatusConditionResult']:
        """
        The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class ClustersClusterStatusConditionResult(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ClustersStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class NodePoolAutoScaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredReplicas":
            suggest = "desired_replicas"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "minReplicas":
            suggest = "min_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolAutoScaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolAutoScaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolAutoScaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_replicas: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 max_replicas: Optional[int] = None,
                 min_replicas: Optional[int] = None,
                 priority: Optional[int] = None):
        """
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param bool enabled: Is Enabled of AutoScaling.
        :param int max_replicas: The MaxReplicas of AutoScaling.
        :param int min_replicas: The MinReplicas of AutoScaling.
        :param int priority: The Priority of AutoScaling.
        """
        if desired_replicas is not None:
            pulumi.set(__self__, "desired_replicas", desired_replicas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> Optional[int]:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is Enabled of AutoScaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        """
        The MaxReplicas of AutoScaling.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[int]:
        """
        The MinReplicas of AutoScaling.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class NodePoolKubernetesConfig(dict):
    def __init__(__self__, *,
                 cordon: Optional[bool] = None,
                 labels: Optional[Sequence['outputs.NodePoolKubernetesConfigLabel']] = None,
                 taints: Optional[Sequence['outputs.NodePoolKubernetesConfigTaint']] = None):
        """
        :param bool cordon: The Cordon of KubernetesConfig.
        :param Sequence['NodePoolKubernetesConfigLabelArgs'] labels: The Labels of KubernetesConfig.
        :param Sequence['NodePoolKubernetesConfigTaintArgs'] taints: The Taints of KubernetesConfig.
        """
        if cordon is not None:
            pulumi.set(__self__, "cordon", cordon)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def cordon(self) -> Optional[bool]:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence['outputs.NodePoolKubernetesConfigLabel']]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence['outputs.NodePoolKubernetesConfigTaint']]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")


@pulumi.output_type
class NodePoolKubernetesConfigLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: The Key of Labels.
        :param str value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolKubernetesConfigTaint(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str effect: The Effect of Taints.
        :param str key: The Key of Taints.
        :param str value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        The Effect of Taints.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalContainerStorageEnabled":
            suggest = "additional_container_storage_enabled"
        elif key == "dataVolumes":
            suggest = "data_volumes"
        elif key == "initializeScript":
            suggest = "initialize_script"
        elif key == "instanceTypeIds":
            suggest = "instance_type_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "systemVolume":
            suggest = "system_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_container_storage_enabled: Optional[bool] = None,
                 data_volumes: Optional[Sequence['outputs.NodePoolNodeConfigDataVolume']] = None,
                 initialize_script: Optional[str] = None,
                 instance_type_ids: Optional[Sequence[str]] = None,
                 security: Optional['outputs.NodePoolNodeConfigSecurity'] = None,
                 subnet_ids: Optional[Sequence[str]] = None,
                 system_volume: Optional['outputs.NodePoolNodeConfigSystemVolume'] = None):
        """
        :param bool additional_container_storage_enabled: The AdditionalContainerStorageEnabled of NodeConfig.
        :param Sequence['NodePoolNodeConfigDataVolumeArgs'] data_volumes: The DataVolumes of NodeConfig.
        :param str initialize_script: The initializeScript of NodeConfig.
        :param Sequence[str] instance_type_ids: The InstanceTypeIds of NodeConfig.
        :param 'NodePoolNodeConfigSecurityArgs' security: The Security of NodeConfig.
        :param Sequence[str] subnet_ids: The SubnetIds of NodeConfig.
        :param 'NodePoolNodeConfigSystemVolumeArgs' system_volume: The SystemVolume of NodeConfig.
        """
        if additional_container_storage_enabled is not None:
            pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if initialize_script is not None:
            pulumi.set(__self__, "initialize_script", initialize_script)
        if instance_type_ids is not None:
            pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if system_volume is not None:
            pulumi.set(__self__, "system_volume", system_volume)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> Optional[bool]:
        """
        The AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[Sequence['outputs.NodePoolNodeConfigDataVolume']]:
        """
        The DataVolumes of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> Optional[str]:
        """
        The initializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Optional[Sequence[str]]:
        """
        The InstanceTypeIds of NodeConfig.
        """
        return pulumi.get(self, "instance_type_ids")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.NodePoolNodeConfigSecurity']:
        """
        The Security of NodeConfig.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        The SubnetIds of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="systemVolume")
    def system_volume(self) -> Optional['outputs.NodePoolNodeConfigSystemVolume']:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volume")


@pulumi.output_type
class NodePoolNodeConfigDataVolume(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int size: The Size of DataVolumes.
        :param str type: The Type of DataVolumes.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The Size of DataVolumes.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The Type of DataVolumes.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolNodeConfigSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "securityStrategies":
            suggest = "security_strategies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 login: Optional['outputs.NodePoolNodeConfigSecurityLogin'] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 security_strategies: Optional[Sequence[str]] = None):
        """
        :param 'NodePoolNodeConfigSecurityLoginArgs' login: The Login of Security.
        :param Sequence[str] security_group_ids: The SecurityGroupIds of Security.
        :param Sequence[str] security_strategies: The SecurityStrategies of Security.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_strategies is not None:
            pulumi.set(__self__, "security_strategies", security_strategies)

    @property
    @pulumi.getter
    def login(self) -> Optional['outputs.NodePoolNodeConfigSecurityLogin']:
        """
        The Login of Security.
        """
        return pulumi.get(self, "login")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        The SecurityGroupIds of Security.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Optional[Sequence[str]]:
        """
        The SecurityStrategies of Security.
        """
        return pulumi.get(self, "security_strategies")


@pulumi.output_type
class NodePoolNodeConfigSecurityLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sshKeyPairName":
            suggest = "ssh_key_pair_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolNodeConfigSecurityLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolNodeConfigSecurityLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolNodeConfigSecurityLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 ssh_key_pair_name: Optional[str] = None):
        """
        :param str password: The Password of Security.
        :param str ssh_key_pair_name: The SshKeyPairName of Security.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_pair_name is not None:
            pulumi.set(__self__, "ssh_key_pair_name", ssh_key_pair_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The Password of Security.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="sshKeyPairName")
    def ssh_key_pair_name(self) -> Optional[str]:
        """
        The SshKeyPairName of Security.
        """
        return pulumi.get(self, "ssh_key_pair_name")


@pulumi.output_type
class NodePoolNodeConfigSystemVolume(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int size: The Size of SystemVolume.
        :param str type: The Type of SystemVolume.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The Type of SystemVolume.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionsType":
            suggest = "conditions_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NodePoolStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NodePoolStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NodePoolStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state.
        :param str phase: The Phase of Status.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class NodePoolsNodePoolResult(dict):
    def __init__(__self__, *,
                 additional_container_storage_enabled: bool,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 cordon: bool,
                 create_client_token: str,
                 create_time: str,
                 data_volumes: Sequence['outputs.NodePoolsNodePoolDataVolumeResult'],
                 description: str,
                 desired_replicas: int,
                 enabled: bool,
                 id: str,
                 initialize_script: str,
                 instance_type_ids: Sequence[str],
                 label_contents: Sequence['outputs.NodePoolsNodePoolLabelContentResult'],
                 max_replicas: int,
                 min_replicas: int,
                 name: str,
                 node_statistics: 'outputs.NodePoolsNodePoolNodeStatisticsResult',
                 phase: str,
                 priority: int,
                 subnet_ids: Sequence[str],
                 system_volume: 'outputs.NodePoolsNodePoolSystemVolumeResult',
                 taint_contents: Sequence['outputs.NodePoolsNodePoolTaintContentResult'],
                 update_client_token: str,
                 update_time: str):
        """
        :param bool additional_container_storage_enabled: Is AdditionalContainerStorageEnabled of NodeConfig.
        :param str cluster_id: The ClusterId of NodePool.
        :param Sequence[str] condition_types: The Condition of Status.
        :param bool cordon: The Cordon of KubernetesConfig.
        :param str create_client_token: The ClientToken when successfully created.
        :param str create_time: The CreateTime of NodePool.
        :param Sequence['NodePoolsNodePoolDataVolumeArgs'] data_volumes: The DataVolume of NodeConfig.
        :param str description: The Description of NodePool.
        :param int desired_replicas: The DesiredReplicas of AutoScaling.
        :param bool enabled: Is Enabled of AutoScaling.
        :param str id: The Id of NodePool.
        :param str initialize_script: The InitializeScript of NodeConfig.
        :param Sequence[str] instance_type_ids: The InstanceTypeIds of NodeConfig.
        :param Sequence['NodePoolsNodePoolLabelContentArgs'] label_contents: The LabelContent of KubernetesConfig.
        :param int max_replicas: The MaxReplicas of AutoScaling.
        :param int min_replicas: The MinReplicas of AutoScaling.
        :param str name: The Name of NodePool.
        :param 'NodePoolsNodePoolNodeStatisticsArgs' node_statistics: The NodeStatistics of NodeConfig.
        :param str phase: The Phase of Status.
        :param int priority: The Priority of AutoScaling.
        :param Sequence[str] subnet_ids: The SubnetId of NodeConfig.
        :param 'NodePoolsNodePoolSystemVolumeArgs' system_volume: The SystemVolume of NodeConfig.
        :param Sequence['NodePoolsNodePoolTaintContentArgs'] taint_contents: The TaintContent of NodeConfig.
        :param str update_client_token: The ClientToken when last update was successful.
        :param str update_time: The UpdateTime time of NodePool.
        """
        pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "cordon", cordon)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_volumes", data_volumes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "desired_replicas", desired_replicas)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initialize_script", initialize_script)
        pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        pulumi.set(__self__, "label_contents", label_contents)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_statistics", node_statistics)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "system_volume", system_volume)
        pulumi.set(__self__, "taint_contents", taint_contents)
        pulumi.set(__self__, "update_client_token", update_client_token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> bool:
        """
        Is AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Status.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter
    def cordon(self) -> bool:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The ClientToken when successfully created.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The CreateTime of NodePool.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Sequence['outputs.NodePoolsNodePoolDataVolumeResult']:
        """
        The DataVolume of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The Description of NodePool.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> int:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Is Enabled of AutoScaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The Id of NodePool.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> str:
        """
        The InitializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Sequence[str]:
        """
        The InstanceTypeIds of NodeConfig.
        """
        return pulumi.get(self, "instance_type_ids")

    @property
    @pulumi.getter(name="labelContents")
    def label_contents(self) -> Sequence['outputs.NodePoolsNodePoolLabelContentResult']:
        """
        The LabelContent of KubernetesConfig.
        """
        return pulumi.get(self, "label_contents")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        The MaxReplicas of AutoScaling.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        """
        The MinReplicas of AutoScaling.
        """
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeStatistics")
    def node_statistics(self) -> 'outputs.NodePoolsNodePoolNodeStatisticsResult':
        """
        The NodeStatistics of NodeConfig.
        """
        return pulumi.get(self, "node_statistics")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The SubnetId of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="systemVolume")
    def system_volume(self) -> 'outputs.NodePoolsNodePoolSystemVolumeResult':
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volume")

    @property
    @pulumi.getter(name="taintContents")
    def taint_contents(self) -> Sequence['outputs.NodePoolsNodePoolTaintContentResult']:
        """
        The TaintContent of NodeConfig.
        """
        return pulumi.get(self, "taint_contents")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> str:
        """
        The ClientToken when last update was successful.
        """
        return pulumi.get(self, "update_client_token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The UpdateTime time of NodePool.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class NodePoolsNodePoolDataVolumeResult(dict):
    def __init__(__self__, *,
                 size: str,
                 type: str):
        """
        :param str size: The Size of SystemVolume.
        :param str type: The Type of SystemVolume.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of SystemVolume.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolsNodePoolLabelContentResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsNodePoolNodeStatisticsResult(dict):
    def __init__(__self__, *,
                 creating_count: int,
                 deleting_count: int,
                 failed_count: int,
                 running_count: int,
                 total_count: int,
                 updating_count: int):
        """
        :param int creating_count: The CreatingCount of Node.
        :param int deleting_count: The DeletingCount of Node.
        :param int failed_count: The FailedCount of Node.
        :param int running_count: The RunningCount of Node.
        :param int total_count: Returns the total amount of the data list.
        :param int updating_count: The UpdatingCount of Node.
        """
        pulumi.set(__self__, "creating_count", creating_count)
        pulumi.set(__self__, "deleting_count", deleting_count)
        pulumi.set(__self__, "failed_count", failed_count)
        pulumi.set(__self__, "running_count", running_count)
        pulumi.set(__self__, "total_count", total_count)
        pulumi.set(__self__, "updating_count", updating_count)

    @property
    @pulumi.getter(name="creatingCount")
    def creating_count(self) -> int:
        """
        The CreatingCount of Node.
        """
        return pulumi.get(self, "creating_count")

    @property
    @pulumi.getter(name="deletingCount")
    def deleting_count(self) -> int:
        """
        The DeletingCount of Node.
        """
        return pulumi.get(self, "deleting_count")

    @property
    @pulumi.getter(name="failedCount")
    def failed_count(self) -> int:
        """
        The FailedCount of Node.
        """
        return pulumi.get(self, "failed_count")

    @property
    @pulumi.getter(name="runningCount")
    def running_count(self) -> int:
        """
        The RunningCount of Node.
        """
        return pulumi.get(self, "running_count")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Returns the total amount of the data list.
        """
        return pulumi.get(self, "total_count")

    @property
    @pulumi.getter(name="updatingCount")
    def updating_count(self) -> int:
        """
        The UpdatingCount of Node.
        """
        return pulumi.get(self, "updating_count")


@pulumi.output_type
class NodePoolsNodePoolSystemVolumeResult(dict):
    def __init__(__self__, *,
                 size: str,
                 type: str):
        """
        :param str size: The Size of SystemVolume.
        :param str type: The Type of SystemVolume.
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The Type of SystemVolume.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NodePoolsNodePoolTaintContentResult(dict):
    def __init__(__self__, *,
                 effect: str,
                 key: str,
                 value: str):
        """
        :param str effect: The Effect of Taint.
        :param str key: The Key of Taint.
        :param str value: The Value of Taint.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> str:
        """
        The Effect of Taint.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The Key of Taint.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The Value of Taint.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NodePoolsStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state.
        :param str phase: The Phase of Status.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")


@pulumi.output_type
class NodesNodeResult(dict):
    def __init__(__self__, *,
                 additional_container_storage_enabled: bool,
                 cluster_id: str,
                 condition_types: Sequence[str],
                 container_storage_path: str,
                 create_client_token: str,
                 create_time: str,
                 id: str,
                 instance_id: str,
                 is_virtual: bool,
                 name: str,
                 node_pool_id: str,
                 phase: str,
                 roles: Sequence[str],
                 update_time: str):
        """
        :param bool additional_container_storage_enabled: Is Additional Container storage enables.
        :param str cluster_id: The cluster id of node.
        :param Sequence[str] condition_types: The Condition of Node.
        :param str container_storage_path: The Storage Path.
        :param str create_client_token: The Create Client Token.
        :param str create_time: The create time of Node.
        :param str id: The ID of Node.
        :param str instance_id: The instance id of node.
        :param bool is_virtual: Is virtual node.
        :param str name: The Name of Node.
        :param str node_pool_id: The node pool id.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        :param Sequence[str] roles: The roles of node.
        :param str update_time: The update time of Node.
        """
        pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "condition_types", condition_types)
        pulumi.set(__self__, "container_storage_path", container_storage_path)
        pulumi.set(__self__, "create_client_token", create_client_token)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "is_virtual", is_virtual)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_pool_id", node_pool_id)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> bool:
        """
        Is Additional Container storage enables.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        The cluster id of node.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="conditionTypes")
    def condition_types(self) -> Sequence[str]:
        """
        The Condition of Node.
        """
        return pulumi.get(self, "condition_types")

    @property
    @pulumi.getter(name="containerStoragePath")
    def container_storage_path(self) -> str:
        """
        The Storage Path.
        """
        return pulumi.get(self, "container_storage_path")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> str:
        """
        The Create Client Token.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of Node.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Node.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        The instance id of node.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isVirtual")
    def is_virtual(self) -> bool:
        """
        Is virtual node.
        """
        return pulumi.get(self, "is_virtual")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Name of Node.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> str:
        """
        The node pool id.
        """
        return pulumi.get(self, "node_pool_id")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        """
        The roles of node.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of Node.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class NodesStatusResult(dict):
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "conditions_type")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        """
        return pulumi.get(self, "phase")


