# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterClusterConfigArgs',
    'ClusterClusterConfigApiServerPublicAccessConfigArgs',
    'ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs',
    'ClusterPodsConfigArgs',
    'ClusterPodsConfigFlannelConfigArgs',
    'ClusterPodsConfigVpcCniConfigArgs',
    'ClusterServicesConfigArgs',
    'ClustersStatusArgs',
    'NodePoolAutoScalingArgs',
    'NodePoolKubernetesConfigArgs',
    'NodePoolKubernetesConfigLabelArgs',
    'NodePoolKubernetesConfigTaintArgs',
    'NodePoolNodeConfigArgs',
    'NodePoolNodeConfigDataVolumeArgs',
    'NodePoolNodeConfigSecurityArgs',
    'NodePoolNodeConfigSecurityLoginArgs',
    'NodePoolNodeConfigSystemVolumeArgs',
    'NodePoolStatusArgs',
    'NodePoolsStatusArgs',
    'NodesStatusArgs',
]

@pulumi.input_type
class ClusterClusterConfigArgs:
    def __init__(__self__, *,
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 api_server_public_access_config: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']] = None,
                 api_server_public_access_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_public_access_default_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The subnet ID for the cluster control plane to communicate within the private network.
        :param pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs'] api_server_public_access_config: Cluster API Server public network access configuration.
        :param pulumi.Input[bool] api_server_public_access_enabled: Cluster API Server public network access configuration, the value is `true` or `false`.
        :param pulumi.Input[bool] resource_public_access_default_enabled: Node public network access configuration, the value is `true` or `false`.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if api_server_public_access_config is not None:
            pulumi.set(__self__, "api_server_public_access_config", api_server_public_access_config)
        if api_server_public_access_enabled is not None:
            pulumi.set(__self__, "api_server_public_access_enabled", api_server_public_access_enabled)
        if resource_public_access_default_enabled is not None:
            pulumi.set(__self__, "resource_public_access_default_enabled", resource_public_access_default_enabled)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The subnet ID for the cluster control plane to communicate within the private network.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="apiServerPublicAccessConfig")
    def api_server_public_access_config(self) -> Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']]:
        """
        Cluster API Server public network access configuration.
        """
        return pulumi.get(self, "api_server_public_access_config")

    @api_server_public_access_config.setter
    def api_server_public_access_config(self, value: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigArgs']]):
        pulumi.set(self, "api_server_public_access_config", value)

    @property
    @pulumi.getter(name="apiServerPublicAccessEnabled")
    def api_server_public_access_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Cluster API Server public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "api_server_public_access_enabled")

    @api_server_public_access_enabled.setter
    def api_server_public_access_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_server_public_access_enabled", value)

    @property
    @pulumi.getter(name="resourcePublicAccessDefaultEnabled")
    def resource_public_access_default_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Node public network access configuration, the value is `true` or `false`.
        """
        return pulumi.get(self, "resource_public_access_default_enabled")

    @resource_public_access_default_enabled.setter
    def resource_public_access_default_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resource_public_access_default_enabled", value)


@pulumi.input_type
class ClusterClusterConfigApiServerPublicAccessConfigArgs:
    def __init__(__self__, *,
                 public_access_network_config: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']] = None):
        """
        :param pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs'] public_access_network_config: Public network access network configuration.
        """
        if public_access_network_config is not None:
            pulumi.set(__self__, "public_access_network_config", public_access_network_config)

    @property
    @pulumi.getter(name="publicAccessNetworkConfig")
    def public_access_network_config(self) -> Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']]:
        """
        Public network access network configuration.
        """
        return pulumi.get(self, "public_access_network_config")

    @public_access_network_config.setter
    def public_access_network_config(self, value: Optional[pulumi.Input['ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs']]):
        pulumi.set(self, "public_access_network_config", value)


@pulumi.input_type
class ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 billing_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] bandwidth: The peak bandwidth of the public IP, unit: Mbps.
        :param pulumi.Input[str] billing_type: Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if billing_type is not None:
            pulumi.set(__self__, "billing_type", billing_type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The peak bandwidth of the public IP, unit: Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
        """
        return pulumi.get(self, "billing_type")

    @billing_type.setter
    def billing_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "billing_type", value)


@pulumi.input_type
class ClusterPodsConfigArgs:
    def __init__(__self__, *,
                 pod_network_mode: pulumi.Input[str],
                 flannel_config: Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']] = None,
                 vpc_cni_config: Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']] = None):
        """
        :param pulumi.Input[str] pod_network_mode: The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        :param pulumi.Input['ClusterPodsConfigFlannelConfigArgs'] flannel_config: Flannel network configuration.
        :param pulumi.Input['ClusterPodsConfigVpcCniConfigArgs'] vpc_cni_config: VPC-CNI network configuration.
        """
        pulumi.set(__self__, "pod_network_mode", pod_network_mode)
        if flannel_config is not None:
            pulumi.set(__self__, "flannel_config", flannel_config)
        if vpc_cni_config is not None:
            pulumi.set(__self__, "vpc_cni_config", vpc_cni_config)

    @property
    @pulumi.getter(name="podNetworkMode")
    def pod_network_mode(self) -> pulumi.Input[str]:
        """
        The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        """
        return pulumi.get(self, "pod_network_mode")

    @pod_network_mode.setter
    def pod_network_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_network_mode", value)

    @property
    @pulumi.getter(name="flannelConfig")
    def flannel_config(self) -> Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']]:
        """
        Flannel network configuration.
        """
        return pulumi.get(self, "flannel_config")

    @flannel_config.setter
    def flannel_config(self, value: Optional[pulumi.Input['ClusterPodsConfigFlannelConfigArgs']]):
        pulumi.set(self, "flannel_config", value)

    @property
    @pulumi.getter(name="vpcCniConfig")
    def vpc_cni_config(self) -> Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']]:
        """
        VPC-CNI network configuration.
        """
        return pulumi.get(self, "vpc_cni_config")

    @vpc_cni_config.setter
    def vpc_cni_config(self, value: Optional[pulumi.Input['ClusterPodsConfigVpcCniConfigArgs']]):
        pulumi.set(self, "vpc_cni_config", value)


@pulumi.input_type
class ClusterPodsConfigFlannelConfigArgs:
    def __init__(__self__, *,
                 max_pods_per_node: Optional[pulumi.Input[int]] = None,
                 pod_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] max_pods_per_node: The maximum number of single-node Pod instances for a Flannel container network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pod_cidrs: Pod CIDR for the Flannel container network.
        """
        if max_pods_per_node is not None:
            pulumi.set(__self__, "max_pods_per_node", max_pods_per_node)
        if pod_cidrs is not None:
            pulumi.set(__self__, "pod_cidrs", pod_cidrs)

    @property
    @pulumi.getter(name="maxPodsPerNode")
    def max_pods_per_node(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of single-node Pod instances for a Flannel container network.
        """
        return pulumi.get(self, "max_pods_per_node")

    @max_pods_per_node.setter
    def max_pods_per_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods_per_node", value)

    @property
    @pulumi.getter(name="podCidrs")
    def pod_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Pod CIDR for the Flannel container network.
        """
        return pulumi.get(self, "pod_cidrs")

    @pod_cidrs.setter
    def pod_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pod_cidrs", value)


@pulumi.input_type
class ClusterPodsConfigVpcCniConfigArgs:
    def __init__(__self__, *,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: A list of Pod subnet IDs for the VPC-CNI container network.
        :param pulumi.Input[str] vpc_id: The private network where the cluster control plane network resides.
        """
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Pod subnet IDs for the VPC-CNI container network.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private network where the cluster control plane network resides.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class ClusterServicesConfigArgs:
    def __init__(__self__, *,
                 service_cidrsv4s: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_cidrsv4s: The IPv4 private network address exposed by the service.
        """
        pulumi.set(__self__, "service_cidrsv4s", service_cidrsv4s)

    @property
    @pulumi.getter(name="serviceCidrsv4s")
    def service_cidrsv4s(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The IPv4 private network address exposed by the service.
        """
        return pulumi.get(self, "service_cidrsv4s")

    @service_cidrsv4s.setter
    def service_cidrsv4s(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "service_cidrsv4s", value)


@pulumi.input_type
class ClustersStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        :param str phase: The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class NodePoolAutoScalingArgs:
    def __init__(__self__, *,
                 desired_replicas: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 min_replicas: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] desired_replicas: The DesiredReplicas of AutoScaling.
        :param pulumi.Input[bool] enabled: Is Enabled of AutoScaling.
        :param pulumi.Input[int] max_replicas: The MaxReplicas of AutoScaling.
        :param pulumi.Input[int] min_replicas: The MinReplicas of AutoScaling.
        :param pulumi.Input[int] priority: The Priority of AutoScaling.
        """
        if desired_replicas is not None:
            pulumi.set(__self__, "desired_replicas", desired_replicas)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if min_replicas is not None:
            pulumi.set(__self__, "min_replicas", min_replicas)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="desiredReplicas")
    def desired_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The DesiredReplicas of AutoScaling.
        """
        return pulumi.get(self, "desired_replicas")

    @desired_replicas.setter
    def desired_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_replicas", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is Enabled of AutoScaling.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The MaxReplicas of AutoScaling.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        The MinReplicas of AutoScaling.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The Priority of AutoScaling.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class NodePoolKubernetesConfigArgs:
    def __init__(__self__, *,
                 cordon: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]] = None):
        """
        :param pulumi.Input[bool] cordon: The Cordon of KubernetesConfig.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]] labels: The Labels of KubernetesConfig.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]] taints: The Taints of KubernetesConfig.
        """
        if cordon is not None:
            pulumi.set(__self__, "cordon", cordon)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if taints is not None:
            pulumi.set(__self__, "taints", taints)

    @property
    @pulumi.getter
    def cordon(self) -> Optional[pulumi.Input[bool]]:
        """
        The Cordon of KubernetesConfig.
        """
        return pulumi.get(self, "cordon")

    @cordon.setter
    def cordon(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cordon", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]]:
        """
        The Labels of KubernetesConfig.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]]:
        """
        The Taints of KubernetesConfig.
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolKubernetesConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class NodePoolKubernetesConfigLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The Key of Labels.
        :param pulumi.Input[str] value: The Value of Labels.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Labels.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Labels.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolKubernetesConfigTaintArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] effect: The Effect of Taints.
        :param pulumi.Input[str] key: The Key of Taints.
        :param pulumi.Input[str] value: The Value of Taints.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The Effect of Taints.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The Key of Taints.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The Value of Taints.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NodePoolNodeConfigArgs:
    def __init__(__self__, *,
                 additional_container_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 data_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]] = None,
                 initialize_script: Optional[pulumi.Input[str]] = None,
                 instance_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security: Optional[pulumi.Input['NodePoolNodeConfigSecurityArgs']] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_volume: Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']] = None):
        """
        :param pulumi.Input[bool] additional_container_storage_enabled: The AdditionalContainerStorageEnabled of NodeConfig.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]] data_volumes: The DataVolumes of NodeConfig.
        :param pulumi.Input[str] initialize_script: The initializeScript of NodeConfig.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_type_ids: The InstanceTypeIds of NodeConfig.
        :param pulumi.Input['NodePoolNodeConfigSecurityArgs'] security: The Security of NodeConfig.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: The SubnetIds of NodeConfig.
        :param pulumi.Input['NodePoolNodeConfigSystemVolumeArgs'] system_volume: The SystemVolume of NodeConfig.
        """
        if additional_container_storage_enabled is not None:
            pulumi.set(__self__, "additional_container_storage_enabled", additional_container_storage_enabled)
        if data_volumes is not None:
            pulumi.set(__self__, "data_volumes", data_volumes)
        if initialize_script is not None:
            pulumi.set(__self__, "initialize_script", initialize_script)
        if instance_type_ids is not None:
            pulumi.set(__self__, "instance_type_ids", instance_type_ids)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if system_volume is not None:
            pulumi.set(__self__, "system_volume", system_volume)

    @property
    @pulumi.getter(name="additionalContainerStorageEnabled")
    def additional_container_storage_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The AdditionalContainerStorageEnabled of NodeConfig.
        """
        return pulumi.get(self, "additional_container_storage_enabled")

    @additional_container_storage_enabled.setter
    def additional_container_storage_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "additional_container_storage_enabled", value)

    @property
    @pulumi.getter(name="dataVolumes")
    def data_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]]:
        """
        The DataVolumes of NodeConfig.
        """
        return pulumi.get(self, "data_volumes")

    @data_volumes.setter
    def data_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeConfigDataVolumeArgs']]]]):
        pulumi.set(self, "data_volumes", value)

    @property
    @pulumi.getter(name="initializeScript")
    def initialize_script(self) -> Optional[pulumi.Input[str]]:
        """
        The initializeScript of NodeConfig.
        """
        return pulumi.get(self, "initialize_script")

    @initialize_script.setter
    def initialize_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initialize_script", value)

    @property
    @pulumi.getter(name="instanceTypeIds")
    def instance_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The InstanceTypeIds of NodeConfig.
        """
        return pulumi.get(self, "instance_type_ids")

    @instance_type_ids.setter
    def instance_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_type_ids", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['NodePoolNodeConfigSecurityArgs']]:
        """
        The Security of NodeConfig.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['NodePoolNodeConfigSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SubnetIds of NodeConfig.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="systemVolume")
    def system_volume(self) -> Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']]:
        """
        The SystemVolume of NodeConfig.
        """
        return pulumi.get(self, "system_volume")

    @system_volume.setter
    def system_volume(self, value: Optional[pulumi.Input['NodePoolNodeConfigSystemVolumeArgs']]):
        pulumi.set(self, "system_volume", value)


@pulumi.input_type
class NodePoolNodeConfigDataVolumeArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: The Size of DataVolumes.
        :param pulumi.Input[str] type: The Type of DataVolumes.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The Size of DataVolumes.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The Type of DataVolumes.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NodePoolNodeConfigSecurityArgs:
    def __init__(__self__, *,
                 login: Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['NodePoolNodeConfigSecurityLoginArgs'] login: The Login of Security.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The SecurityGroupIds of Security.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_strategies: The SecurityStrategies of Security.
        """
        if login is not None:
            pulumi.set(__self__, "login", login)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_strategies is not None:
            pulumi.set(__self__, "security_strategies", security_strategies)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']]:
        """
        The Login of Security.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input['NodePoolNodeConfigSecurityLoginArgs']]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SecurityGroupIds of Security.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityStrategies")
    def security_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SecurityStrategies of Security.
        """
        return pulumi.get(self, "security_strategies")

    @security_strategies.setter
    def security_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_strategies", value)


@pulumi.input_type
class NodePoolNodeConfigSecurityLoginArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 ssh_key_pair_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: The Password of Security.
        :param pulumi.Input[str] ssh_key_pair_name: The SshKeyPairName of Security.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssh_key_pair_name is not None:
            pulumi.set(__self__, "ssh_key_pair_name", ssh_key_pair_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The Password of Security.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sshKeyPairName")
    def ssh_key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SshKeyPairName of Security.
        """
        return pulumi.get(self, "ssh_key_pair_name")

    @ssh_key_pair_name.setter
    def ssh_key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_pair_name", value)


@pulumi.input_type
class NodePoolNodeConfigSystemVolumeArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] size: The Size of SystemVolume.
        :param pulumi.Input[str] type: The Type of SystemVolume.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The Size of SystemVolume.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The Type of SystemVolume.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NodePoolStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[pulumi.Input[str]] = None,
                 phase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] conditions_type: Indicates the status condition of the node pool in the active state.
        :param pulumi.Input[str] phase: The Phase of Status.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the status condition of the node pool in the active state.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class NodePoolsStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: Indicates the status condition of the node pool in the active state.
        :param str phase: The Phase of Status.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        Indicates the status condition of the node pool in the active state.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Status.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


@pulumi.input_type
class NodesStatusArgs:
    def __init__(__self__, *,
                 conditions_type: Optional[str] = None,
                 phase: Optional[str] = None):
        """
        :param str conditions_type: The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        :param str phase: The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        """
        if conditions_type is not None:
            pulumi.set(__self__, "conditions_type", conditions_type)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter(name="conditionsType")
    def conditions_type(self) -> Optional[str]:
        """
        The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
        """
        return pulumi.get(self, "conditions_type")

    @conditions_type.setter
    def conditions_type(self, value: Optional[str]):
        pulumi.set(self, "conditions_type", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        """
        The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[str]):
        pulumi.set(self, "phase", value)


