# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolArgs', 'NodePool']

@pulumi.input_type
class NodePoolArgs:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['NodePoolAutoScalingArgs']] = None,
                 auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_config: Optional[pulumi.Input['NodePoolKubernetesConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['NodePoolNodeConfigArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]] = None):
        """
        The set of arguments for constructing a NodePool resource.
        :param pulumi.Input['NodePoolAutoScalingArgs'] auto_scaling: The node pool elastic scaling configuration information.
        :param pulumi.Input[bool] auto_scaling_enabled: Is enabled of AutoScaling.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_ids: The ClusterIds of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: The IDs of NodePool.
        :param pulumi.Input['NodePoolKubernetesConfigArgs'] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input['NodePoolNodeConfigArgs'] node_config: The Config of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]] statuses: The Status of NodePool.
        """
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if auto_scaling_enabled is not None:
            pulumi.set(__self__, "auto_scaling_enabled", auto_scaling_enabled)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if kubernetes_config is not None:
            pulumi.set(__self__, "kubernetes_config", kubernetes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['NodePoolAutoScalingArgs']]:
        """
        The node pool elastic scaling configuration information.
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['NodePoolAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter(name="autoScalingEnabled")
    def auto_scaling_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is enabled of AutoScaling.
        """
        return pulumi.get(self, "auto_scaling_enabled")

    @auto_scaling_enabled.setter
    def auto_scaling_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scaling_enabled", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ClusterIds of NodePool.
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of NodePool.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> Optional[pulumi.Input['NodePoolKubernetesConfigArgs']]:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @kubernetes_config.setter
    def kubernetes_config(self, value: Optional[pulumi.Input['NodePoolKubernetesConfigArgs']]):
        pulumi.set(self, "kubernetes_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['NodePoolNodeConfigArgs']]:
        """
        The Config of NodePool.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['NodePoolNodeConfigArgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]]:
        """
        The Status of NodePool.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
class _NodePoolState:
    def __init__(__self__, *,
                 auto_scaling: Optional[pulumi.Input['NodePoolAutoScalingArgs']] = None,
                 auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 create_client_token: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_config: Optional[pulumi.Input['NodePoolKubernetesConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['NodePoolNodeConfigArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]] = None,
                 update_client_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NodePool resources.
        :param pulumi.Input['NodePoolAutoScalingArgs'] auto_scaling: The node pool elastic scaling configuration information.
        :param pulumi.Input[bool] auto_scaling_enabled: Is enabled of AutoScaling.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_ids: The ClusterIds of NodePool.
        :param pulumi.Input[str] create_client_token: The CreateClientToken of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: The IDs of NodePool.
        :param pulumi.Input['NodePoolKubernetesConfigArgs'] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input['NodePoolNodeConfigArgs'] node_config: The Config of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]] statuses: The Status of NodePool.
        :param pulumi.Input[str] update_client_token: The UpdateClientToken of NodePool.
        """
        if auto_scaling is not None:
            pulumi.set(__self__, "auto_scaling", auto_scaling)
        if auto_scaling_enabled is not None:
            pulumi.set(__self__, "auto_scaling_enabled", auto_scaling_enabled)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if create_client_token is not None:
            pulumi.set(__self__, "create_client_token", create_client_token)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)
        if kubernetes_config is not None:
            pulumi.set(__self__, "kubernetes_config", kubernetes_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)
        if update_client_token is not None:
            pulumi.set(__self__, "update_client_token", update_client_token)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> Optional[pulumi.Input['NodePoolAutoScalingArgs']]:
        """
        The node pool elastic scaling configuration information.
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: Optional[pulumi.Input['NodePoolAutoScalingArgs']]):
        pulumi.set(self, "auto_scaling", value)

    @property
    @pulumi.getter(name="autoScalingEnabled")
    def auto_scaling_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is enabled of AutoScaling.
        """
        return pulumi.get(self, "auto_scaling_enabled")

    @auto_scaling_enabled.setter
    def auto_scaling_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_scaling_enabled", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ClusterIds of NodePool.
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The CreateClientToken of NodePool.
        """
        return pulumi.get(self, "create_client_token")

    @create_client_token.setter
    def create_client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_client_token", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IDs of NodePool.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> Optional[pulumi.Input['NodePoolKubernetesConfigArgs']]:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @kubernetes_config.setter
    def kubernetes_config(self, value: Optional[pulumi.Input['NodePoolKubernetesConfigArgs']]):
        pulumi.set(self, "kubernetes_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['NodePoolNodeConfigArgs']]:
        """
        The Config of NodePool.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['NodePoolNodeConfigArgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]]:
        """
        The Status of NodePool.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> Optional[pulumi.Input[str]]:
        """
        The UpdateClientToken of NodePool.
        """
        return pulumi.get(self, "update_client_token")

    @update_client_token.setter
    def update_client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_client_token", value)


class NodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingArgs']]] = None,
                 auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_config: Optional[pulumi.Input[pulumi.InputType['NodePoolKubernetesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolStatusArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to manage vke node pool
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        vke_test = volcengine.vke.NodePool("vkeTest",
            cluster_id="ccah01nnqtofnluts98j0",
            kubernetes_config=volcengine.vke.NodePoolKubernetesConfigArgs(
                labels=[
                    volcengine.vke.NodePoolKubernetesConfigLabelArgs(
                        key="aa",
                        value="bb",
                    ),
                    volcengine.vke.NodePoolKubernetesConfigLabelArgs(
                        key="cccc",
                        value="dddd",
                    ),
                ],
            ),
            node_config=volcengine.vke.NodePoolNodeConfigArgs(
                data_volumes=[volcengine.vke.NodePoolNodeConfigDataVolumeArgs(
                    size=60,
                    type="ESSD_PL0",
                )],
                instance_type_ids=["ecs.r1.large"],
                security=volcengine.vke.NodePoolNodeConfigSecurityArgs(
                    login=volcengine.vke.NodePoolNodeConfigSecurityLoginArgs(
                        password="UHdkMTIzNDU2",
                    ),
                ),
                subnet_ids=["subnet-3recgzi7hfim85zsk2i8l9ve7"],
            ))
        ```

        ## Import

        NodePool can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:Vke/nodePool:NodePool default pcabe57vqtofgrbln3dp0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NodePoolAutoScalingArgs']] auto_scaling: The node pool elastic scaling configuration information.
        :param pulumi.Input[bool] auto_scaling_enabled: Is enabled of AutoScaling.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_ids: The ClusterIds of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: The IDs of NodePool.
        :param pulumi.Input[pulumi.InputType['NodePoolKubernetesConfigArgs']] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']] node_config: The Config of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolStatusArgs']]]] statuses: The Status of NodePool.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NodePoolArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to manage vke node pool
        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcengine as volcengine

        vke_test = volcengine.vke.NodePool("vkeTest",
            cluster_id="ccah01nnqtofnluts98j0",
            kubernetes_config=volcengine.vke.NodePoolKubernetesConfigArgs(
                labels=[
                    volcengine.vke.NodePoolKubernetesConfigLabelArgs(
                        key="aa",
                        value="bb",
                    ),
                    volcengine.vke.NodePoolKubernetesConfigLabelArgs(
                        key="cccc",
                        value="dddd",
                    ),
                ],
            ),
            node_config=volcengine.vke.NodePoolNodeConfigArgs(
                data_volumes=[volcengine.vke.NodePoolNodeConfigDataVolumeArgs(
                    size=60,
                    type="ESSD_PL0",
                )],
                instance_type_ids=["ecs.r1.large"],
                security=volcengine.vke.NodePoolNodeConfigSecurityArgs(
                    login=volcengine.vke.NodePoolNodeConfigSecurityLoginArgs(
                        password="UHdkMTIzNDU2",
                    ),
                ),
                subnet_ids=["subnet-3recgzi7hfim85zsk2i8l9ve7"],
            ))
        ```

        ## Import

        NodePool can be imported using the id, e.g.

        ```sh
         $ pulumi import volcengine:Vke/nodePool:NodePool default pcabe57vqtofgrbln3dp0
        ```

        :param str resource_name: The name of the resource.
        :param NodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingArgs']]] = None,
                 auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubernetes_config: Optional[pulumi.Input[pulumi.InputType['NodePoolKubernetesConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolStatusArgs']]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolArgs.__new__(NodePoolArgs)

            __props__.__dict__["auto_scaling"] = auto_scaling
            __props__.__dict__["auto_scaling_enabled"] = auto_scaling_enabled
            __props__.__dict__["client_token"] = client_token
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cluster_ids"] = cluster_ids
            __props__.__dict__["ids"] = ids
            __props__.__dict__["kubernetes_config"] = kubernetes_config
            __props__.__dict__["name"] = name
            __props__.__dict__["node_config"] = node_config
            __props__.__dict__["statuses"] = statuses
            __props__.__dict__["create_client_token"] = None
            __props__.__dict__["update_client_token"] = None
        super(NodePool, __self__).__init__(
            'volcengine:Vke/nodePool:NodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scaling: Optional[pulumi.Input[pulumi.InputType['NodePoolAutoScalingArgs']]] = None,
            auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            create_client_token: Optional[pulumi.Input[str]] = None,
            ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            kubernetes_config: Optional[pulumi.Input[pulumi.InputType['NodePoolKubernetesConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_config: Optional[pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolStatusArgs']]]]] = None,
            update_client_token: Optional[pulumi.Input[str]] = None) -> 'NodePool':
        """
        Get an existing NodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['NodePoolAutoScalingArgs']] auto_scaling: The node pool elastic scaling configuration information.
        :param pulumi.Input[bool] auto_scaling_enabled: Is enabled of AutoScaling.
        :param pulumi.Input[str] client_token: The ClientToken of NodePool.
        :param pulumi.Input[str] cluster_id: The ClusterId of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_ids: The ClusterIds of NodePool.
        :param pulumi.Input[str] create_client_token: The CreateClientToken of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: The IDs of NodePool.
        :param pulumi.Input[pulumi.InputType['NodePoolKubernetesConfigArgs']] kubernetes_config: The KubernetesConfig of NodeConfig.
        :param pulumi.Input[str] name: The Name of NodePool.
        :param pulumi.Input[pulumi.InputType['NodePoolNodeConfigArgs']] node_config: The Config of NodePool.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolStatusArgs']]]] statuses: The Status of NodePool.
        :param pulumi.Input[str] update_client_token: The UpdateClientToken of NodePool.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolState.__new__(_NodePoolState)

        __props__.__dict__["auto_scaling"] = auto_scaling
        __props__.__dict__["auto_scaling_enabled"] = auto_scaling_enabled
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_ids"] = cluster_ids
        __props__.__dict__["create_client_token"] = create_client_token
        __props__.__dict__["ids"] = ids
        __props__.__dict__["kubernetes_config"] = kubernetes_config
        __props__.__dict__["name"] = name
        __props__.__dict__["node_config"] = node_config
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["update_client_token"] = update_client_token
        return NodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> pulumi.Output[Optional['outputs.NodePoolAutoScaling']]:
        """
        The node pool elastic scaling configuration information.
        """
        return pulumi.get(self, "auto_scaling")

    @property
    @pulumi.getter(name="autoScalingEnabled")
    def auto_scaling_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Is enabled of AutoScaling.
        """
        return pulumi.get(self, "auto_scaling_enabled")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[Optional[str]]:
        """
        The ClientToken of NodePool.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ClusterId of NodePool.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The ClusterIds of NodePool.
        """
        return pulumi.get(self, "cluster_ids")

    @property
    @pulumi.getter(name="createClientToken")
    def create_client_token(self) -> pulumi.Output[str]:
        """
        The CreateClientToken of NodePool.
        """
        return pulumi.get(self, "create_client_token")

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IDs of NodePool.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="kubernetesConfig")
    def kubernetes_config(self) -> pulumi.Output[Optional['outputs.NodePoolKubernetesConfig']]:
        """
        The KubernetesConfig of NodeConfig.
        """
        return pulumi.get(self, "kubernetes_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of NodePool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> pulumi.Output[Optional['outputs.NodePoolNodeConfig']]:
        """
        The Config of NodePool.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolStatus']]]:
        """
        The Status of NodePool.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="updateClientToken")
    def update_client_token(self) -> pulumi.Output[str]:
        """
        The UpdateClientToken of NodePool.
        """
        return pulumi.get(self, "update_client_token")

