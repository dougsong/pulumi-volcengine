# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AclAclEntry',
    'AclsAclResult',
    'CertificatesCertificateResult',
    'GatewaysNatGatewayResult',
    'GatewaysNatGatewayEipAddressResult',
    'NetworkInterfacesNetworkInterfaceResult',
    'RouteEntriesRouteEntryResult',
    'RouteTablesRouteTableResult',
    'SecurityGroupsSecurityGroupResult',
    'SnatEntriesSnatEntryResult',
    'SubnetsSubnetResult',
    'VpcAssociateCen',
    'VpcsVpcResult',
    'VpcsVpcAssociateCenResult',
    'ZonesZoneResult',
]

@pulumi.output_type
class AclAclEntry(dict):
    def __init__(__self__, *,
                 entry: str,
                 description: Optional[str] = None):
        """
        :param str entry: The content of the AclEntry.
        :param str description: The description of the AclEntry.
        """
        pulumi.set(__self__, "entry", entry)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def entry(self) -> str:
        """
        The content of the AclEntry.
        """
        return pulumi.get(self, "entry")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the AclEntry.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class AclsAclResult(dict):
    def __init__(__self__, *,
                 acl_entry_count: int,
                 acl_id: str,
                 acl_name: str,
                 create_time: str,
                 description: str,
                 id: str,
                 listeners: Sequence[str],
                 update_time: str):
        """
        :param int acl_entry_count: The count of acl entry.
        :param str acl_id: The ID of Acl.
        :param str acl_name: The name of acl.
        :param str create_time: Creation time of Acl.
        :param str description: The description of Acl.
        :param str id: The ID of Acl.
        :param Sequence[str] listeners: The listeners of Acl.
        :param str update_time: Update time of Acl.
        """
        pulumi.set(__self__, "acl_entry_count", acl_entry_count)
        pulumi.set(__self__, "acl_id", acl_id)
        pulumi.set(__self__, "acl_name", acl_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="aclEntryCount")
    def acl_entry_count(self) -> int:
        """
        The count of acl entry.
        """
        return pulumi.get(self, "acl_entry_count")

    @property
    @pulumi.getter(name="aclId")
    def acl_id(self) -> str:
        """
        The ID of Acl.
        """
        return pulumi.get(self, "acl_id")

    @property
    @pulumi.getter(name="aclName")
    def acl_name(self) -> str:
        """
        The name of acl.
        """
        return pulumi.get(self, "acl_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of Acl.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Acl.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Acl.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence[str]:
        """
        The listeners of Acl.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time of Acl.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class CertificatesCertificateResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 certificate_name: str,
                 create_time: str,
                 description: str,
                 domain_name: str,
                 expired_at: str,
                 id: str,
                 listeners: Sequence[str]):
        """
        :param str certificate_id: The ID of the Certificate.
        :param str certificate_name: The name of the Certificate.
        :param str create_time: The create time of the Certificate.
        :param str description: The description of the Certificate.
        :param str domain_name: The domain name of the Certificate.
        :param str expired_at: The expire time of the Certificate.
        :param str id: The ID of the Certificate.
        :param Sequence[str] listeners: The ID list of the Listener.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_name", certificate_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listeners", listeners)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        The ID of the Certificate.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> str:
        """
        The name of the Certificate.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of the Certificate.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Certificate.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        The domain name of the Certificate.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> str:
        """
        The expire time of the Certificate.
        """
        return pulumi.get(self, "expired_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Certificate.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence[str]:
        """
        The ID list of the Listener.
        """
        return pulumi.get(self, "listeners")


@pulumi.output_type
class GatewaysNatGatewayResult(dict):
    def __init__(__self__, *,
                 billing_type: str,
                 business_status: str,
                 creation_time: str,
                 deleted_time: str,
                 description: str,
                 eip_addresses: Sequence['outputs.GatewaysNatGatewayEipAddressResult'],
                 id: str,
                 lock_reason: str,
                 nat_gateway_id: str,
                 nat_gateway_name: str,
                 network_interface_id: str,
                 overdue_time: str,
                 spec: str,
                 status: str,
                 subnet_id: str,
                 updated_at: str,
                 vpc_id: str):
        """
        :param str billing_type: The billing type of the NatGateway.
        :param str business_status: Whether the NatGateway is locked.
        :param str creation_time: The creation time of the NatGateway.
        :param str deleted_time: The deleted time of the NatGateway.
        :param str description: The description of the NatGateway.
        :param Sequence['GatewaysNatGatewayEipAddressArgs'] eip_addresses: The eip addresses of the NatGateway.
        :param str id: The ID of the NatGateway.
        :param str lock_reason: The reason why locking NatGateway.
        :param str nat_gateway_id: The ID of the NatGateway.
        :param str nat_gateway_name: The name of the NatGateway.
        :param str network_interface_id: The ID of the network interface.
        :param str overdue_time: The overdue time of the NatGateway.
        :param str spec: The specification of the NatGateway.
        :param str status: The status of the NatGateway.
        :param str subnet_id: The id of the Subnet.
        :param str updated_at: The update time of the NatGateway.
        :param str vpc_id: The id of the VPC.
        """
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "business_status", business_status)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "deleted_time", deleted_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "eip_addresses", eip_addresses)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lock_reason", lock_reason)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "nat_gateway_name", nat_gateway_name)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "overdue_time", overdue_time)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        The billing type of the NatGateway.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> str:
        """
        Whether the NatGateway is locked.
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of the NatGateway.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> str:
        """
        The deleted time of the NatGateway.
        """
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the NatGateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eipAddresses")
    def eip_addresses(self) -> Sequence['outputs.GatewaysNatGatewayEipAddressResult']:
        """
        The eip addresses of the NatGateway.
        """
        return pulumi.get(self, "eip_addresses")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the NatGateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> str:
        """
        The reason why locking NatGateway.
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> str:
        """
        The ID of the NatGateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="natGatewayName")
    def nat_gateway_name(self) -> str:
        """
        The name of the NatGateway.
        """
        return pulumi.get(self, "nat_gateway_name")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The ID of the network interface.
        """
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> str:
        """
        The overdue time of the NatGateway.
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        The specification of the NatGateway.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the NatGateway.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The id of the Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The update time of the NatGateway.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GatewaysNatGatewayEipAddressResult(dict):
    def __init__(__self__, *,
                 allocation_id: str,
                 eip_address: str,
                 using_status: str):
        """
        :param str allocation_id: The ID of Eip.
        :param str eip_address: The address of Eip.
        :param str using_status: The using status of Eip.
        """
        pulumi.set(__self__, "allocation_id", allocation_id)
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "using_status", using_status)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> str:
        """
        The ID of Eip.
        """
        return pulumi.get(self, "allocation_id")

    @property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> str:
        """
        The address of Eip.
        """
        return pulumi.get(self, "eip_address")

    @property
    @pulumi.getter(name="usingStatus")
    def using_status(self) -> str:
        """
        The using status of Eip.
        """
        return pulumi.get(self, "using_status")


@pulumi.output_type
class NetworkInterfacesNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 associated_elastic_ip_address: str,
                 associated_elastic_ip_id: str,
                 created_at: str,
                 description: str,
                 device_id: str,
                 id: str,
                 mac_address: str,
                 network_interface_id: str,
                 network_interface_name: str,
                 port_security_enabled: bool,
                 primary_ip_address: str,
                 security_group_ids: Sequence[str],
                 status: str,
                 subnet_id: str,
                 type: str,
                 updated_at: str,
                 vpc_id: str,
                 vpc_name: str,
                 zone_id: str):
        """
        :param str account_id: The account id of the ENI creator.
        :param str associated_elastic_ip_address: The IP address of the EIP to which the ENI associates.
        :param str associated_elastic_ip_id: The allocation id of the EIP to which the ENI associates.
        :param str created_at: The create time of the ENI.
        :param str description: The description of the ENI.
        :param str device_id: The id of the device to which the ENI is bound.
        :param str id: The id of the ENI.
        :param str mac_address: The mac address of the ENI.
        :param str network_interface_id: The id of the ENI.
        :param str network_interface_name: A name of ENI.
        :param bool port_security_enabled: The enable of port security.
        :param str primary_ip_address: The primary IP address of the ENI.
        :param Sequence[str] security_group_ids: The list of the security group id to which the secondary ENI belongs.
        :param str status: A status of ENI.
        :param str subnet_id: An id of the subnet to which the ENI is connected.
        :param str type: A type of ENI.
        :param str updated_at: The last update time of the ENI.
        :param str vpc_id: An id of the virtual private cloud (VPC) to which the ENI belongs.
        :param str vpc_name: The name of the virtual private cloud (VPC) to which the ENI belongs.
        :param str zone_id: The zone id of the ENI.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "associated_elastic_ip_address", associated_elastic_ip_address)
        pulumi.set(__self__, "associated_elastic_ip_id", associated_elastic_ip_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        pulumi.set(__self__, "network_interface_name", network_interface_name)
        pulumi.set(__self__, "port_security_enabled", port_security_enabled)
        pulumi.set(__self__, "primary_ip_address", primary_ip_address)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the ENI creator.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associatedElasticIpAddress")
    def associated_elastic_ip_address(self) -> str:
        """
        The IP address of the EIP to which the ENI associates.
        """
        return pulumi.get(self, "associated_elastic_ip_address")

    @property
    @pulumi.getter(name="associatedElasticIpId")
    def associated_elastic_ip_id(self) -> str:
        """
        The allocation id of the EIP to which the ENI associates.
        """
        return pulumi.get(self, "associated_elastic_ip_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The create time of the ENI.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the ENI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        The id of the device to which the ENI is bound.
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the ENI.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        The mac address of the ENI.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> str:
        """
        The id of the ENI.
        """
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="networkInterfaceName")
    def network_interface_name(self) -> str:
        """
        A name of ENI.
        """
        return pulumi.get(self, "network_interface_name")

    @property
    @pulumi.getter(name="portSecurityEnabled")
    def port_security_enabled(self) -> bool:
        """
        The enable of port security.
        """
        return pulumi.get(self, "port_security_enabled")

    @property
    @pulumi.getter(name="primaryIpAddress")
    def primary_ip_address(self) -> str:
        """
        The primary IP address of the ENI.
        """
        return pulumi.get(self, "primary_ip_address")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The list of the security group id to which the secondary ENI belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        A status of ENI.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        An id of the subnet to which the ENI is connected.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A type of ENI.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The last update time of the ENI.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        An id of the virtual private cloud (VPC) to which the ENI belongs.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        The name of the virtual private cloud (VPC) to which the ENI belongs.
        """
        return pulumi.get(self, "vpc_name")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of the ENI.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class RouteEntriesRouteEntryResult(dict):
    def __init__(__self__, *,
                 description: str,
                 destination_cidr_block: str,
                 id: str,
                 next_hop_id: str,
                 next_hop_name: str,
                 next_hop_type: str,
                 route_entry_id: str,
                 route_entry_name: str,
                 route_table_id: str,
                 status: str,
                 type: str,
                 vpc_id: str):
        """
        :param str description: The description of the route entry.
        :param str destination_cidr_block: A destination CIDR block of route entry.
        :param str id: The id of the route entry.
        :param str next_hop_id: An id of next hop.
        :param str next_hop_name: The name of the next hop.
        :param str next_hop_type: A type of next hop.
        :param str route_entry_id: The id of the route entry.
        :param str route_entry_name: A name of route entry.
        :param str route_table_id: An id of route table.
        :param str status: The status of the route entry.
        :param str type: The type of the route entry.
        :param str vpc_id: The id of the virtual private cloud (VPC) to which the route entry belongs.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "next_hop_id", next_hop_id)
        pulumi.set(__self__, "next_hop_name", next_hop_name)
        pulumi.set(__self__, "next_hop_type", next_hop_type)
        pulumi.set(__self__, "route_entry_id", route_entry_id)
        pulumi.set(__self__, "route_entry_name", route_entry_name)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the route entry.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> str:
        """
        A destination CIDR block of route entry.
        """
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the route entry.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nextHopId")
    def next_hop_id(self) -> str:
        """
        An id of next hop.
        """
        return pulumi.get(self, "next_hop_id")

    @property
    @pulumi.getter(name="nextHopName")
    def next_hop_name(self) -> str:
        """
        The name of the next hop.
        """
        return pulumi.get(self, "next_hop_name")

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> str:
        """
        A type of next hop.
        """
        return pulumi.get(self, "next_hop_type")

    @property
    @pulumi.getter(name="routeEntryId")
    def route_entry_id(self) -> str:
        """
        The id of the route entry.
        """
        return pulumi.get(self, "route_entry_id")

    @property
    @pulumi.getter(name="routeEntryName")
    def route_entry_name(self) -> str:
        """
        A name of route entry.
        """
        return pulumi.get(self, "route_entry_name")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        """
        An id of route table.
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the route entry.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the route entry.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the virtual private cloud (VPC) to which the route entry belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class RouteTablesRouteTableResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 creation_time: str,
                 description: str,
                 id: str,
                 route_table_id: str,
                 route_table_name: str,
                 route_table_type: str,
                 subnet_ids: Sequence[str],
                 update_time: str,
                 vpc_id: str,
                 vpc_name: str):
        """
        :param str account_id: The account id of the route table creator.
        :param str creation_time: The create time of the route table.
        :param str description: The description of the route table.
        :param str id: The id of the route table.
        :param str route_table_id: The id of the route table.
        :param str route_table_name: A name of route table.
        :param str route_table_type: The type of the route table.
        :param Sequence[str] subnet_ids: The list of the subnet ids to which the entry table associates.
        :param str update_time: The last update time of the route table.
        :param str vpc_id: An id of VPC.
        :param str vpc_name: The name of the virtual private cloud (VPC) to which the route entry belongs.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_name", route_table_name)
        pulumi.set(__self__, "route_table_type", route_table_type)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account id of the route table creator.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time of the route table.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the route table.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the route table.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        """
        The id of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableName")
    def route_table_name(self) -> str:
        """
        A name of route table.
        """
        return pulumi.get(self, "route_table_name")

    @property
    @pulumi.getter(name="routeTableType")
    def route_table_type(self) -> str:
        """
        The type of the route table.
        """
        return pulumi.get(self, "route_table_type")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The list of the subnet ids to which the entry table associates.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The last update time of the route table.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        An id of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        The name of the virtual private cloud (VPC) to which the route entry belongs.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class SecurityGroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 description: str,
                 id: str,
                 security_group_id: str,
                 security_group_name: str,
                 status: str,
                 type: str,
                 vpc_id: str):
        """
        :param str creation_time: The creation time of SecurityGroup.
        :param str description: The description of SecurityGroup.
        :param str id: The ID of SecurityGroup.
        :param str security_group_id: The ID of SecurityGroup.
        :param str security_group_name: The Name of SecurityGroup.
        :param str status: The Status of SecurityGroup.
        :param str type: A Name Regex of SecurityGroup.
        :param str vpc_id: The ID of Vpc.
        """
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The creation time of SecurityGroup.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of SecurityGroup.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of SecurityGroup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        The ID of SecurityGroup.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        The Name of SecurityGroup.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The Status of SecurityGroup.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        A Name Regex of SecurityGroup.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of Vpc.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class SnatEntriesSnatEntryResult(dict):
    def __init__(__self__, *,
                 eip_address: str,
                 eip_id: str,
                 id: str,
                 nat_gateway_id: str,
                 snat_entry_id: str,
                 snat_entry_name: str,
                 status: str,
                 subnet_id: str):
        """
        :param str eip_address: The public ip address used by the SNAT entry.
        :param str eip_id: An id of the public ip address used by the SNAT entry.
        :param str id: The id of the SNAT entry.
        :param str nat_gateway_id: An id of the nat gateway to which the entry belongs.
        :param str snat_entry_id: The id of the SNAT entry.
        :param str snat_entry_name: A name of SNAT entry.
        :param str status: The status of the SNAT entry.
        :param str subnet_id: An id of the subnet that is required to access the Internet.
        """
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "eip_id", eip_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "snat_entry_id", snat_entry_id)
        pulumi.set(__self__, "snat_entry_name", snat_entry_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> str:
        """
        The public ip address used by the SNAT entry.
        """
        return pulumi.get(self, "eip_address")

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> str:
        """
        An id of the public ip address used by the SNAT entry.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the SNAT entry.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> str:
        """
        An id of the nat gateway to which the entry belongs.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="snatEntryId")
    def snat_entry_id(self) -> str:
        """
        The id of the SNAT entry.
        """
        return pulumi.get(self, "snat_entry_id")

    @property
    @pulumi.getter(name="snatEntryName")
    def snat_entry_name(self) -> str:
        """
        A name of SNAT entry.
        """
        return pulumi.get(self, "snat_entry_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the SNAT entry.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        An id of the subnet that is required to access the Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class SubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 available_ip_address_count: int,
                 cidr_block: str,
                 creation_time: str,
                 description: str,
                 id: str,
                 route_table_id: str,
                 route_table_type: str,
                 status: str,
                 subnet_name: str,
                 total_ipv4_count: int,
                 update_time: str,
                 vpc_id: str,
                 zone_id: str):
        """
        :param int available_ip_address_count: The count of available ip address.
        :param str cidr_block: The cidr block of Subnet.
        :param str creation_time: Creation time of Subnet.
        :param str description: The description of Subnet.
        :param str id: The ID of Subnet.
        :param str route_table_id: The ID of route table.
        :param str route_table_type: The type of route table.
        :param str status: The Status of Subnet.
        :param str subnet_name: The Name of Subnet.
        :param int total_ipv4_count: The Count of ipv4.
        :param str update_time: Update time of Subnet.
        :param str vpc_id: The Vpc ID of Subnet.
        :param str zone_id: The ID of Zone.
        """
        pulumi.set(__self__, "available_ip_address_count", available_ip_address_count)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_type", route_table_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_name", subnet_name)
        pulumi.set(__self__, "total_ipv4_count", total_ipv4_count)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="availableIpAddressCount")
    def available_ip_address_count(self) -> int:
        """
        The count of available ip address.
        """
        return pulumi.get(self, "available_ip_address_count")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The cidr block of Subnet.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        Creation time of Subnet.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of Subnet.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of Subnet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        """
        The ID of route table.
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableType")
    def route_table_type(self) -> str:
        """
        The type of route table.
        """
        return pulumi.get(self, "route_table_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The Status of Subnet.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> str:
        """
        The Name of Subnet.
        """
        return pulumi.get(self, "subnet_name")

    @property
    @pulumi.getter(name="totalIpv4Count")
    def total_ipv4_count(self) -> int:
        """
        The Count of ipv4.
        """
        return pulumi.get(self, "total_ipv4_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time of Subnet.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The Vpc ID of Subnet.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The ID of Zone.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class VpcAssociateCen(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cenId":
            suggest = "cen_id"
        elif key == "cenOwnerId":
            suggest = "cen_owner_id"
        elif key == "cenStatus":
            suggest = "cen_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcAssociateCen. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcAssociateCen.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcAssociateCen.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cen_id: Optional[str] = None,
                 cen_owner_id: Optional[str] = None,
                 cen_status: Optional[str] = None):
        """
        :param str cen_id: The ID of CEN.
        :param str cen_owner_id: The owner ID of CEN.
        :param str cen_status: The status of CEN.
        """
        if cen_id is not None:
            pulumi.set(__self__, "cen_id", cen_id)
        if cen_owner_id is not None:
            pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        if cen_status is not None:
            pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> Optional[str]:
        """
        The ID of CEN.
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> Optional[str]:
        """
        The owner ID of CEN.
        """
        return pulumi.get(self, "cen_owner_id")

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> Optional[str]:
        """
        The status of CEN.
        """
        return pulumi.get(self, "cen_status")


@pulumi.output_type
class VpcsVpcResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 associate_cens: Sequence['outputs.VpcsVpcAssociateCenResult'],
                 auxiliary_cidr_blocks: Sequence[str],
                 cidr_block: str,
                 creation_time: str,
                 description: str,
                 dns_servers: Sequence[str],
                 nat_gateway_ids: Sequence[str],
                 route_table_ids: Sequence[str],
                 security_group_ids: Sequence[str],
                 status: str,
                 subnet_ids: Sequence[str],
                 update_time: str,
                 vpc_id: str,
                 vpc_name: str):
        """
        :param str account_id: The account ID of VPC.
        :param Sequence['VpcsVpcAssociateCenArgs'] associate_cens: The associate cen list of VPC.
        :param Sequence[str] auxiliary_cidr_blocks: The auxiliary cidr block list of VPC.
        :param str cidr_block: The cidr block of VPC.
        :param str creation_time: The create time of VPC.
        :param str description: The description of VPC.
        :param Sequence[str] dns_servers: The dns server list of VPC.
        :param Sequence[str] nat_gateway_ids: The nat gateway ID list of VPC.
        :param Sequence[str] route_table_ids: The route table ID list of VPC.
        :param Sequence[str] security_group_ids: The security group ID list of VPC.
        :param str status: The status of VPC.
        :param Sequence[str] subnet_ids: The subnet ID list of VPC.
        :param str update_time: The update time of VPC.
        :param str vpc_id: The ID of VPC.
        :param str vpc_name: The name of VPC.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "associate_cens", associate_cens)
        pulumi.set(__self__, "auxiliary_cidr_blocks", auxiliary_cidr_blocks)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "nat_gateway_ids", nat_gateway_ids)
        pulumi.set(__self__, "route_table_ids", route_table_ids)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account ID of VPC.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> Sequence['outputs.VpcsVpcAssociateCenResult']:
        """
        The associate cen list of VPC.
        """
        return pulumi.get(self, "associate_cens")

    @property
    @pulumi.getter(name="auxiliaryCidrBlocks")
    def auxiliary_cidr_blocks(self) -> Sequence[str]:
        """
        The auxiliary cidr block list of VPC.
        """
        return pulumi.get(self, "auxiliary_cidr_blocks")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        The cidr block of VPC.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The create time of VPC.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of VPC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence[str]:
        """
        The dns server list of VPC.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="natGatewayIds")
    def nat_gateway_ids(self) -> Sequence[str]:
        """
        The nat gateway ID list of VPC.
        """
        return pulumi.get(self, "nat_gateway_ids")

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Sequence[str]:
        """
        The route table ID list of VPC.
        """
        return pulumi.get(self, "route_table_ids")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The security group ID list of VPC.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of VPC.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The subnet ID list of VPC.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        The update time of VPC.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        """
        The name of VPC.
        """
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class VpcsVpcAssociateCenResult(dict):
    def __init__(__self__, *,
                 cen_id: str,
                 cen_owner_id: str,
                 cen_status: str):
        """
        :param str cen_id: The ID of CEN.
        :param str cen_owner_id: The owner ID of CEN.
        :param str cen_status: The status of CEN.
        """
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> str:
        """
        The ID of CEN.
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> str:
        """
        The owner ID of CEN.
        """
        return pulumi.get(self, "cen_owner_id")

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> str:
        """
        The status of CEN.
        """
        return pulumi.get(self, "cen_status")


@pulumi.output_type
class ZonesZoneResult(dict):
    def __init__(__self__, *,
                 id: str,
                 zone_id: str):
        """
        :param str id: The id of the zone.
        :param str zone_id: The id of the zone.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The id of the zone.
        """
        return pulumi.get(self, "zone_id")


