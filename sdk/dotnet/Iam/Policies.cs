// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Iam
{
    public static class Policies
    {
        /// <summary>
        /// Use this data source to query detailed information of iam policies
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Iam.Policies.InvokeAsync(new Volcengine.Iam.PoliciesArgs
        ///         {
        ///             Query = "AdministratorAccess",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<PoliciesResult> InvokeAsync(PoliciesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<PoliciesResult>("volcengine:Iam/policies:Policies", args ?? new PoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of iam policies
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Iam.Policies.InvokeAsync(new Volcengine.Iam.PoliciesArgs
        ///         {
        ///             Query = "AdministratorAccess",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<PoliciesResult> Invoke(PoliciesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<PoliciesResult>("volcengine:Iam/policies:Policies", args ?? new PoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class PoliciesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Policy.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Query policies, support policy name or description.
        /// </summary>
        [Input("query")]
        public string? Query { get; set; }

        /// <summary>
        /// The scope of the Policy.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public PoliciesArgs()
        {
        }
    }

    public sealed class PoliciesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Policy.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Query policies, support policy name or description.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The scope of the Policy.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PoliciesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class PoliciesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of Policy query.
        /// </summary>
        public readonly ImmutableArray<Outputs.PoliciesPolicyResult> Policies;
        public readonly string? Query;
        public readonly string? Scope;
        public readonly string? Status;
        /// <summary>
        /// The total count of Policy query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private PoliciesResult(
            string id,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.PoliciesPolicyResult> policies,

            string? query,

            string? scope,

            string? status,

            int totalCount)
        {
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Policies = policies;
            Query = query;
            Scope = scope;
            Status = status;
            TotalCount = totalCount;
        }
    }
}
