// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.PulumiPackage.Volcengine.Clb
{
    public static class Certificates
    {
        /// <summary>
        /// Use this data source to query detailed information of certificates
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Clb.Certificates.InvokeAsync(new Volcengine.Clb.CertificatesArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 "cert-274scdwqufwg07fap8u5fu8pi",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<CertificatesResult> InvokeAsync(CertificatesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<CertificatesResult>("volcengine:clb/certificates:Certificates", args ?? new CertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of certificates
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Clb.Certificates.InvokeAsync(new Volcengine.Clb.CertificatesArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 "cert-274scdwqufwg07fap8u5fu8pi",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<CertificatesResult> Invoke(CertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<CertificatesResult>("volcengine:clb/certificates:Certificates", args ?? new CertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class CertificatesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Certificate.
        /// </summary>
        [Input("certificateName")]
        public string? CertificateName { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// The list of Certificate IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name Regex of Certificate.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of Certificate.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("tags")]
        private List<Inputs.CertificatesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.CertificatesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.CertificatesTagArgs>());
            set => _tags = value;
        }

        public CertificatesArgs()
        {
        }
    }

    public sealed class CertificatesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Certificate.
        /// </summary>
        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// The list of Certificate IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name Regex of Certificate.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of Certificate.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.CertificatesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.CertificatesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.CertificatesTagInputArgs>());
            set => _tags = value;
        }

        public CertificatesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class CertificatesResult
    {
        /// <summary>
        /// The name of the Certificate.
        /// </summary>
        public readonly string? CertificateName;
        /// <summary>
        /// The collection of Certificate query.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificatesCertificateResult> Certificates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of the Certificate.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificatesTagResult> Tags;
        /// <summary>
        /// The total count of Certificate query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private CertificatesResult(
            string? certificateName,

            ImmutableArray<Outputs.CertificatesCertificateResult> certificates,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<Outputs.CertificatesTagResult> tags,

            int totalCount)
        {
            CertificateName = certificateName;
            Certificates = certificates;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            Tags = tags;
            TotalCount = totalCount;
        }
    }
}
