// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.PulumiPackage.Volcengine.Vke
{
    /// <summary>
    /// Provides a resource to manage vke node
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Volcengine.Vke.Node("foo", new Volcengine.Vke.NodeArgs
    ///         {
    ///             AdditionalContainerStorageEnabled = false,
    ///             ClusterId = "ccahbr0nqtofhiuuuajn0",
    ///             ContainerStoragePath = "",
    ///             InstanceId = "i-ybrfa2vu2t7grbv8qa0j",
    ///             KeepInstanceName = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// VKE node can be imported using the node id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vke/node:Node default nc5t5epmrsf****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vke/node:Node")]
    public partial class Node : Pulumi.CustomResource
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Output("additionalContainerStorageEnabled")]
        public Output<bool?> AdditionalContainerStorageEnabled { get; private set; } = null!;

        /// <summary>
        /// The client token.
        /// </summary>
        [Output("clientToken")]
        public Output<string> ClientToken { get; private set; } = null!;

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Output("containerStoragePath")]
        public Output<string> ContainerStoragePath { get; private set; } = null!;

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Output("initializeScript")]
        public Output<string?> InitializeScript { get; private set; } = null!;

        /// <summary>
        /// The instance id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Output("keepInstanceName")]
        public Output<bool?> KeepInstanceName { get; private set; } = null!;

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Output("kubernetesConfig")]
        public Output<Outputs.NodeKubernetesConfig?> KubernetesConfig { get; private set; } = null!;

        /// <summary>
        /// The node pool id.
        /// </summary>
        [Output("nodePoolId")]
        public Output<string> NodePoolId { get; private set; } = null!;


        /// <summary>
        /// Create a Node resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Node(string name, NodeArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vke/node:Node", name, args ?? new NodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Node(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vke/node:Node", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Node resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Node Get(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
        {
            return new Node(name, id, state, options);
        }
    }

    public sealed class NodeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Input("additionalContainerStorageEnabled")]
        public Input<bool>? AdditionalContainerStorageEnabled { get; set; }

        /// <summary>
        /// The client token.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Input("containerStoragePath")]
        public Input<string>? ContainerStoragePath { get; set; }

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Input("initializeScript")]
        public Input<string>? InitializeScript { get; set; }

        /// <summary>
        /// The instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.NodeKubernetesConfigArgs>? KubernetesConfig { get; set; }

        public NodeArgs()
        {
        }
    }

    public sealed class NodeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Input("additionalContainerStorageEnabled")]
        public Input<bool>? AdditionalContainerStorageEnabled { get; set; }

        /// <summary>
        /// The client token.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Input("containerStoragePath")]
        public Input<string>? ContainerStoragePath { get; set; }

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Input("initializeScript")]
        public Input<string>? InitializeScript { get; set; }

        /// <summary>
        /// The instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.NodeKubernetesConfigGetArgs>? KubernetesConfig { get; set; }

        /// <summary>
        /// The node pool id.
        /// </summary>
        [Input("nodePoolId")]
        public Input<string>? NodePoolId { get; set; }

        public NodeState()
        {
        }
    }
}
