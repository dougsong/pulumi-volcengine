// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    public static class KeyPairs
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs key pairs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Ecs.KeyPairs.InvokeAsync(new Volcengine.Ecs.KeyPairsArgs
        ///         {
        ///             KeyPairIds = 
        ///             {
        ///                 "kp-l8u16bn69r8ny0fz01oc",
        ///                 "kp-l8u1wc12n3a82ep2s1px",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<KeyPairsResult> InvokeAsync(KeyPairsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<KeyPairsResult>("volcengine:ecs/keyPairs:KeyPairs", args ?? new KeyPairsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs key pairs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Ecs.KeyPairs.InvokeAsync(new Volcengine.Ecs.KeyPairsArgs
        ///         {
        ///             KeyPairIds = 
        ///             {
        ///                 "kp-l8u16bn69r8ny0fz01oc",
        ///                 "kp-l8u1wc12n3a82ep2s1px",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<KeyPairsResult> Invoke(KeyPairsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<KeyPairsResult>("volcengine:ecs/keyPairs:KeyPairs", args ?? new KeyPairsInvokeArgs(), options.WithDefaults());
    }


    public sealed class KeyPairsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The finger print info.
        /// </summary>
        [Input("fingerPrint")]
        public string? FingerPrint { get; set; }

        [Input("keyPairIds")]
        private List<string>? _keyPairIds;

        /// <summary>
        /// Ids of key pair.
        /// </summary>
        public List<string> KeyPairIds
        {
            get => _keyPairIds ?? (_keyPairIds = new List<string>());
            set => _keyPairIds = value;
        }

        /// <summary>
        /// Name of key pair.
        /// </summary>
        [Input("keyPairName")]
        public string? KeyPairName { get; set; }

        [Input("keyPairNames")]
        private List<string>? _keyPairNames;

        /// <summary>
        /// Key pair names info.
        /// </summary>
        public List<string> KeyPairNames
        {
            get => _keyPairNames ?? (_keyPairNames = new List<string>());
            set => _keyPairNames = value;
        }

        /// <summary>
        /// A Name Regex of ECS key pairs.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public KeyPairsArgs()
        {
        }
    }

    public sealed class KeyPairsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The finger print info.
        /// </summary>
        [Input("fingerPrint")]
        public Input<string>? FingerPrint { get; set; }

        [Input("keyPairIds")]
        private InputList<string>? _keyPairIds;

        /// <summary>
        /// Ids of key pair.
        /// </summary>
        public InputList<string> KeyPairIds
        {
            get => _keyPairIds ?? (_keyPairIds = new InputList<string>());
            set => _keyPairIds = value;
        }

        /// <summary>
        /// Name of key pair.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        [Input("keyPairNames")]
        private InputList<string>? _keyPairNames;

        /// <summary>
        /// Key pair names info.
        /// </summary>
        public InputList<string> KeyPairNames
        {
            get => _keyPairNames ?? (_keyPairNames = new InputList<string>());
            set => _keyPairNames = value;
        }

        /// <summary>
        /// A Name Regex of ECS key pairs.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public KeyPairsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class KeyPairsResult
    {
        /// <summary>
        /// The finger print info.
        /// </summary>
        public readonly string? FingerPrint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> KeyPairIds;
        /// <summary>
        /// The name of key pair.
        /// </summary>
        public readonly string? KeyPairName;
        public readonly ImmutableArray<string> KeyPairNames;
        /// <summary>
        /// The target query key pairs info.
        /// </summary>
        public readonly ImmutableArray<Outputs.KeyPairsKeyPairResult> KeyPairs;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of ECS key pair query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private KeyPairsResult(
            string? fingerPrint,

            string id,

            ImmutableArray<string> keyPairIds,

            string? keyPairName,

            ImmutableArray<string> keyPairNames,

            ImmutableArray<Outputs.KeyPairsKeyPairResult> keyPairs,

            string? nameRegex,

            string? outputFile,

            int totalCount)
        {
            FingerPrint = fingerPrint;
            Id = id;
            KeyPairIds = keyPairIds;
            KeyPairName = keyPairName;
            KeyPairNames = keyPairNames;
            KeyPairs = keyPairs;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
