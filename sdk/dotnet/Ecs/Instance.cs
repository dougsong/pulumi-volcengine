// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    /// <summary>
    /// Provides a resource to manage ecs instance
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Volcengine.Vpc.Vpc("foo", new Volcengine.Vpc.VpcArgs
    ///         {
    ///             VpcName = "tf-test-2",
    ///             CidrBlock = "172.16.0.0/16",
    ///         });
    ///         var foo1Subnet = new Volcengine.Vpc.Subnet("foo1Subnet", new Volcengine.Vpc.SubnetArgs
    ///         {
    ///             SubnetName = "subnet-test-1",
    ///             CidrBlock = "172.16.1.0/24",
    ///             ZoneId = "cn-beijing-a",
    ///             VpcId = foo.Id,
    ///         });
    ///         var foo1SecurityGroup = new Volcengine.Vpc.SecurityGroup("foo1SecurityGroup", new Volcengine.Vpc.SecurityGroupArgs
    ///         {
    ///             VpcId = foo.Id,
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 foo1Subnet,
    ///             },
    ///         });
    ///         var @default = new Volcengine.Ecs.Instance("default", new Volcengine.Ecs.InstanceArgs
    ///         {
    ///             ZoneId = "cn-beijing-a",
    ///             ImageId = "image-aagd56zrw2jtdro3bnrl",
    ///             InstanceType = "ecs.g1.large",
    ///             InstanceName = "xym-tf-test-2",
    ///             Description = "xym-tf-test-desc-1",
    ///             Password = "93f0cb0614Aab12",
    ///             InstanceChargeType = "PostPaid",
    ///             SystemVolumeType = "PTSSD",
    ///             SystemVolumeSize = 60,
    ///             SubnetId = foo1Subnet.Id,
    ///             SecurityGroupIds = 
    ///             {
    ///                 foo1SecurityGroup.Id,
    ///             },
    ///             DataVolumes = 
    ///             {
    ///                 new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
    ///                 {
    ///                     VolumeType = "PTSSD",
    ///                     Size = 100,
    ///                     DeleteWithInstance = true,
    ///                 },
    ///             },
    ///         });
    ///         //  secondary_network_interfaces {
    ///         //    subnet_id = volcengine_subnet.foo1.id
    ///         //    security_group_ids = [volcengine_security_group.foo1.id]
    ///         //  }
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:Ecs/instance:Instance")]
    public partial class Instance : Pulumi.CustomResource
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        /// </summary>
        [Output("autoRenewPeriod")]
        public Output<int?> AutoRenewPeriod { get; private set; } = null!;

        /// <summary>
        /// The number of ECS instance CPU cores.
        /// </summary>
        [Output("cpus")]
        public Output<int> Cpus { get; private set; } = null!;

        /// <summary>
        /// The create time of ECS instance.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The data volume collection of  ECS instance.
        /// </summary>
        [Output("dataVolumes")]
        public Output<ImmutableArray<Outputs.InstanceDataVolume>> DataVolumes { get; private set; } = null!;

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Output("hpcClusterId")]
        public Output<string?> HpcClusterId { get; private set; } = null!;

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Output("includeDataVolumes")]
        public Output<bool?> IncludeDataVolumes { get; private set; } = null!;

        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        [Output("instanceChargeType")]
        public Output<string> InstanceChargeType { get; private set; } = null!;

        /// <summary>
        /// The ID of ECS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The ssh key ID of ECS instance.
        /// </summary>
        [Output("keyPairId")]
        public Output<string> KeyPairId { get; private set; } = null!;

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Output("keyPairName")]
        public Output<string> KeyPairName { get; private set; } = null!;

        /// <summary>
        /// The memory size of ECS instance.
        /// </summary>
        [Output("memorySize")]
        public Output<int> MemorySize { get; private set; } = null!;

        /// <summary>
        /// The ID of primary networkInterface.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The os name of ECS instance.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// The os type of ECS instance.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        [Output("secondaryNetworkInterfaces")]
        public Output<ImmutableArray<Outputs.InstanceSecondaryNetworkInterface>> SecondaryNetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The security enhancement strategy of ECS instance.Default is true.
        /// </summary>
        [Output("securityEnhancementStrategy")]
        public Output<string?> SecurityEnhancementStrategy { get; private set; } = null!;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The stop mode of ECS instance.
        /// </summary>
        [Output("stoppedMode")]
        public Output<string> StoppedMode { get; private set; } = null!;

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The ID of system volume.
        /// </summary>
        [Output("systemVolumeId")]
        public Output<string> SystemVolumeId { get; private set; } = null!;

        /// <summary>
        /// The size of system volume.
        /// </summary>
        [Output("systemVolumeSize")]
        public Output<int> SystemVolumeSize { get; private set; } = null!;

        /// <summary>
        /// The type of system volume.
        /// </summary>
        [Output("systemVolumeType")]
        public Output<string> SystemVolumeType { get; private set; } = null!;

        /// <summary>
        /// The update time of ECS instance.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The user data of ECS instance.
        /// </summary>
        [Output("userData")]
        public Output<string> UserData { get; private set; } = null!;

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:Ecs/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:Ecs/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.InstanceDataVolumeArgs>? _dataVolumes;

        /// <summary>
        /// The data volume collection of  ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceDataVolumeArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.InstanceDataVolumeArgs>());
            set => _dataVolumes = value;
        }

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public Input<string>? HpcClusterId { get; set; }

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Input("includeDataVolumes")]
        public Input<bool>? IncludeDataVolumes { get; set; }

        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("secondaryNetworkInterfaces")]
        private InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs>? _secondaryNetworkInterfaces;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs> SecondaryNetworkInterfaces
        {
            get => _secondaryNetworkInterfaces ?? (_secondaryNetworkInterfaces = new InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs>());
            set => _secondaryNetworkInterfaces = value;
        }

        /// <summary>
        /// The security enhancement strategy of ECS instance.Default is true.
        /// </summary>
        [Input("securityEnhancementStrategy")]
        public Input<string>? SecurityEnhancementStrategy { get; set; }

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// The size of system volume.
        /// </summary>
        [Input("systemVolumeSize", required: true)]
        public Input<int> SystemVolumeSize { get; set; } = null!;

        /// <summary>
        /// The type of system volume.
        /// </summary>
        [Input("systemVolumeType", required: true)]
        public Input<string> SystemVolumeType { get; set; } = null!;

        /// <summary>
        /// The user data of ECS instance.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public InstanceArgs()
        {
        }
    }

    public sealed class InstanceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// The number of ECS instance CPU cores.
        /// </summary>
        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        /// <summary>
        /// The create time of ECS instance.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.InstanceDataVolumeGetArgs>? _dataVolumes;

        /// <summary>
        /// The data volume collection of  ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceDataVolumeGetArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.InstanceDataVolumeGetArgs>());
            set => _dataVolumes = value;
        }

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public Input<string>? HpcClusterId { get; set; }

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Input("includeDataVolumes")]
        public Input<bool>? IncludeDataVolumes { get; set; }

        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The ID of ECS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The ssh key ID of ECS instance.
        /// </summary>
        [Input("keyPairId")]
        public Input<string>? KeyPairId { get; set; }

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The memory size of ECS instance.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// The ID of primary networkInterface.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The os name of ECS instance.
        /// </summary>
        [Input("osName")]
        public Input<string>? OsName { get; set; }

        /// <summary>
        /// The os type of ECS instance.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("secondaryNetworkInterfaces")]
        private InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs>? _secondaryNetworkInterfaces;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs> SecondaryNetworkInterfaces
        {
            get => _secondaryNetworkInterfaces ?? (_secondaryNetworkInterfaces = new InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs>());
            set => _secondaryNetworkInterfaces = value;
        }

        /// <summary>
        /// The security enhancement strategy of ECS instance.Default is true.
        /// </summary>
        [Input("securityEnhancementStrategy")]
        public Input<string>? SecurityEnhancementStrategy { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The stop mode of ECS instance.
        /// </summary>
        [Input("stoppedMode")]
        public Input<string>? StoppedMode { get; set; }

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The ID of system volume.
        /// </summary>
        [Input("systemVolumeId")]
        public Input<string>? SystemVolumeId { get; set; }

        /// <summary>
        /// The size of system volume.
        /// </summary>
        [Input("systemVolumeSize")]
        public Input<int>? SystemVolumeSize { get; set; }

        /// <summary>
        /// The type of system volume.
        /// </summary>
        [Input("systemVolumeType")]
        public Input<string>? SystemVolumeType { get; set; }

        /// <summary>
        /// The update time of ECS instance.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The user data of ECS instance.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstanceState()
        {
        }
    }
}
