// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Eip
{
    /// <summary>
    /// Provides a resource to manage eip address
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Volcengine.Eip.Address("foo", new Volcengine.Eip.AddressArgs
    ///         {
    ///             Bandwidth = 1,
    ///             BillingType = "PostPaidByBandwidth",
    ///             Description = "tf-test",
    ///             Isp = "BGP",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Eip address can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:Eip/address:Address default eip-274oj9a8rs9a87fap8sf9515b
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:Eip/address:Address")]
    public partial class Address : Pulumi.CustomResource
    {
        /// <summary>
        /// The peek bandwidth of the EIP.
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.
        /// </summary>
        [Output("billingType")]
        public Output<string> BillingType { get; private set; } = null!;

        /// <summary>
        /// The description of the EIP.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ip address of the EIP.
        /// </summary>
        [Output("eipAddress")]
        public Output<string> EipAddress { get; private set; } = null!;

        /// <summary>
        /// The ISP of the EIP.
        /// </summary>
        [Output("isp")]
        public Output<string> Isp { get; private set; } = null!;

        /// <summary>
        /// The name of the EIP Address.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the EIP.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Address resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Address(string name, AddressArgs args, CustomResourceOptions? options = null)
            : base("volcengine:Eip/address:Address", name, args ?? new AddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Address(string name, Input<string> id, AddressState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:Eip/address:Address", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Address resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Address Get(string name, Input<string> id, AddressState? state = null, CustomResourceOptions? options = null)
        {
            return new Address(name, id, state, options);
        }
    }

    public sealed class AddressArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The peek bandwidth of the EIP.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.
        /// </summary>
        [Input("billingType", required: true)]
        public Input<string> BillingType { get; set; } = null!;

        /// <summary>
        /// The description of the EIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ISP of the EIP.
        /// </summary>
        [Input("isp")]
        public Input<string>? Isp { get; set; }

        /// <summary>
        /// The name of the EIP Address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AddressArgs()
        {
        }
    }

    public sealed class AddressState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The peek bandwidth of the EIP.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.
        /// </summary>
        [Input("billingType")]
        public Input<string>? BillingType { get; set; }

        /// <summary>
        /// The description of the EIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ip address of the EIP.
        /// </summary>
        [Input("eipAddress")]
        public Input<string>? EipAddress { get; set; }

        /// <summary>
        /// The ISP of the EIP.
        /// </summary>
        [Input("isp")]
        public Input<string>? Isp { get; set; }

        /// <summary>
        /// The name of the EIP Address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the EIP.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public AddressState()
        {
        }
    }
}
