// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Redis
{
    public static class Zones
    {
        /// <summary>
        /// Use this data source to query detailed information of redis zones
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Redis.Zones.InvokeAsync(new Volcengine.Redis.ZonesArgs
        ///         {
        ///             RegionId = "cn-north-3",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ZonesResult> InvokeAsync(ZonesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ZonesResult>("volcengine:redis/zones:Zones", args ?? new ZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of redis zones
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var @default = Output.Create(Volcengine.Redis.Zones.InvokeAsync(new Volcengine.Redis.ZonesArgs
        ///         {
        ///             RegionId = "cn-north-3",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ZonesResult> Invoke(ZonesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ZonesResult>("volcengine:redis/zones:Zones", args ?? new ZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ZonesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The Id of Region.
        /// </summary>
        [Input("regionId", required: true)]
        public string RegionId { get; set; } = null!;

        public ZonesArgs()
        {
        }
    }

    public sealed class ZonesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The Id of Region.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        public ZonesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class ZonesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        public readonly string RegionId;
        /// <summary>
        /// The total count of zone query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The collection of zone query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ZonesZoneResult> Zones;

        [OutputConstructor]
        private ZonesResult(
            string id,

            string? outputFile,

            string regionId,

            int totalCount,

            ImmutableArray<Outputs.ZonesZoneResult> zones)
        {
            Id = id;
            OutputFile = outputFile;
            RegionId = regionId;
            TotalCount = totalCount;
            Zones = zones;
        }
    }
}
