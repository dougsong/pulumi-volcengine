{
    "name": "volcengine",
    "description": "A Pulumi package for creating and managing volcengine cloud resources.",
    "keywords": [
        "pulumi",
        "volcengine",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`volcengine` Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine).",
    "repository": "https://github.com/pulumi/pulumi-volcengine",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ACCESS_KEY"
                    ]
                }
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_SECRET_KEY"
                    ]
                }
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        },
        "defaults": [
            "accessKey",
            "region",
            "secretKey"
        ]
    },
    "types": {
        "volcengine:Clb/ClbRulesRule:ClbRulesRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Description of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domain": {
                    "type": "string",
                    "description": "The Domain of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleId": {
                    "type": "string",
                    "description": "The Id of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The Id of Server Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "domain",
                "id",
                "ruleId",
                "serverGroupId",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Clb/ClbsClb:ClbsClb": {
            "properties": {
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The expected recycle time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The Eip address of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "The Eip ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The private ip address of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eniId": {
                    "type": "string",
                    "description": "The Eni ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specifications of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The reason why Clb is locked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The modification protection reason of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The modification protection status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the Clb.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "businessStatus",
                "createTime",
                "deletedTime",
                "description",
                "eipAddress",
                "eipId",
                "eniAddress",
                "eniId",
                "id",
                "loadBalancerBillingType",
                "loadBalancerId",
                "loadBalancerName",
                "loadBalancerSpec",
                "lockReason",
                "modificationProtectionReason",
                "modificationProtectionStatus",
                "overdueTime",
                "status",
                "subnetId",
                "type",
                "updateTime",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Clb/ListenerHealthCheck:ListenerHealthCheck": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of health check function. Optional choice contains `on`, `off`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "integer",
                    "description": "The healthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpCode": {
                    "type": "string",
                    "description": "The normal http status code of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "The interval executing health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The method of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "The response timeout of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unHealthyThreshold": {
                    "type": "integer",
                    "description": "The unhealthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The uri of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Clb/ListenersListener:ListenersListener": {
            "properties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The acl ID list to which the Listener is bound.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The acl status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclType": {
                    "type": "string",
                    "description": "The acl type of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateId": {
                    "type": "string",
                    "description": "The ID of the certificate which is associated with the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckDomain": {
                    "type": "string",
                    "description": "The domain of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckEnabled": {
                    "type": "string",
                    "description": "The enable status of health check function.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckHealthyThreshold": {
                    "type": "integer",
                    "description": "The healthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckHttpCode": {
                    "type": "string",
                    "description": "The normal http status code of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckInterval": {
                    "type": "integer",
                    "description": "The interval executing health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckMethod": {
                    "type": "string",
                    "description": "The method of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckTimeout": {
                    "type": "integer",
                    "description": "The response timeout of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUnHealthyThreshold": {
                    "type": "integer",
                    "description": "The unhealthy threshold of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheckUri": {
                    "type": "string",
                    "description": "The uri of health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the backend server group which is associated with the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aclIds",
                "aclStatus",
                "aclType",
                "certificateId",
                "createTime",
                "enabled",
                "healthCheckDomain",
                "healthCheckEnabled",
                "healthCheckHealthyThreshold",
                "healthCheckHttpCode",
                "healthCheckInterval",
                "healthCheckMethod",
                "healthCheckTimeout",
                "healthCheckUnHealthyThreshold",
                "healthCheckUri",
                "id",
                "listenerId",
                "listenerName",
                "port",
                "protocol",
                "serverGroupId",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Clb/ServerGroupServersServer:ServerGroupServersServer": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "instanceId",
                "ip",
                "port",
                "serverId",
                "type",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Clb/ServerGroupsGroup:ServerGroupsGroup": {
            "properties": {
                "createTime": {
                    "type": "string",
                    "description": "The create time of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of the ServerGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createTime",
                "description",
                "id",
                "serverGroupId",
                "serverGroupName",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Ebs/VolumesVolume:VolumesVolume": {
            "properties": {
                "billingType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "description": "The Kind of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "renewType": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tradeStatus": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The Id of Zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingType",
                "createdAt",
                "deleteWithInstance",
                "description",
                "deviceName",
                "expiredTime",
                "id",
                "imageId",
                "instanceId",
                "kind",
                "payType",
                "renewType",
                "size",
                "status",
                "tradeStatus",
                "updatedAt",
                "volumeId",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Ecs/ImagesImage:ImagesImage": {
            "properties": {
                "architecture": {
                    "type": "string",
                    "description": "The architecture of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The ID of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "The name of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isSupportCloudInit": {
                    "type": "boolean",
                    "description": "Whether the Image support cloud-init.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osName": {
                    "type": "string",
                    "description": "The name of Image operating system.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osType": {
                    "type": "string",
                    "description": "The operating system type of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platform": {
                    "type": "string",
                    "description": "The platform of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformVersion": {
                    "type": "string",
                    "description": "The platform version of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shareStatus": {
                    "type": "string",
                    "description": "The share mode of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size(GiB) of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A list of Image status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of Image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "createdAt",
                "description",
                "imageId",
                "imageName",
                "isSupportCloudInit",
                "osName",
                "osType",
                "platform",
                "platformVersion",
                "shareStatus",
                "size",
                "status",
                "updatedAt",
                "visibility"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Ecs/InstanceDataVolume:InstanceDataVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "size",
                "volumeType"
            ]
        },
        "volcengine:Ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface": {
            "properties": {
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of secondary networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of secondary networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "securityGroupIds",
                "subnetId"
            ]
        },
        "volcengine:Ecs/InstancesInstance:InstancesInstance": {
            "properties": {
                "cpus": {
                    "type": "integer",
                    "description": "The number of ECS instance CPU cores.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The image ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The spec type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ssh key ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The key pair name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstancesInstanceNetworkInterface:InstancesInstanceNetworkInterface"
                    },
                    "description": "The networkInterface detail collection of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osName": {
                    "type": "string",
                    "description": "The os name of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osType": {
                    "type": "string",
                    "description": "The os type of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "The stop mode of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstancesInstanceVolume:InstancesInstanceVolume"
                    },
                    "description": "The volume detail collection of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpus",
                "createdAt",
                "description",
                "hostName",
                "imageId",
                "instanceChargeType",
                "instanceId",
                "instanceName",
                "instanceType",
                "keyPairId",
                "keyPairName",
                "memorySize",
                "networkInterfaces",
                "osName",
                "osType",
                "status",
                "stoppedMode",
                "updatedAt",
                "volumes",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Ecs/InstancesInstanceNetworkInterface:InstancesInstanceNetworkInterface": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary ip address of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of networkInterface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "networkInterfaceId",
                "primaryIpAddress",
                "subnetId",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Ecs/InstancesInstanceVolume:InstancesInstanceVolume": {
            "properties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "The delete with instance flag of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "description": "The size of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeId": {
                    "type": "string",
                    "description": "The ID of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeName": {
                    "type": "string",
                    "description": "The Name of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of volume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteWithInstance",
                "size",
                "volumeId",
                "volumeName",
                "volumeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Eip/AddressesAddress:AddressesAddress": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The id of the EIP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allocationTime": {
                    "type": "string",
                    "description": "The allocation time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "The business status of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The EIP ip address of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredTime": {
                    "type": "string",
                    "description": "The expired time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the EIP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "An ISP of EIP Address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The lock reason of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "A name of EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A status of EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update time of the EIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "allocationTime",
                "bandwidth",
                "billingType",
                "businessStatus",
                "deletedTime",
                "description",
                "eipAddress",
                "expiredTime",
                "id",
                "instanceId",
                "instanceType",
                "isp",
                "lockReason",
                "name",
                "overdueTime",
                "status",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Iam/PoliciesPolicy:PoliciesPolicy": {
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyTrn": {
                    "type": "string",
                    "description": "The resource name of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update time of the Policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createDate",
                "description",
                "id",
                "policyDocument",
                "policyName",
                "policyTrn",
                "policyType",
                "updateDate"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Iam/RolesRole:RolesRole": {
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role, comma separated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trn": {
                    "type": "string",
                    "description": "The resource name of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createDate",
                "description",
                "id",
                "roleName",
                "trn",
                "trustPolicyDocument"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Iam/UsersUser:UsersUser": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createDate": {
                    "type": "string",
                    "description": "The create date of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trn": {
                    "type": "string",
                    "description": "The trn of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update date of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "createDate",
                "trn",
                "updateDate",
                "userName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClusterClusterConfig:ClusterClusterConfig": {
            "properties": {
                "apiServerPublicAccessConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterClusterConfigApiServerPublicAccessConfig:ClusterClusterConfigApiServerPublicAccessConfig",
                    "description": "Cluster API Server public network access configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessEnabled": {
                    "type": "boolean",
                    "description": "Cluster API Server public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePublicAccessDefaultEnabled": {
                    "type": "boolean",
                    "description": "Node public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID for the cluster control plane to communicate within the private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "subnetIds"
            ]
        },
        "volcengine:Vke/ClusterClusterConfigApiServerPublicAccessConfig:ClusterClusterConfigApiServerPublicAccessConfig": {
            "properties": {
                "publicAccessNetworkConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig",
                    "description": "Public network access network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peak bandwidth of the public IP, unit: Mbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/ClusterPodsConfig:ClusterPodsConfig": {
            "properties": {
                "flannelConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterPodsConfigFlannelConfig:ClusterPodsConfigFlannelConfig",
                    "description": "Flannel network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "podNetworkMode": {
                    "type": "string",
                    "description": "The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcCniConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterPodsConfigVpcCniConfig:ClusterPodsConfigVpcCniConfig",
                    "description": "VPC-CNI network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "podNetworkMode"
            ]
        },
        "volcengine:Vke/ClusterPodsConfigFlannelConfig:ClusterPodsConfigFlannelConfig": {
            "properties": {
                "maxPodsPerNode": {
                    "type": "integer",
                    "description": "The maximum number of single-node Pod instances for a Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "podCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod CIDR for the Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/ClusterPodsConfigVpcCniConfig:ClusterPodsConfigVpcCniConfig": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/ClusterServicesConfig:ClusterServicesConfig": {
            "properties": {
                "serviceCidrsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 private network address exposed by the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "serviceCidrsv4s"
            ]
        },
        "volcengine:Vke/ClustersCluster:ClustersCluster": {
            "properties": {
                "clusterConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfig:ClustersClusterClusterConfig",
                    "description": "The config of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Cluster creation time. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAllocationId": {
                    "type": "string",
                    "description": "Eip allocation Id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfigPrivate": {
                    "type": "string",
                    "description": "Kubeconfig data with private network access, returned in BASE64 encoding.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeconfigPublic": {
                    "type": "string",
                    "description": "Kubeconfig data with public network access, returned in BASE64 encoding.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes version information corresponding to the cluster, specific to the patch version.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatistics": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterNodeStatistics:ClustersClusterNodeStatistics",
                    "description": "Statistics on the number of nodes corresponding to each master state in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterPodsConfig:ClustersClusterPodsConfig",
                    "description": "The config of the pods.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterServicesConfig:ClustersClusterServicesConfig",
                    "description": "The config of the services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterStatus:ClustersClusterStatus",
                    "description": "The status of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last time a request was accepted by the cluster and executed or completed. UTC+0 time in standard RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterConfig",
                "createTime",
                "deleteProtectionEnabled",
                "description",
                "eipAllocationId",
                "id",
                "kubeconfigPrivate",
                "kubeconfigPublic",
                "kubernetesVersion",
                "name",
                "nodeStatistics",
                "podsConfig",
                "servicesConfig",
                "status",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfig:ClustersClusterClusterConfig": {
            "properties": {
                "apiServerEndpoints": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfigApiServerEndpoints:ClustersClusterClusterConfigApiServerEndpoints",
                    "description": "Endpoint information accessed by the cluster API Server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfigApiServerPublicAccessConfig:ClustersClusterClusterConfigApiServerPublicAccessConfig",
                    "description": "Cluster API Server public network access configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "apiServerPublicAccessEnabled": {
                    "type": "boolean",
                    "description": "Cluster API Server public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePublicAccessDefaultEnabled": {
                    "type": "boolean",
                    "description": "Node public network access configuration, the value is `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group used by the cluster control plane and nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiServerEndpoints",
                "apiServerPublicAccessConfig",
                "apiServerPublicAccessEnabled",
                "resourcePublicAccessDefaultEnabled",
                "securityGroupIds",
                "subnetIds",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfigApiServerEndpoints:ClustersClusterClusterConfigApiServerEndpoints": {
            "properties": {
                "privateIp": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfigApiServerEndpointsPrivateIp:ClustersClusterClusterConfigApiServerEndpointsPrivateIp",
                    "description": "Endpoint address of the cluster API Server private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfigApiServerEndpointsPublicIp:ClustersClusterClusterConfigApiServerEndpointsPublicIp",
                    "description": "Endpoint address of the cluster API Server public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateIp",
                "publicIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfigApiServerEndpointsPrivateIp:ClustersClusterClusterConfigApiServerEndpointsPrivateIp": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "Ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfigApiServerEndpointsPublicIp:ClustersClusterClusterConfigApiServerEndpointsPublicIp": {
            "properties": {
                "ipv4": {
                    "type": "string",
                    "description": "Ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfigApiServerPublicAccessConfig:ClustersClusterClusterConfigApiServerPublicAccessConfig": {
            "properties": {
                "accessSourceIpsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv4 public network access whitelist. A null value means all network segments (0.0.0.0/0) are allowed to pass.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicAccessNetworkConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig",
                    "description": "Public network access network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessSourceIpsv4s",
                "publicAccessNetworkConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig:ClustersClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peak bandwidth of the public IP, unit: Mbps.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "billingType": {
                    "type": "string",
                    "description": "Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of public IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "billingType",
                "isp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterNodeStatistics:ClustersClusterNodeStatistics": {
            "properties": {
                "creatingCount": {
                    "type": "integer",
                    "description": "Phase=Creating total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletingCount": {
                    "type": "integer",
                    "description": "Phase=Deleting total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failedCount": {
                    "type": "integer",
                    "description": "Phase=Failed total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningCount": {
                    "type": "integer",
                    "description": "Phase=Running total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stoppedCount": {
                    "type": "integer",
                    "description": "Phase=Stopped total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "description": "The total count of Cluster query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatingCount": {
                    "type": "integer",
                    "description": "Phase=Updating total number of nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creatingCount",
                "deletingCount",
                "failedCount",
                "runningCount",
                "stoppedCount",
                "totalCount",
                "updatingCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterPodsConfig:ClustersClusterPodsConfig": {
            "properties": {
                "flannelConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterPodsConfigFlannelConfig:ClustersClusterPodsConfigFlannelConfig",
                    "description": "Flannel network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podNetworkMode": {
                    "type": "string",
                    "description": "Container Pod Network Type (CNI), the value is `Flannel` or `VpcCniShared`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcCniConfig": {
                    "$ref": "#/types/volcengine:Vke/ClustersClusterPodsConfigVpcCniConfig:ClustersClusterPodsConfigVpcCniConfig",
                    "description": "VPC-CNI network configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "flannelConfig",
                "podNetworkMode",
                "vpcCniConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterPodsConfigFlannelConfig:ClustersClusterPodsConfigFlannelConfig": {
            "properties": {
                "maxPodsPerNode": {
                    "type": "integer",
                    "description": "The maximum number of single-node Pod instances for a Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod CIDR for the Flannel container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxPodsPerNode",
                "podCidrs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterPodsConfigVpcCniConfig:ClustersClusterPodsConfigVpcCniConfig": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Pod subnet IDs for the VPC-CNI container network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The private network where the cluster control plane network resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetIds",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterServicesConfig:ClustersClusterServicesConfig": {
            "properties": {
                "serviceCidrsv4s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IPv4 private network address exposed by the service.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceCidrsv4s"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterStatus:ClustersClusterStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/ClustersClusterStatusCondition:ClustersClusterStatusCondition"
                    },
                    "description": "The state condition in the current primary state of the cluster, that is, the reason for entering the primary state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "phase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersClusterStatusCondition:ClustersClusterStatusCondition": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/ClustersStatus:ClustersStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Balance`, `CreateError`, `ResourceCleanupFailed`, `Unknown`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolAutoScaling:NodePoolAutoScaling": {
            "properties": {
                "desiredReplicas": {
                    "type": "integer",
                    "description": "The DesiredReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is Enabled of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "The MaxReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "The MinReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The Priority of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "desiredReplicas",
                        "enabled",
                        "maxReplicas",
                        "minReplicas",
                        "priority"
                    ]
                }
            }
        },
        "volcengine:Vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig": {
            "properties": {
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolKubernetesConfigLabel:NodePoolKubernetesConfigLabel"
                    },
                    "description": "The Labels of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolKubernetesConfigTaint:NodePoolKubernetesConfigTaint"
                    },
                    "description": "The Taints of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolKubernetesConfigLabel:NodePoolKubernetesConfigLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Labels.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolKubernetesConfigTaint:NodePoolKubernetesConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taints.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolNodeConfig:NodePoolNodeConfig": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The AdditionalContainerStorageEnabled of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolNodeConfigDataVolume:NodePoolNodeConfigDataVolume"
                    },
                    "description": "The DataVolumes of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The initializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The InstanceTypeIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "security": {
                    "$ref": "#/types/volcengine:Vke/NodePoolNodeConfigSecurity:NodePoolNodeConfigSecurity",
                    "description": "The Security of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SubnetIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "systemVolume": {
                    "$ref": "#/types/volcengine:Vke/NodePoolNodeConfigSystemVolume:NodePoolNodeConfigSystemVolume",
                    "description": "The SystemVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolNodeConfigDataVolume:NodePoolNodeConfigDataVolume": {
            "properties": {
                "size": {
                    "type": "integer",
                    "description": "The Size of DataVolumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Type of DataVolumes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolNodeConfigSecurity:NodePoolNodeConfigSecurity": {
            "properties": {
                "login": {
                    "$ref": "#/types/volcengine:Vke/NodePoolNodeConfigSecurityLogin:NodePoolNodeConfigSecurityLogin",
                    "description": "The Login of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityGroupIds of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityStrategies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SecurityStrategies of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "securityGroupIds"
                    ]
                }
            }
        },
        "volcengine:Vke/NodePoolNodeConfigSecurityLogin:NodePoolNodeConfigSecurityLogin": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The Password of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPairName": {
                    "type": "string",
                    "description": "The SshKeyPairName of Security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolNodeConfigSystemVolume:NodePoolNodeConfigSystemVolume": {
            "properties": {
                "size": {
                    "type": "integer",
                    "description": "The Size of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The Type of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolStatus:NodePoolStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "Indicates the status condition of the node pool in the active state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodePoolsNodePool:NodePoolsNodePool": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "Is AdditionalContainerStorageEnabled of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Condition of Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cordon": {
                    "type": "boolean",
                    "description": "The Cordon of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "The ClientToken when successfully created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The CreateTime of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolsNodePoolDataVolume:NodePoolsNodePoolDataVolume"
                    },
                    "description": "The DataVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The Description of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredReplicas": {
                    "type": "integer",
                    "description": "The DesiredReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is Enabled of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Id of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeScript": {
                    "type": "string",
                    "description": "The InitializeScript of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The InstanceTypeIds of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labelContents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolsNodePoolLabelContent:NodePoolsNodePoolLabelContent"
                    },
                    "description": "The LabelContent of KubernetesConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicas": {
                    "type": "integer",
                    "description": "The MaxReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minReplicas": {
                    "type": "integer",
                    "description": "The MinReplicas of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeStatistics": {
                    "$ref": "#/types/volcengine:Vke/NodePoolsNodePoolNodeStatistics:NodePoolsNodePoolNodeStatistics",
                    "description": "The NodeStatistics of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The Priority of AutoScaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SubnetId of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "systemVolume": {
                    "$ref": "#/types/volcengine:Vke/NodePoolsNodePoolSystemVolume:NodePoolsNodePoolSystemVolume",
                    "description": "The SystemVolume of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taintContents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolsNodePoolTaintContent:NodePoolsNodePoolTaintContent"
                    },
                    "description": "The TaintContent of NodeConfig.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The ClientToken when last update was successful.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The UpdateTime time of NodePool.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalContainerStorageEnabled",
                "clusterId",
                "conditionTypes",
                "cordon",
                "createClientToken",
                "createTime",
                "dataVolumes",
                "description",
                "desiredReplicas",
                "enabled",
                "id",
                "initializeScript",
                "instanceTypeIds",
                "labelContents",
                "maxReplicas",
                "minReplicas",
                "name",
                "nodeStatistics",
                "phase",
                "priority",
                "subnetIds",
                "systemVolume",
                "taintContents",
                "updateClientToken",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsNodePoolDataVolume:NodePoolsNodePoolDataVolume": {
            "properties": {
                "size": {
                    "type": "string",
                    "description": "The Size of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsNodePoolLabelContent:NodePoolsNodePoolLabelContent": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The Key of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsNodePoolNodeStatistics:NodePoolsNodePoolNodeStatistics": {
            "properties": {
                "creatingCount": {
                    "type": "integer",
                    "description": "The CreatingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletingCount": {
                    "type": "integer",
                    "description": "The DeletingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failedCount": {
                    "type": "integer",
                    "description": "The FailedCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runningCount": {
                    "type": "integer",
                    "description": "The RunningCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalCount": {
                    "type": "integer",
                    "description": "Returns the total amount of the data list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatingCount": {
                    "type": "integer",
                    "description": "The UpdatingCount of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creatingCount",
                "deletingCount",
                "failedCount",
                "runningCount",
                "totalCount",
                "updatingCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsNodePoolSystemVolume:NodePoolsNodePoolSystemVolume": {
            "properties": {
                "size": {
                    "type": "string",
                    "description": "The Size of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The Type of SystemVolume.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsNodePoolTaintContent:NodePoolsNodePoolTaintContent": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The Effect of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The Key of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The Value of Taint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodePoolsStatus:NodePoolsStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "Indicates the status condition of the node pool in the active state.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vke/NodesNode:NodesNode": {
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "Is Additional Container storage enables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Condition of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The Storage Path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createClientToken": {
                    "type": "string",
                    "description": "The Create Client Token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isVirtual": {
                    "type": "boolean",
                    "description": "Is virtual node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The Name of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The node pool id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles of node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of Node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalContainerStorageEnabled",
                "clusterId",
                "conditionTypes",
                "containerStoragePath",
                "createClientToken",
                "createTime",
                "id",
                "instanceId",
                "isVirtual",
                "name",
                "nodePoolId",
                "phase",
                "roles",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vke/NodesStatus:NodesStatus": {
            "properties": {
                "conditionsType": {
                    "type": "string",
                    "description": "The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phase": {
                    "type": "string",
                    "description": "The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "volcengine:Vpc/AclAclEntry:AclAclEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "entry"
            ]
        },
        "volcengine:Vpc/AclsAcl:AclsAcl": {
            "properties": {
                "aclEntryCount": {
                    "type": "integer",
                    "description": "The count of acl entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "Creation time of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The listeners of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of Acl.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aclEntryCount",
                "aclId",
                "aclName",
                "createTime",
                "description",
                "id",
                "listeners",
                "updateTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/CertificatesCertificate:CertificatesCertificate": {
            "properties": {
                "certificateId": {
                    "type": "string",
                    "description": "The ID of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "string",
                    "description": "The create time of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "The domain name of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredAt": {
                    "type": "string",
                    "description": "The expire time of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID list of the Listener.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateId",
                "certificateName",
                "createTime",
                "description",
                "domainName",
                "expiredAt",
                "id",
                "listeners"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/GatewaysNatGateway:GatewaysNatGateway": {
            "properties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "businessStatus": {
                    "type": "string",
                    "description": "Whether the NatGateway is locked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The creation time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deletedTime": {
                    "type": "string",
                    "description": "The deleted time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vpc/GatewaysNatGatewayEipAddress:GatewaysNatGatewayEipAddress"
                    },
                    "description": "The eip addresses of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lockReason": {
                    "type": "string",
                    "description": "The reason why locking NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The ID of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overdueTime": {
                    "type": "string",
                    "description": "The overdue time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of the NatGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "billingType",
                "businessStatus",
                "creationTime",
                "deletedTime",
                "description",
                "eipAddresses",
                "id",
                "lockReason",
                "natGatewayId",
                "natGatewayName",
                "networkInterfaceId",
                "overdueTime",
                "spec",
                "status",
                "subnetId",
                "updatedAt",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/GatewaysNatGatewayEipAddress:GatewaysNatGatewayEipAddress": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The ID of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The address of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usingStatus": {
                    "type": "string",
                    "description": "The using status of Eip.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allocationId",
                "eipAddress",
                "usingStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/NetworkInterfacesNetworkInterface:NetworkInterfacesNetworkInterface": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the ENI creator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedElasticIpAddress": {
                    "type": "string",
                    "description": "The IP address of the EIP to which the ENI associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associatedElasticIpId": {
                    "type": "string",
                    "description": "The allocation id of the EIP to which the ENI associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceId": {
                    "type": "string",
                    "description": "The id of the device to which the ENI is bound.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The mac address of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "A name of ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "The enable of port security.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "A status of ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "An id of the subnet to which the ENI is connected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A type of ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update time of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "An id of the virtual private cloud (VPC) to which the ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the virtual private cloud (VPC) to which the ENI belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The zone id of the ENI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "associatedElasticIpAddress",
                "associatedElasticIpId",
                "createdAt",
                "description",
                "deviceId",
                "id",
                "macAddress",
                "networkInterfaceId",
                "networkInterfaceName",
                "portSecurityEnabled",
                "primaryIpAddress",
                "securityGroupIds",
                "status",
                "subnetId",
                "type",
                "updatedAt",
                "vpcId",
                "vpcName",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/RouteEntriesRouteEntry:RouteEntriesRouteEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "A destination CIDR block of route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopId": {
                    "type": "string",
                    "description": "An id of next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopName": {
                    "type": "string",
                    "description": "The name of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopType": {
                    "type": "string",
                    "description": "A type of next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeEntryId": {
                    "type": "string",
                    "description": "The id of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "A name of route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "An id of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the route entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the virtual private cloud (VPC) to which the route entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "destinationCidrBlock",
                "id",
                "nextHopId",
                "nextHopName",
                "nextHopType",
                "routeEntryId",
                "routeEntryName",
                "routeTableId",
                "status",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/RouteTablesRouteTable:RouteTablesRouteTable": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the route table creator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "description": "A name of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableType": {
                    "type": "string",
                    "description": "The type of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the subnet ids to which the entry table associates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The last update time of the route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "An id of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the virtual private cloud (VPC) to which the route entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "creationTime",
                "description",
                "id",
                "routeTableId",
                "routeTableName",
                "routeTableType",
                "subnetIds",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/SecurityGroupsSecurityGroup:SecurityGroupsSecurityGroup": {
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "The creation time of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "The ID of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "The Name of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "A Name Regex of SecurityGroup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of Vpc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "creationTime",
                "description",
                "id",
                "securityGroupId",
                "securityGroupName",
                "status",
                "type",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/SnatEntriesSnatEntry:SnatEntriesSnatEntry": {
            "properties": {
                "eipAddress": {
                    "type": "string",
                    "description": "The public ip address used by the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eipId": {
                    "type": "string",
                    "description": "An id of the public ip address used by the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "An id of the nat gateway to which the entry belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatEntryId": {
                    "type": "string",
                    "description": "The id of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "A name of SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the SNAT entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "An id of the subnet that is required to access the Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eipAddress",
                "eipId",
                "id",
                "natGatewayId",
                "snatEntryId",
                "snatEntryName",
                "status",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/SubnetsSubnet:SubnetsSubnet": {
            "properties": {
                "availableIpAddressCount": {
                    "type": "integer",
                    "description": "The count of available ip address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The ID of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableType": {
                    "type": "string",
                    "description": "The type of route table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The Status of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "The Name of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalIpv4Count": {
                    "type": "integer",
                    "description": "The Count of ipv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "Update time of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The Vpc ID of Subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The ID of Zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableIpAddressCount",
                "cidrBlock",
                "creationTime",
                "description",
                "id",
                "routeTableId",
                "routeTableType",
                "status",
                "subnetName",
                "totalIpv4Count",
                "updateTime",
                "vpcId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/VpcAssociateCen:VpcAssociateCen": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenStatus": {
                    "type": "string",
                    "description": "The status of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cenId",
                        "cenOwnerId",
                        "cenStatus"
                    ]
                }
            }
        },
        "volcengine:Vpc/VpcsVpc:VpcsVpc": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associateCens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vpc/VpcsVpcAssociateCen:VpcsVpcAssociateCen"
                    },
                    "description": "The associate cen list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auxiliaryCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The auxiliary cidr block list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "The cidr block of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationTime": {
                    "type": "string",
                    "description": "The create time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The dns server list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natGatewayIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nat gateway ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The route table ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID list of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "associateCens",
                "auxiliaryCidrBlocks",
                "cidrBlock",
                "creationTime",
                "description",
                "dnsServers",
                "natGatewayIds",
                "routeTableIds",
                "securityGroupIds",
                "status",
                "subnetIds",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/VpcsVpcAssociateCen:VpcsVpcAssociateCen": {
            "properties": {
                "cenId": {
                    "type": "string",
                    "description": "The ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenOwnerId": {
                    "type": "string",
                    "description": "The owner ID of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cenStatus": {
                    "type": "string",
                    "description": "The status of CEN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cenId",
                "cenOwnerId",
                "cenStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "volcengine:Vpc/ZonesZone:ZonesZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the volcengine package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n"
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n"
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The Access Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_ACCESS_KEY"
                    ]
                }
            },
            "customerHeaders": {
                "type": "string",
                "description": "CUSTOMER HEADERS for Volcengine Provider\n"
            },
            "disableSsl": {
                "type": "boolean",
                "description": "Disable SSL for Volcengine Provider\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The Customer Endpoint for Volcengine Provider\n"
            },
            "region": {
                "type": "string",
                "description": "The Region for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_REGION"
                    ]
                }
            },
            "secretKey": {
                "type": "string",
                "description": "The Secret Key for Volcengine Provider\n",
                "defaultInfo": {
                    "environment": [
                        "VOLCENGINE_SECRET_KEY"
                    ]
                }
            },
            "sessionToken": {
                "type": "string",
                "description": "The Session Token for Volcengine Provider\n"
            }
        }
    },
    "resources": {
        "volcengine:Clb/certificate:Certificate": {
            "description": "Provides a resource to manage certificate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.Certificate(\"foo\", {\n    certificateName: \"demo-certificate\",\n    description: \"This is a clb certificate\",\n    privateKey: \"private-key\",\n    publicKey: \"public-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.Certificate(\"foo\",\n    certificate_name=\"demo-certificate\",\n    description=\"This is a clb certificate\",\n    private_key=\"private-key\",\n    public_key=\"public-key\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.Certificate(\"foo\", new Volcengine.Clb.CertificateArgs\n        {\n            CertificateName = \"demo-certificate\",\n            Description = \"This is a clb certificate\",\n            PrivateKey = \"private-key\",\n            PublicKey = \"public-key\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewCertificate(ctx, \"foo\", \u0026Clb.CertificateArgs{\n\t\t\tCertificateName: pulumi.String(\"demo-certificate\"),\n\t\t\tDescription:     pulumi.String(\"This is a clb certificate\"),\n\t\t\tPrivateKey:      pulumi.String(\"private-key\"),\n\t\t\tPublicKey:       pulumi.String(\"public-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Certificate(\"foo\", CertificateArgs.builder()        \n            .certificateName(\"demo-certificate\")\n            .description(\"This is a clb certificate\")\n            .privateKey(\"private-key\")\n            .publicKey(\"public-key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:Certificate\n    properties:\n      certificateName: demo-certificate\n      description: This is a clb certificate\n      privateKey: private-key\n      publicKey: public-key\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCertificate can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Clb/certificate:Certificate default cert-2fe5k****c16o5oxruvtk3qf5\n```\n\n ",
            "properties": {
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key of the Certificate.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key of the Certificate.\n"
                }
            },
            "required": [
                "privateKey",
                "publicKey"
            ],
            "inputProperties": {
                "certificateName": {
                    "type": "string",
                    "description": "The name of the Certificate.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate.\n",
                    "willReplaceOnChanges": true
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key of the Certificate.\n",
                    "willReplaceOnChanges": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key of the Certificate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "privateKey",
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key of the Certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key of the Certificate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Clb/clb:Clb": {
            "description": "Provides a resource to manage clb\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.Clb(\"foo\", {\n    description: \"Demo\",\n    loadBalancerSpec: \"small_1\",\n    regionId: \"cn-north-3\",\n    subnetId: \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n    type: \"public\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.Clb(\"foo\",\n    description=\"Demo\",\n    load_balancer_spec=\"small_1\",\n    region_id=\"cn-north-3\",\n    subnet_id=\"subnet-2744i7u9alnnk7fap8tkq8aft\",\n    type=\"public\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.Clb(\"foo\", new Volcengine.Clb.ClbArgs\n        {\n            Description = \"Demo\",\n            LoadBalancerSpec = \"small_1\",\n            RegionId = \"cn-north-3\",\n            SubnetId = \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n            Type = \"public\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewClb(ctx, \"foo\", \u0026Clb.ClbArgs{\n\t\t\tDescription:      pulumi.String(\"Demo\"),\n\t\t\tLoadBalancerSpec: pulumi.String(\"small_1\"),\n\t\t\tRegionId:         pulumi.String(\"cn-north-3\"),\n\t\t\tSubnetId:         pulumi.String(\"subnet-2744i7u9alnnk7fap8tkq8aft\"),\n\t\t\tType:             pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Clb(\"foo\", ClbArgs.builder()        \n            .description(\"Demo\")\n            .loadBalancerSpec(\"small_1\")\n            .regionId(\"cn-north-3\")\n            .subnetId(\"subnet-2744i7u9alnnk7fap8tkq8aft\")\n            .type(\"public\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:Clb\n    properties:\n      description: Demo\n      loadBalancerSpec: small_1\n      regionId: cn-north-3\n      subnetId: subnet-2744i7u9alnnk7fap8tkq8aft\n      type: public\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCLB can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Clb/clb:Clb default clb-273y2ok6ets007fap8txvf6us\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the CLB.\n"
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The eni address of the CLB.\n"
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the CLB.\n"
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the CLB.\n"
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specification of the CLB.\n"
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The reason of the console modification protection.\n"
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The status of the console modification protection.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the request.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the CLB. And optional choice contains `public` or `private`.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n"
                }
            },
            "required": [
                "eniAddress",
                "loadBalancerBillingType",
                "loadBalancerName",
                "loadBalancerSpec",
                "regionId",
                "subnetId",
                "type",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the CLB.\n"
                },
                "eniAddress": {
                    "type": "string",
                    "description": "The eni address of the CLB.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerBillingType": {
                    "type": "string",
                    "description": "The billing type of the CLB.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerName": {
                    "type": "string",
                    "description": "The name of the CLB.\n"
                },
                "loadBalancerSpec": {
                    "type": "string",
                    "description": "The specification of the CLB.\n"
                },
                "modificationProtectionReason": {
                    "type": "string",
                    "description": "The reason of the console modification protection.\n"
                },
                "modificationProtectionStatus": {
                    "type": "string",
                    "description": "The status of the console modification protection.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "The region of the request.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the CLB. And optional choice contains `public` or `private`.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadBalancerSpec",
                "regionId",
                "subnetId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Clb resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the CLB.\n"
                    },
                    "eniAddress": {
                        "type": "string",
                        "description": "The eni address of the CLB.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerBillingType": {
                        "type": "string",
                        "description": "The billing type of the CLB.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the CLB.\n"
                    },
                    "loadBalancerSpec": {
                        "type": "string",
                        "description": "The specification of the CLB.\n"
                    },
                    "modificationProtectionReason": {
                        "type": "string",
                        "description": "The reason of the console modification protection.\n"
                    },
                    "modificationProtectionStatus": {
                        "type": "string",
                        "description": "The status of the console modification protection.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region of the request.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the CLB. And optional choice contains `public` or `private`.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Clb/clbRule:ClbRule": {
            "description": "Provides a resource to manage clb rule\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.ClbRule(\"foo\", {\n    domain: \"test-volc123.com\",\n    listenerId: \"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n    serverGroupId: \"rsp-273yxuqfova4g7fap8tyemn6t\",\n    url: \"/yyyy\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.ClbRule(\"foo\",\n    domain=\"test-volc123.com\",\n    listener_id=\"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n    server_group_id=\"rsp-273yxuqfova4g7fap8tyemn6t\",\n    url=\"/yyyy\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.ClbRule(\"foo\", new Volcengine.Clb.ClbRuleArgs\n        {\n            Domain = \"test-volc123.com\",\n            ListenerId = \"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n            ServerGroupId = \"rsp-273yxuqfova4g7fap8tyemn6t\",\n            Url = \"/yyyy\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewClbRule(ctx, \"foo\", \u0026Clb.ClbRuleArgs{\n\t\t\tDomain:        pulumi.String(\"test-volc123.com\"),\n\t\t\tListenerId:    pulumi.String(\"lsn-273ywvnmiu70g7fap8u2xzg9d\"),\n\t\t\tServerGroupId: pulumi.String(\"rsp-273yxuqfova4g7fap8tyemn6t\"),\n\t\t\tUrl:           pulumi.String(\"/yyyy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ClbRule(\"foo\", ClbRuleArgs.builder()        \n            .domain(\"test-volc123.com\")\n            .listenerId(\"lsn-273ywvnmiu70g7fap8u2xzg9d\")\n            .serverGroupId(\"rsp-273yxuqfova4g7fap8tyemn6t\")\n            .url(\"/yyyy\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:ClbRule\n    properties:\n      domain: test-volc123.com\n      listenerId: lsn-273ywvnmiu70g7fap8u2xzg9d\n      serverGroupId: rsp-273yxuqfova4g7fap8tyemn6t\n      url: /yyyy\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRule can be imported using the id, e.g. NoticeresourceId is ruleId, due to the lack of describeRuleAttributes in openapi, for import resources, please use ruleId:listenerId to import. we will fix this problem later.\n\n```sh\n $ pulumi import volcengine:Clb/clbRule:ClbRule foo rule-273zb9hzi1gqo7fap8u1k3utb:lsn-273ywvnmiu70g7fap8u2xzg9d\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Rule.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of Rule.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "Server Group Id.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n"
                }
            },
            "required": [
                "listenerId",
                "serverGroupId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Rule.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of Rule.\n",
                    "willReplaceOnChanges": true
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of listener.\n",
                    "willReplaceOnChanges": true
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "Server Group Id.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Url of Rule.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "listenerId",
                "serverGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClbRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Rule.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of listener.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "Server Group Id.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The Url of Rule.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Clb/listener:Listener": {
            "description": "Provides a resource to manage listener\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.Listener(\"foo\", {\n    enabled: \"on\",\n    healthCheck: {\n        domain: \"github.com\",\n        enabled: \"on\",\n        healthyThreshold: 5,\n        httpCode: \"http_2xx\",\n        interval: 10,\n        method: \"GET\",\n        timeout: 3,\n        unHealthyThreshold: 2,\n        uri: \"/\",\n    },\n    listenerName: \"Demo-HTTP-90\",\n    loadBalancerId: \"clb-273ylkl0a3i807fap8t4unbsq\",\n    port: 90,\n    protocol: \"HTTP\",\n    serverGroupId: \"rsp-273yv0kir1vk07fap8tt9jtwg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.Listener(\"foo\",\n    enabled=\"on\",\n    health_check=volcengine.clb.ListenerHealthCheckArgs(\n        domain=\"github.com\",\n        enabled=\"on\",\n        healthy_threshold=5,\n        http_code=\"http_2xx\",\n        interval=10,\n        method=\"GET\",\n        timeout=3,\n        un_healthy_threshold=2,\n        uri=\"/\",\n    ),\n    listener_name=\"Demo-HTTP-90\",\n    load_balancer_id=\"clb-273ylkl0a3i807fap8t4unbsq\",\n    port=90,\n    protocol=\"HTTP\",\n    server_group_id=\"rsp-273yv0kir1vk07fap8tt9jtwg\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.Listener(\"foo\", new Volcengine.Clb.ListenerArgs\n        {\n            Enabled = \"on\",\n            HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs\n            {\n                Domain = \"github.com\",\n                Enabled = \"on\",\n                HealthyThreshold = 5,\n                HttpCode = \"http_2xx\",\n                Interval = 10,\n                Method = \"GET\",\n                Timeout = 3,\n                UnHealthyThreshold = 2,\n                Uri = \"/\",\n            },\n            ListenerName = \"Demo-HTTP-90\",\n            LoadBalancerId = \"clb-273ylkl0a3i807fap8t4unbsq\",\n            Port = 90,\n            Protocol = \"HTTP\",\n            ServerGroupId = \"rsp-273yv0kir1vk07fap8tt9jtwg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewListener(ctx, \"foo\", \u0026Clb.ListenerArgs{\n\t\t\tEnabled: pulumi.String(\"on\"),\n\t\t\tHealthCheck: \u0026clb.ListenerHealthCheckArgs{\n\t\t\t\tDomain:             pulumi.String(\"github.com\"),\n\t\t\t\tEnabled:            pulumi.String(\"on\"),\n\t\t\t\tHealthyThreshold:   pulumi.Int(5),\n\t\t\t\tHttpCode:           pulumi.String(\"http_2xx\"),\n\t\t\t\tInterval:           pulumi.Int(10),\n\t\t\t\tMethod:             pulumi.String(\"GET\"),\n\t\t\t\tTimeout:            pulumi.Int(3),\n\t\t\t\tUnHealthyThreshold: pulumi.Int(2),\n\t\t\t\tUri:                pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tListenerName:   pulumi.String(\"Demo-HTTP-90\"),\n\t\t\tLoadBalancerId: pulumi.String(\"clb-273ylkl0a3i807fap8t4unbsq\"),\n\t\t\tPort:           pulumi.Int(90),\n\t\t\tProtocol:       pulumi.String(\"HTTP\"),\n\t\t\tServerGroupId:  pulumi.String(\"rsp-273yv0kir1vk07fap8tt9jtwg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Listener(\"foo\", ListenerArgs.builder()        \n            .enabled(\"on\")\n            .healthCheck(ListenerHealthCheckArgs.builder()\n                .domain(\"github.com\")\n                .enabled(\"on\")\n                .healthyThreshold(5)\n                .httpCode(\"http_2xx\")\n                .interval(10)\n                .method(\"GET\")\n                .timeout(3)\n                .unHealthyThreshold(2)\n                .uri(\"/\")\n                .build())\n            .listenerName(\"Demo-HTTP-90\")\n            .loadBalancerId(\"clb-273ylkl0a3i807fap8t4unbsq\")\n            .port(90)\n            .protocol(\"HTTP\")\n            .serverGroupId(\"rsp-273yv0kir1vk07fap8tt9jtwg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:Listener\n    properties:\n      enabled: on\n      healthCheck:\n        domain: github.com\n        enabled: on\n        healthyThreshold: 5\n        httpCode: http_2xx\n        interval: 10\n        method: GET\n        timeout: 3\n        unHealthyThreshold: 2\n        uri: /\n      listenerName: Demo-HTTP-90\n      loadBalancerId: clb-273ylkl0a3i807fap8t4unbsq\n      port: 90\n      protocol: HTTP\n      serverGroupId: rsp-273yv0kir1vk07fap8tt9jtwg\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nListener can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Clb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso\n```\n\n ",
            "properties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of the Acl.\n"
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                },
                "aclType": {
                    "type": "string",
                    "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "The certificate id associated with the listener.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Listener.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                },
                "establishedTimeout": {
                    "type": "integer",
                    "description": "The connection timeout of the Listener.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/volcengine:Clb/ListenerHealthCheck:ListenerHealthCheck",
                    "description": "The config of health check.\n"
                },
                "listenerId": {
                    "type": "string",
                    "description": "The ID of the Listener.\n"
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The region of the request.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n"
                },
                "scheduler": {
                    "type": "string",
                    "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The server group id associated with the listener.\n"
                }
            },
            "required": [
                "aclStatus",
                "aclType",
                "enabled",
                "establishedTimeout",
                "healthCheck",
                "listenerId",
                "listenerName",
                "loadBalancerId",
                "port",
                "protocol",
                "scheduler",
                "serverGroupId"
            ],
            "inputProperties": {
                "aclIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The id list of the Acl.\n"
                },
                "aclStatus": {
                    "type": "string",
                    "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                },
                "aclType": {
                    "type": "string",
                    "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "The certificate id associated with the listener.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Listener.\n"
                },
                "enabled": {
                    "type": "string",
                    "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                },
                "establishedTimeout": {
                    "type": "integer",
                    "description": "The connection timeout of the Listener.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/volcengine:Clb/ListenerHealthCheck:ListenerHealthCheck",
                    "description": "The config of health check.\n"
                },
                "listenerName": {
                    "type": "string",
                    "description": "The name of the Listener.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The region of the request.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request of the Listener.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n",
                    "willReplaceOnChanges": true
                },
                "scheduler": {
                    "type": "string",
                    "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The server group id associated with the listener.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "port",
                "protocol",
                "serverGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Listener resources.\n",
                "properties": {
                    "aclIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The id list of the Acl.\n"
                    },
                    "aclStatus": {
                        "type": "string",
                        "description": "The enable status of Acl. Optional choice contains `on`, `off`.\n"
                    },
                    "aclType": {
                        "type": "string",
                        "description": "The type of the Acl. Optional choice contains `white`, `black`.\n"
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate id associated with the listener.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Listener.\n"
                    },
                    "enabled": {
                        "type": "string",
                        "description": "The enable status of the Listener. Optional choice contains `on`, `off`.\n"
                    },
                    "establishedTimeout": {
                        "type": "integer",
                        "description": "The connection timeout of the Listener.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/volcengine:Clb/ListenerHealthCheck:ListenerHealthCheck",
                        "description": "The config of health check.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The ID of the Listener.\n"
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The region of the request.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port receiving request of the Listener.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.\n",
                        "willReplaceOnChanges": true
                    },
                    "scheduler": {
                        "type": "string",
                        "description": "The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The server group id associated with the listener.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Clb/serverGroup:ServerGroup": {
            "description": "Provides a resource to manage server group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.ServerGroup(\"foo\", {\n    description: \"hello demo11\",\n    loadBalancerId: \"clb-273z7d4r8tvk07fap8tsniyfe\",\n    serverGroupName: \"demo-demo11\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.ServerGroup(\"foo\",\n    description=\"hello demo11\",\n    load_balancer_id=\"clb-273z7d4r8tvk07fap8tsniyfe\",\n    server_group_name=\"demo-demo11\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.ServerGroup(\"foo\", new Volcengine.Clb.ServerGroupArgs\n        {\n            Description = \"hello demo11\",\n            LoadBalancerId = \"clb-273z7d4r8tvk07fap8tsniyfe\",\n            ServerGroupName = \"demo-demo11\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewServerGroup(ctx, \"foo\", \u0026Clb.ServerGroupArgs{\n\t\t\tDescription:     pulumi.String(\"hello demo11\"),\n\t\t\tLoadBalancerId:  pulumi.String(\"clb-273z7d4r8tvk07fap8tsniyfe\"),\n\t\t\tServerGroupName: pulumi.String(\"demo-demo11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServerGroup(\"foo\", ServerGroupArgs.builder()        \n            .description(\"hello demo11\")\n            .loadBalancerId(\"clb-273z7d4r8tvk07fap8tsniyfe\")\n            .serverGroupName(\"demo-demo11\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:ServerGroup\n    properties:\n      description: hello demo11\n      loadBalancerId: clb-273z7d4r8tvk07fap8tsniyfe\n      serverGroupName: demo-demo11\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServerGroup can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Clb/serverGroup:ServerGroup default rsp-273yv0kir1vk07fap8tt9jtwg\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of ServerGroup.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n"
                }
            },
            "required": [
                "description",
                "loadBalancerId",
                "serverGroupId",
                "serverGroupName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of ServerGroup.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "The ID of the Clb.\n",
                    "willReplaceOnChanges": true
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverGroupName": {
                    "type": "string",
                    "description": "The name of the ServerGroup.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of ServerGroup.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The ID of the Clb.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Clb/serverGroupServer:ServerGroupServer": {
            "description": "Provides a resource to manage server group server\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Clb.ServerGroupServer(\"foo\", {\n    description: \"This is a server\",\n    instanceId: \"i-72q1zvko6i5lnawvg940\",\n    ip: \"192.168.100.99\",\n    port: 80,\n    serverGroupId: \"rsp-273zn4ewlhkw07fap8tig9ujz\",\n    type: \"ecs\",\n    weight: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.clb.ServerGroupServer(\"foo\",\n    description=\"This is a server\",\n    instance_id=\"i-72q1zvko6i5lnawvg940\",\n    ip=\"192.168.100.99\",\n    port=80,\n    server_group_id=\"rsp-273zn4ewlhkw07fap8tig9ujz\",\n    type=\"ecs\",\n    weight=100)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Clb.ServerGroupServer(\"foo\", new Volcengine.Clb.ServerGroupServerArgs\n        {\n            Description = \"This is a server\",\n            InstanceId = \"i-72q1zvko6i5lnawvg940\",\n            Ip = \"192.168.100.99\",\n            Port = 80,\n            ServerGroupId = \"rsp-273zn4ewlhkw07fap8tig9ujz\",\n            Type = \"ecs\",\n            Weight = 100,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.NewServerGroupServer(ctx, \"foo\", \u0026Clb.ServerGroupServerArgs{\n\t\t\tDescription:   pulumi.String(\"This is a server\"),\n\t\t\tInstanceId:    pulumi.String(\"i-72q1zvko6i5lnawvg940\"),\n\t\t\tIp:            pulumi.String(\"192.168.100.99\"),\n\t\t\tPort:          pulumi.Int(80),\n\t\t\tServerGroupId: pulumi.String(\"rsp-273zn4ewlhkw07fap8tig9ujz\"),\n\t\t\tType:          pulumi.String(\"ecs\"),\n\t\t\tWeight:        pulumi.Int(100),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new ServerGroupServer(\"foo\", ServerGroupServerArgs.builder()        \n            .description(\"This is a server\")\n            .instanceId(\"i-72q1zvko6i5lnawvg940\")\n            .ip(\"192.168.100.99\")\n            .port(80)\n            .serverGroupId(\"rsp-273zn4ewlhkw07fap8tig9ujz\")\n            .type(\"ecs\")\n            .weight(100)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Clb:ServerGroupServer\n    properties:\n      description: This is a server\n      instanceId: i-72q1zvko6i5lnawvg940\n      ip: 192.168.100.99\n      port: 80\n      serverGroupId: rsp-273zn4ewlhkw07fap8tig9ujz\n      type: ecs\n      weight: 100\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServerGroupServer can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Clb/serverGroupServer:ServerGroupServer default rs-3ciynux6i1x4w****rszh49sj\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The server id of instance in ServerGroup.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance.\n"
                }
            },
            "required": [
                "serverId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                    "willReplaceOnChanges": true
                },
                "ip": {
                    "type": "string",
                    "description": "The private ip of the instance.\n",
                    "willReplaceOnChanges": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port receiving request.\n"
                },
                "serverGroupId": {
                    "type": "string",
                    "description": "The ID of the ServerGroup.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                    "willReplaceOnChanges": true
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the instance.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerGroupServer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ecs instance or the network card bound to ecs instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "ip": {
                        "type": "string",
                        "description": "The private ip of the instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port receiving request.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The server id of instance in ServerGroup.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of instance. Optional choice contains `ecs`, `eni`.\n",
                        "willReplaceOnChanges": true
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Ebs/volume:Volume": {
            "description": "Provides a resource to manage volume\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Ebs.Volume(\"foo\", {\n    kind: \"data\",\n    size: 40,\n    volumeName: \"terraform-test\",\n    volumeType: \"PTSSD\",\n    zoneId: \"cn-lingqiu-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ebs.Volume(\"foo\",\n    kind=\"data\",\n    size=40,\n    volume_name=\"terraform-test\",\n    volume_type=\"PTSSD\",\n    zone_id=\"cn-lingqiu-a\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ebs.Volume(\"foo\", new Volcengine.Ebs.VolumeArgs\n        {\n            Kind = \"data\",\n            Size = 40,\n            VolumeName = \"terraform-test\",\n            VolumeType = \"PTSSD\",\n            ZoneId = \"cn-lingqiu-a\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ebs.NewVolume(ctx, \"foo\", \u0026Ebs.VolumeArgs{\n\t\t\tKind:       pulumi.String(\"data\"),\n\t\t\tSize:       pulumi.Int(40),\n\t\t\tVolumeName: pulumi.String(\"terraform-test\"),\n\t\t\tVolumeType: pulumi.String(\"PTSSD\"),\n\t\t\tZoneId:     pulumi.String(\"cn-lingqiu-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Volume(\"foo\", VolumeArgs.builder()        \n            .kind(\"data\")\n            .size(40)\n            .volumeName(\"terraform-test\")\n            .volumeType(\"PTSSD\")\n            .zoneId(\"cn-lingqiu-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Ebs:Volume\n    properties:\n      kind: data\n      size: 40\n      volumeName: terraform-test\n      volumeType: PTSSD\n      zoneId: cn-lingqiu-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolume can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Ebs/volume:Volume default vol-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "billingType": {
                    "type": "integer",
                    "description": "Billing type of Volume.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation time of Volume.\n"
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Volume.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of Volume.\n"
                },
                "payType": {
                    "type": "string",
                    "description": "Pay type of Volume.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of Volume.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Volume.\n"
                },
                "tradeStatus": {
                    "type": "integer",
                    "description": "Status of Trade.\n"
                },
                "volumeChargeType": {
                    "type": "string",
                    "description": "The charge type of the Volume.\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n"
                }
            },
            "required": [
                "billingType",
                "createdAt",
                "deleteWithInstance",
                "kind",
                "payType",
                "size",
                "status",
                "tradeStatus",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "inputProperties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Volume.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of Volume.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of Volume.\n"
                },
                "volumeChargeType": {
                    "type": "string",
                    "description": "The charge type of the Volume.\n",
                    "willReplaceOnChanges": true
                },
                "volumeName": {
                    "type": "string",
                    "description": "The name of Volume.\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "The type of Volume.\n",
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "kind",
                "size",
                "volumeName",
                "volumeType",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "billingType": {
                        "type": "integer",
                        "description": "Billing type of Volume.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time of Volume.\n"
                    },
                    "deleteWithInstance": {
                        "type": "boolean",
                        "description": "Delete Volume with Attached Instance.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Volume.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of Volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "payType": {
                        "type": "string",
                        "description": "Pay type of Volume.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of Volume.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Volume.\n"
                    },
                    "tradeStatus": {
                        "type": "integer",
                        "description": "Status of Trade.\n"
                    },
                    "volumeChargeType": {
                        "type": "string",
                        "description": "The charge type of the Volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeName": {
                        "type": "string",
                        "description": "The name of Volume.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "The type of Volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The id of the Zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Ebs/volumeAttach:VolumeAttach": {
            "description": "Provides a resource to manage volume attach\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Ebs.VolumeAttach(\"foo\", {\n    instanceId: \"i-4ay59ww7dq8dt9c29hd4\",\n    volumeId: \"vol-3tzl52wubz3b9fciw7ev\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ebs.VolumeAttach(\"foo\",\n    instance_id=\"i-4ay59ww7dq8dt9c29hd4\",\n    volume_id=\"vol-3tzl52wubz3b9fciw7ev\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ebs.VolumeAttach(\"foo\", new Volcengine.Ebs.VolumeAttachArgs\n        {\n            InstanceId = \"i-4ay59ww7dq8dt9c29hd4\",\n            VolumeId = \"vol-3tzl52wubz3b9fciw7ev\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ebs.NewVolumeAttach(ctx, \"foo\", \u0026Ebs.VolumeAttachArgs{\n\t\t\tInstanceId: pulumi.String(\"i-4ay59ww7dq8dt9c29hd4\"),\n\t\t\tVolumeId:   pulumi.String(\"vol-3tzl52wubz3b9fciw7ev\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VolumeAttach(\"foo\", VolumeAttachArgs.builder()        \n            .instanceId(\"i-4ay59ww7dq8dt9c29hd4\")\n            .volumeId(\"vol-3tzl52wubz3b9fciw7ev\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Ebs:VolumeAttach\n    properties:\n      instanceId: i-4ay59ww7dq8dt9c29hd4\n      volumeId: vol-3tzl52wubz3b9fciw7ev\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolumeAttach can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Ebs/volumeAttach:VolumeAttach default vol-abc12345:i-abc12345\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation time of Volume.\n"
                },
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of Instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Volume.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Update time of Volume.\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "The Id of Volume.\n"
                }
            },
            "required": [
                "createdAt",
                "deleteWithInstance",
                "instanceId",
                "status",
                "updatedAt",
                "volumeId"
            ],
            "inputProperties": {
                "deleteWithInstance": {
                    "type": "boolean",
                    "description": "Delete Volume with Attached Instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The Id of Instance.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "string",
                    "description": "The Id of Volume.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttach resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation time of Volume.\n"
                    },
                    "deleteWithInstance": {
                        "type": "boolean",
                        "description": "Delete Volume with Attached Instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Volume.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Update time of Volume.\n"
                    },
                    "volumeId": {
                        "type": "string",
                        "description": "The Id of Volume.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Ecs/instance:Instance": {
            "description": "Provides a resource to manage ecs instance\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.vpc.Vpc(\"foo\", {\n    vpcName: \"tf-test-2\",\n    cidrBlock: \"172.16.0.0/16\",\n});\nconst foo1Subnet = new volcengine.vpc.Subnet(\"foo1Subnet\", {\n    subnetName: \"subnet-test-1\",\n    cidrBlock: \"172.16.1.0/24\",\n    zoneId: \"cn-beijing-a\",\n    vpcId: foo.id,\n});\nconst foo1SecurityGroup = new volcengine.vpc.SecurityGroup(\"foo1SecurityGroup\", {vpcId: foo.id}, {\n    dependsOn: [foo1Subnet],\n});\nconst _default = new volcengine.ecs.Instance(\"default\", {\n    zoneId: \"cn-beijing-a\",\n    imageId: \"image-aagd56zrw2jtdro3bnrl\",\n    instanceType: \"ecs.g1.large\",\n    instanceName: \"xym-tf-test-2\",\n    description: \"xym-tf-test-desc-1\",\n    password: \"93f0cb0614Aab12\",\n    instanceChargeType: \"PostPaid\",\n    systemVolumeType: \"PTSSD\",\n    systemVolumeSize: 60,\n    subnetId: foo1Subnet.id,\n    securityGroupIds: [foo1SecurityGroup.id],\n    dataVolumes: [{\n        volumeType: \"PTSSD\",\n        size: 100,\n        deleteWithInstance: true,\n    }],\n});\n//  secondary_network_interfaces {\n//    subnet_id = volcengine_subnet.foo1.id\n//    security_group_ids = [volcengine_security_group.foo1.id]\n//  }\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Vpc(\"foo\",\n    vpc_name=\"tf-test-2\",\n    cidr_block=\"172.16.0.0/16\")\nfoo1_subnet = volcengine.vpc.Subnet(\"foo1Subnet\",\n    subnet_name=\"subnet-test-1\",\n    cidr_block=\"172.16.1.0/24\",\n    zone_id=\"cn-beijing-a\",\n    vpc_id=foo.id)\nfoo1_security_group = volcengine.vpc.SecurityGroup(\"foo1SecurityGroup\", vpc_id=foo.id,\nopts=pulumi.ResourceOptions(depends_on=[foo1_subnet]))\ndefault = volcengine.ecs.Instance(\"default\",\n    zone_id=\"cn-beijing-a\",\n    image_id=\"image-aagd56zrw2jtdro3bnrl\",\n    instance_type=\"ecs.g1.large\",\n    instance_name=\"xym-tf-test-2\",\n    description=\"xym-tf-test-desc-1\",\n    password=\"93f0cb0614Aab12\",\n    instance_charge_type=\"PostPaid\",\n    system_volume_type=\"PTSSD\",\n    system_volume_size=60,\n    subnet_id=foo1_subnet.id,\n    security_group_ids=[foo1_security_group.id],\n    data_volumes=[volcengine.ecs.InstanceDataVolumeArgs(\n        volume_type=\"PTSSD\",\n        size=100,\n        delete_with_instance=True,\n    )])\n#  secondary_network_interfaces {\n#    subnet_id = volcengine_subnet.foo1.id\n#    security_group_ids = [volcengine_security_group.foo1.id]\n#  }\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Vpc(\"foo\", new Volcengine.Vpc.VpcArgs\n        {\n            VpcName = \"tf-test-2\",\n            CidrBlock = \"172.16.0.0/16\",\n        });\n        var foo1Subnet = new Volcengine.Vpc.Subnet(\"foo1Subnet\", new Volcengine.Vpc.SubnetArgs\n        {\n            SubnetName = \"subnet-test-1\",\n            CidrBlock = \"172.16.1.0/24\",\n            ZoneId = \"cn-beijing-a\",\n            VpcId = foo.Id,\n        });\n        var foo1SecurityGroup = new Volcengine.Vpc.SecurityGroup(\"foo1SecurityGroup\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = foo.Id,\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                foo1Subnet,\n            },\n        });\n        var @default = new Volcengine.Ecs.Instance(\"default\", new Volcengine.Ecs.InstanceArgs\n        {\n            ZoneId = \"cn-beijing-a\",\n            ImageId = \"image-aagd56zrw2jtdro3bnrl\",\n            InstanceType = \"ecs.g1.large\",\n            InstanceName = \"xym-tf-test-2\",\n            Description = \"xym-tf-test-desc-1\",\n            Password = \"93f0cb0614Aab12\",\n            InstanceChargeType = \"PostPaid\",\n            SystemVolumeType = \"PTSSD\",\n            SystemVolumeSize = 60,\n            SubnetId = foo1Subnet.Id,\n            SecurityGroupIds = \n            {\n                foo1SecurityGroup.Id,\n            },\n            DataVolumes = \n            {\n                new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs\n                {\n                    VolumeType = \"PTSSD\",\n                    Size = 100,\n                    DeleteWithInstance = true,\n                },\n            },\n        });\n        //  secondary_network_interfaces {\n        //    subnet_id = volcengine_subnet.foo1.id\n        //    security_group_ids = [volcengine_security_group.foo1.id]\n        //  }\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ecs\"\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := Vpc.NewVpc(ctx, \"foo\", \u0026Vpc.VpcArgs{\n\t\t\tVpcName:   pulumi.String(\"tf-test-2\"),\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo1Subnet, err := Vpc.NewSubnet(ctx, \"foo1Subnet\", \u0026Vpc.SubnetArgs{\n\t\t\tSubnetName: pulumi.String(\"subnet-test-1\"),\n\t\t\tCidrBlock:  pulumi.String(\"172.16.1.0/24\"),\n\t\t\tZoneId:     pulumi.String(\"cn-beijing-a\"),\n\t\t\tVpcId:      foo.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo1SecurityGroup, err := Vpc.NewSecurityGroup(ctx, \"foo1SecurityGroup\", \u0026Vpc.SecurityGroupArgs{\n\t\t\tVpcId: foo.ID(),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tfoo1Subnet,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Ecs.NewInstance(ctx, \"default\", \u0026Ecs.InstanceArgs{\n\t\t\tZoneId:             pulumi.String(\"cn-beijing-a\"),\n\t\t\tImageId:            pulumi.String(\"image-aagd56zrw2jtdro3bnrl\"),\n\t\t\tInstanceType:       pulumi.String(\"ecs.g1.large\"),\n\t\t\tInstanceName:       pulumi.String(\"xym-tf-test-2\"),\n\t\t\tDescription:        pulumi.String(\"xym-tf-test-desc-1\"),\n\t\t\tPassword:           pulumi.String(\"93f0cb0614Aab12\"),\n\t\t\tInstanceChargeType: pulumi.String(\"PostPaid\"),\n\t\t\tSystemVolumeType:   pulumi.String(\"PTSSD\"),\n\t\t\tSystemVolumeSize:   pulumi.Int(60),\n\t\t\tSubnetId:           foo1Subnet.ID(),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tfoo1SecurityGroup.ID(),\n\t\t\t},\n\t\t\tDataVolumes: ecs.InstanceDataVolumeArray{\n\t\t\t\t\u0026ecs.InstanceDataVolumeArgs{\n\t\t\t\t\tVolumeType:         pulumi.String(\"PTSSD\"),\n\t\t\t\t\tSize:               pulumi.Int(100),\n\t\t\t\t\tDeleteWithInstance: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\nimport com.pulumi.resources.CustomResourceOptions;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Vpc(\"foo\", VpcArgs.builder()        \n            .vpcName(\"tf-test-2\")\n            .cidrBlock(\"172.16.0.0/16\")\n            .build());\n\n        var foo1Subnet = new Subnet(\"foo1Subnet\", SubnetArgs.builder()        \n            .subnetName(\"subnet-test-1\")\n            .cidrBlock(\"172.16.1.0/24\")\n            .zoneId(\"cn-beijing-a\")\n            .vpcId(foo.id())\n            .build());\n\n        var foo1SecurityGroup = new SecurityGroup(\"foo1SecurityGroup\", SecurityGroupArgs.builder()        \n            .vpcId(foo.id())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(foo1Subnet)\n                .build());\n\n        var default_ = new Instance(\"default\", InstanceArgs.builder()        \n            .zoneId(\"cn-beijing-a\")\n            .imageId(\"image-aagd56zrw2jtdro3bnrl\")\n            .instanceType(\"ecs.g1.large\")\n            .instanceName(\"xym-tf-test-2\")\n            .description(\"xym-tf-test-desc-1\")\n            .password(\"93f0cb0614Aab12\")\n            .instanceChargeType(\"PostPaid\")\n            .systemVolumeType(\"PTSSD\")\n            .systemVolumeSize(60)\n            .subnetId(foo1Subnet.id())\n            .securityGroupIds(foo1SecurityGroup.id())\n            .dataVolumes(InstanceDataVolumeArgs.builder()\n                .volumeType(\"PTSSD\")\n                .size(100)\n                .deleteWithInstance(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:Vpc\n    properties:\n      vpcName: tf-test-2\n      cidrBlock: 172.16.0.0/16\n  foo1Subnet:\n    type: volcengine:Vpc:Subnet\n    properties:\n      subnetName: subnet-test-1\n      cidrBlock: 172.16.1.0/24\n      zoneId: cn-beijing-a\n      vpcId: ${foo.id}\n  foo1SecurityGroup:\n    type: volcengine:Vpc:SecurityGroup\n    properties:\n      vpcId: ${foo.id}\n    options:\n      dependson:\n        - ${foo1Subnet}\n  default:\n    type: volcengine:Ecs:Instance\n    properties:\n      zoneId: cn-beijing-a\n      imageId: image-aagd56zrw2jtdro3bnrl\n      instanceType: ecs.g1.large\n      instanceName: xym-tf-test-2\n      description: xym-tf-test-desc-1\n      password: 93f0cb0614Aab12\n      instanceChargeType: PostPaid\n      systemVolumeType: PTSSD\n      systemVolumeSize: 60\n      subnetId: ${foo1Subnet.id}\n      securityGroupIds:\n        - ${foo1SecurityGroup.id}\n      dataVolumes:\n        - volumeType: PTSSD\n          size: 100\n          deleteWithInstance: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nECS Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.\n"
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.\n"
                },
                "cpus": {
                    "type": "integer",
                    "description": "The number of ECS instance CPU cores.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The create time of ECS instance.\n"
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstanceDataVolume:InstanceDataVolume"
                    },
                    "description": "The data volume collection of  ECS instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n"
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster ID of ECS instance.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID of ECS instance.\n"
                },
                "includeDataVolumes": {
                    "type": "boolean",
                    "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of ECS instance.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of ECS instance.\n"
                },
                "keyPairId": {
                    "type": "string",
                    "description": "The ssh key ID of ECS instance.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ssh key name of ECS instance.\n"
                },
                "memorySize": {
                    "type": "integer",
                    "description": "The memory size of ECS instance.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The ID of primary networkInterface.\n"
                },
                "osName": {
                    "type": "string",
                    "description": "The os name of ECS instance.\n"
                },
                "osType": {
                    "type": "string",
                    "description": "The os type of ECS instance.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of ECS instance.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                },
                "secondaryNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                    },
                    "description": "The secondary networkInterface detail collection of ECS instance.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The security enhancement strategy of ECS instance.Default is true.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of primary networkInterface.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of ECS instance.\n"
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "The stop mode of ECS instance.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of primary networkInterface.\n"
                },
                "systemVolumeId": {
                    "type": "string",
                    "description": "The ID of system volume.\n"
                },
                "systemVolumeSize": {
                    "type": "integer",
                    "description": "The size of system volume.\n"
                },
                "systemVolumeType": {
                    "type": "string",
                    "description": "The type of system volume.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The update time of ECS instance.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The user data of ECS instance.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The VPC ID of ECS instance.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n"
                }
            },
            "required": [
                "cpus",
                "createdAt",
                "description",
                "hostName",
                "imageId",
                "instanceChargeType",
                "instanceId",
                "instanceName",
                "instanceType",
                "keyPairId",
                "keyPairName",
                "memorySize",
                "networkInterfaceId",
                "osName",
                "osType",
                "securityGroupIds",
                "status",
                "stoppedMode",
                "subnetId",
                "systemVolumeId",
                "systemVolumeSize",
                "systemVolumeType",
                "updatedAt",
                "userData",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.\n",
                    "willReplaceOnChanges": true
                },
                "autoRenewPeriod": {
                    "type": "integer",
                    "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.\n",
                    "willReplaceOnChanges": true
                },
                "dataVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstanceDataVolume:InstanceDataVolume"
                    },
                    "description": "The data volume collection of  ECS instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of ECS instance.\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "The host name of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "hpcClusterId": {
                    "type": "string",
                    "description": "The hpc cluster ID of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "imageId": {
                    "type": "string",
                    "description": "The Image ID of ECS instance.\n"
                },
                "includeDataVolumes": {
                    "type": "boolean",
                    "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                },
                "instanceChargeType": {
                    "type": "string",
                    "description": "The charge type of ECS instance.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "The name of ECS instance.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The instance type of ECS instance.\n"
                },
                "keyPairName": {
                    "type": "string",
                    "description": "The ssh key name of ECS instance.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of ECS instance.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                },
                "secondaryNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                    },
                    "description": "The secondary networkInterface detail collection of ECS instance.\n"
                },
                "securityEnhancementStrategy": {
                    "type": "string",
                    "description": "The security enhancement strategy of ECS instance.Default is true.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID set of primary networkInterface.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The subnet ID of primary networkInterface.\n",
                    "willReplaceOnChanges": true
                },
                "systemVolumeSize": {
                    "type": "integer",
                    "description": "The size of system volume.\n"
                },
                "systemVolumeType": {
                    "type": "string",
                    "description": "The type of system volume.\n",
                    "willReplaceOnChanges": true
                },
                "userData": {
                    "type": "string",
                    "description": "The user data of ECS instance.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The available zone ID of ECS instance.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "imageId",
                "instanceType",
                "securityGroupIds",
                "subnetId",
                "systemVolumeSize",
                "systemVolumeType",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Instance resources.\n",
                "properties": {
                    "autoRenew": {
                        "type": "boolean",
                        "description": "The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.\n",
                        "willReplaceOnChanges": true
                    },
                    "autoRenewPeriod": {
                        "type": "integer",
                        "description": "The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.\n",
                        "willReplaceOnChanges": true
                    },
                    "cpus": {
                        "type": "integer",
                        "description": "The number of ECS instance CPU cores.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The create time of ECS instance.\n"
                    },
                    "dataVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Ecs/InstanceDataVolume:InstanceDataVolume"
                        },
                        "description": "The data volume collection of  ECS instance.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of ECS instance.\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "The host name of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The hpc cluster ID of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The Image ID of ECS instance.\n"
                    },
                    "includeDataVolumes": {
                        "type": "boolean",
                        "description": "The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.\n"
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of ECS instance.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "The name of ECS instance.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The instance type of ECS instance.\n"
                    },
                    "keyPairId": {
                        "type": "string",
                        "description": "The ssh key ID of ECS instance.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The ssh key name of ECS instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "memorySize": {
                        "type": "integer",
                        "description": "The memory size of ECS instance.\n"
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The ID of primary networkInterface.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "The os name of ECS instance.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The os type of ECS instance.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of ECS instance.\n"
                    },
                    "period": {
                        "type": "integer",
                        "description": "The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.\n"
                    },
                    "secondaryNetworkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Ecs/InstanceSecondaryNetworkInterface:InstanceSecondaryNetworkInterface"
                        },
                        "description": "The secondary networkInterface detail collection of ECS instance.\n"
                    },
                    "securityEnhancementStrategy": {
                        "type": "string",
                        "description": "The security enhancement strategy of ECS instance.Default is true.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The security group ID set of primary networkInterface.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "stoppedMode": {
                        "type": "string",
                        "description": "The stop mode of ECS instance.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The subnet ID of primary networkInterface.\n",
                        "willReplaceOnChanges": true
                    },
                    "systemVolumeId": {
                        "type": "string",
                        "description": "The ID of system volume.\n"
                    },
                    "systemVolumeSize": {
                        "type": "integer",
                        "description": "The size of system volume.\n"
                    },
                    "systemVolumeType": {
                        "type": "string",
                        "description": "The type of system volume.\n",
                        "willReplaceOnChanges": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The update time of ECS instance.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The user data of ECS instance.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Ecs/state:State": {
            "description": "Provides a resource to manage ecs instance state\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Ecs.State(\"foo\", {\n    action: \"Start\",\n    instanceId: \"i-l8u2ai4j0fauo6mrpgk8\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.ecs.State(\"foo\",\n    action=\"Start\",\n    instance_id=\"i-l8u2ai4j0fauo6mrpgk8\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Ecs.State(\"foo\", new Volcengine.Ecs.StateArgs\n        {\n            Action = \"Start\",\n            InstanceId = \"i-l8u2ai4j0fauo6mrpgk8\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ecs.NewState(ctx, \"foo\", \u0026Ecs.StateArgs{\n\t\t\tAction:     pulumi.String(\"Start\"),\n\t\t\tInstanceId: pulumi.String(\"i-l8u2ai4j0fauo6mrpgk8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new State(\"foo\", StateArgs.builder()        \n            .action(\"Start\")\n            .instanceId(\"i-l8u2ai4j0fauo6mrpgk8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Ecs:State\n    properties:\n      action: Start\n      instanceId: i-l8u2ai4j0fauo6mrpgk8\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nState Instance can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Ecs/state:State default state:i-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Start or Stop of Instance Action.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Instance.\n"
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "Stop Mode of Instance.\n"
                }
            },
            "required": [
                "action",
                "instanceId",
                "status"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Start or Stop of Instance Action.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "Id of Instance.\n",
                    "willReplaceOnChanges": true
                },
                "stoppedMode": {
                    "type": "string",
                    "description": "Stop Mode of Instance.\n"
                }
            },
            "requiredInputs": [
                "action",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering State resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Start or Stop of Instance Action.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "Id of Instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Instance.\n"
                    },
                    "stoppedMode": {
                        "type": "string",
                        "description": "Stop Mode of Instance.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Eip/address:Address": {
            "description": "Provides a resource to manage eip address\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Eip.Address(\"foo\", {\n    bandwidth: 1,\n    billingType: \"PostPaidByBandwidth\",\n    description: \"tf-test\",\n    isp: \"BGP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.eip.Address(\"foo\",\n    bandwidth=1,\n    billing_type=\"PostPaidByBandwidth\",\n    description=\"tf-test\",\n    isp=\"BGP\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Eip.Address(\"foo\", new Volcengine.Eip.AddressArgs\n        {\n            Bandwidth = 1,\n            BillingType = \"PostPaidByBandwidth\",\n            Description = \"tf-test\",\n            Isp = \"BGP\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Eip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Eip.NewAddress(ctx, \"foo\", \u0026Eip.AddressArgs{\n\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\tDescription: pulumi.String(\"tf-test\"),\n\t\t\tIsp:         pulumi.String(\"BGP\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Address(\"foo\", AddressArgs.builder()        \n            .bandwidth(1)\n            .billingType(\"PostPaidByBandwidth\")\n            .description(\"tf-test\")\n            .isp(\"BGP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Eip:Address\n    properties:\n      bandwidth: 1\n      billingType: PostPaidByBandwidth\n      description: tf-test\n      isp: BGP\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEip address can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Eip/address:Address default eip-274oj9a8rs9a87fap8sf9515b\n```\n\n ",
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n"
                },
                "eipAddress": {
                    "type": "string",
                    "description": "The ip address of the EIP.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the EIP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EIP Address.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the EIP.\n"
                }
            },
            "required": [
                "bandwidth",
                "billingType",
                "eipAddress",
                "isp",
                "name",
                "status"
            ],
            "inputProperties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "The peek bandwidth of the EIP.\n"
                },
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the EIP.\n"
                },
                "isp": {
                    "type": "string",
                    "description": "The ISP of the EIP.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the EIP Address.\n"
                }
            },
            "requiredInputs": [
                "billingType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Address resources.\n",
                "properties": {
                    "bandwidth": {
                        "type": "integer",
                        "description": "The peek bandwidth of the EIP.\n"
                    },
                    "billingType": {
                        "type": "string",
                        "description": "The billing type of the EIP Address. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic`.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the EIP.\n"
                    },
                    "eipAddress": {
                        "type": "string",
                        "description": "The ip address of the EIP.\n"
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of the EIP.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EIP Address.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the EIP.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Eip/associate:Associate": {
            "description": "Provides a resource to manage eip associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Eip.Associate(\"foo\", {\n    allocationId: \"eip-273ybrd0oeo007fap8t0nggtx\",\n    instanceId: \"i-cm9tjw9zp9j942mfkczp\",\n    instanceType: \"EcsInstance\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.eip.Associate(\"foo\",\n    allocation_id=\"eip-273ybrd0oeo007fap8t0nggtx\",\n    instance_id=\"i-cm9tjw9zp9j942mfkczp\",\n    instance_type=\"EcsInstance\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Eip.Associate(\"foo\", new Volcengine.Eip.AssociateArgs\n        {\n            AllocationId = \"eip-273ybrd0oeo007fap8t0nggtx\",\n            InstanceId = \"i-cm9tjw9zp9j942mfkczp\",\n            InstanceType = \"EcsInstance\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Eip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Eip.NewAssociate(ctx, \"foo\", \u0026Eip.AssociateArgs{\n\t\t\tAllocationId: pulumi.String(\"eip-273ybrd0oeo007fap8t0nggtx\"),\n\t\t\tInstanceId:   pulumi.String(\"i-cm9tjw9zp9j942mfkczp\"),\n\t\t\tInstanceType: pulumi.String(\"EcsInstance\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Associate(\"foo\", AssociateArgs.builder()        \n            .allocationId(\"eip-273ybrd0oeo007fap8t0nggtx\")\n            .instanceId(\"i-cm9tjw9zp9j942mfkczp\")\n            .instanceType(\"EcsInstance\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Eip:Associate\n    properties:\n      allocationId: eip-273ybrd0oeo007fap8t0nggtx\n      instanceId: i-cm9tjw9zp9j942mfkczp\n      instanceType: EcsInstance\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nEip associate can be imported using the eip allocation_id:instance_id, e.g.\n\n```sh\n $ pulumi import volcengine:Eip/associate:Associate default eip-274oj9a8rs9a87fap8sf9515b:i-cm9t9ug9lggu79yr5tcw\n```\n\n ",
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "The allocation id of the EIP.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private IP address of the instance will be associated to the EIP.\n"
                }
            },
            "required": [
                "allocationId",
                "instanceId",
                "instanceType",
                "privateIpAddress"
            ],
            "inputProperties": {
                "allocationId": {
                    "type": "string",
                    "description": "The allocation id of the EIP.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id which be associated to the EIP.\n",
                    "willReplaceOnChanges": true
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of the associated instance.\n",
                    "willReplaceOnChanges": true
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "The private IP address of the instance will be associated to the EIP.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "allocationId",
                "instanceId",
                "instanceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Associate resources.\n",
                "properties": {
                    "allocationId": {
                        "type": "string",
                        "description": "The allocation id of the EIP.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id which be associated to the EIP.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "The type of the associated instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "privateIpAddress": {
                        "type": "string",
                        "description": "The private IP address of the instance will be associated to the EIP.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/accessKey:AccessKey": {
            "description": "Provides a resource to manage iam access key\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Iam.AccessKey(\"foo\", {\n    secretFile: \"./sk\",\n    status: \"active\",\n    userName: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.AccessKey(\"foo\",\n    secret_file=\"./sk\",\n    status=\"active\",\n    user_name=\"\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.AccessKey(\"foo\", new Volcengine.Iam.AccessKeyArgs\n        {\n            SecretFile = \"./sk\",\n            Status = \"active\",\n            UserName = \"\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.NewAccessKey(ctx, \"foo\", \u0026Iam.AccessKeyArgs{\n\t\t\tSecretFile: pulumi.String(\"./sk\"),\n\t\t\tStatus:     pulumi.String(\"active\"),\n\t\t\tUserName:   pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AccessKey(\"foo\", AccessKeyArgs.builder()        \n            .secretFile(\"./sk\")\n            .status(\"active\")\n            .userName(\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Iam:AccessKey\n    properties:\n      secretFile: ./sk\n      status: active\n      userName:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam access key don't support import ",
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create date of the access key.\n"
                },
                "encryptedSecret": {
                    "type": "string",
                    "description": "The encrypted secret of the access key by pgp key, base64 encoded.\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The key fingerprint of the encrypted secret.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret of the access key.\n"
                },
                "secretFile": {
                    "type": "string",
                    "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the access key.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n"
                }
            },
            "required": [
                "createDate",
                "encryptedSecret",
                "keyFingerprint",
                "secret",
                "userName"
            ],
            "inputProperties": {
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n",
                    "willReplaceOnChanges": true
                },
                "secretFile": {
                    "type": "string",
                    "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n",
                    "willReplaceOnChanges": true
                },
                "status": {
                    "type": "string",
                    "description": "The status of the access key.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccessKey resources.\n",
                "properties": {
                    "createDate": {
                        "type": "string",
                        "description": "The create date of the access key.\n"
                    },
                    "encryptedSecret": {
                        "type": "string",
                        "description": "The encrypted secret of the access key by pgp key, base64 encoded.\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The key fingerprint of the encrypted secret.\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret of the access key.\n"
                    },
                    "secretFile": {
                        "type": "string",
                        "description": "The file to save the access id and secret. Strongly suggest you to specified it when you creating access key, otherwise, you wouldn't get its secret ever.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the access key.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/loginProfile:LoginProfile": {
            "description": "Provides a resource to manage iam login profile\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Iam.LoginProfile(\"foo\", {\n    loginAllowed: true,\n    password: \"******\",\n    passwordResetRequired: false,\n    userName: \"tf-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.LoginProfile(\"foo\",\n    login_allowed=True,\n    password=\"******\",\n    password_reset_required=False,\n    user_name=\"tf-test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.LoginProfile(\"foo\", new Volcengine.Iam.LoginProfileArgs\n        {\n            LoginAllowed = true,\n            Password = \"******\",\n            PasswordResetRequired = false,\n            UserName = \"tf-test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.NewLoginProfile(ctx, \"foo\", \u0026Iam.LoginProfileArgs{\n\t\t\tLoginAllowed:          pulumi.Bool(true),\n\t\t\tPassword:              pulumi.String(\"******\"),\n\t\t\tPasswordResetRequired: pulumi.Bool(false),\n\t\t\tUserName:              pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LoginProfile(\"foo\", LoginProfileArgs.builder()        \n            .loginAllowed(true)\n            .password(\"******\")\n            .passwordResetRequired(false)\n            .userName(\"tf-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Iam:LoginProfile\n    properties:\n      loginAllowed: true\n      password: '******'\n      passwordResetRequired: false\n      userName: tf-test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLogin profile can be imported using the UserName, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/loginProfile:LoginProfile default user_name\n```\n\n ",
            "properties": {
                "loginAllowed": {
                    "type": "boolean",
                    "description": "The flag of login allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password.\n"
                },
                "passwordResetRequired": {
                    "type": "boolean",
                    "description": "Is required reset password when next time login in.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n"
                }
            },
            "required": [
                "password",
                "userName"
            ],
            "inputProperties": {
                "loginAllowed": {
                    "type": "boolean",
                    "description": "The flag of login allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password.\n"
                },
                "passwordResetRequired": {
                    "type": "boolean",
                    "description": "Is required reset password when next time login in.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoginProfile resources.\n",
                "properties": {
                    "loginAllowed": {
                        "type": "boolean",
                        "description": "The flag of login allowed.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password.\n"
                    },
                    "passwordResetRequired": {
                        "type": "boolean",
                        "description": "Is required reset password when next time login in.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The user name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/policy:Policy": {
            "description": "Provides a resource to manage iam policy\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Iam.Policy(\"foo\", {\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n    policyName: \"TerraformResourceTest1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.Policy(\"foo\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n    policy_name=\"TerraformResourceTest1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.Policy(\"foo\", new Volcengine.Iam.PolicyArgs\n        {\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n            PolicyName = \"TerraformResourceTest1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.NewPolicy(ctx, \"foo\", \u0026Iam.PolicyArgs{\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Policy(\"foo\", PolicyArgs.builder()        \n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .policyName(\"TerraformResourceTest1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Iam:Policy\n    properties:\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n      policyName: TerraformResourceTest1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam policy can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/policy:Policy default TerraformTestPolicy\n```\n\n ",
            "properties": {
                "createDate": {
                    "type": "string",
                    "description": "The create time of the Policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n"
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyTrn": {
                    "type": "string",
                    "description": "The resource name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update time of the Policy.\n"
                }
            },
            "required": [
                "createDate",
                "policyDocument",
                "policyName",
                "policyTrn",
                "policyType",
                "updateDate"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Policy.\n"
                },
                "policyDocument": {
                    "type": "string",
                    "description": "The document of the Policy.\n"
                },
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                }
            },
            "requiredInputs": [
                "policyDocument",
                "policyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "createDate": {
                        "type": "string",
                        "description": "The create time of the Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Policy.\n"
                    },
                    "policyDocument": {
                        "type": "string",
                        "description": "The document of the Policy.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n"
                    },
                    "policyTrn": {
                        "type": "string",
                        "description": "The resource name of the Policy.\n"
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n"
                    },
                    "updateDate": {
                        "type": "string",
                        "description": "The update time of the Policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/role:Role": {
            "description": "Provides a resource to manage iam role\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Iam.Role(\"foo\", {\n    description: \"created by terraform\",\n    displayName: \"terraform role\",\n    maxSessionDuration: 43200,\n    roleName: \"TerraformTestRole\",\n    trustPolicyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.Role(\"foo\",\n    description=\"created by terraform\",\n    display_name=\"terraform role\",\n    max_session_duration=43200,\n    role_name=\"TerraformTestRole\",\n    trust_policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.Role(\"foo\", new Volcengine.Iam.RoleArgs\n        {\n            Description = \"created by terraform\",\n            DisplayName = \"terraform role\",\n            MaxSessionDuration = 43200,\n            RoleName = \"TerraformTestRole\",\n            TrustPolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.NewRole(ctx, \"foo\", \u0026Iam.RoleArgs{\n\t\t\tDescription:         pulumi.String(\"created by terraform\"),\n\t\t\tDisplayName:         pulumi.String(\"terraform role\"),\n\t\t\tMaxSessionDuration:  pulumi.Int(43200),\n\t\t\tRoleName:            pulumi.String(\"TerraformTestRole\"),\n\t\t\tTrustPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Role(\"foo\", RoleArgs.builder()        \n            .description(\"created by terraform\")\n            .displayName(\"terraform role\")\n            .maxSessionDuration(43200)\n            .roleName(\"TerraformTestRole\")\n            .trustPolicyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Iam:Role\n    properties:\n      description: created by terraform\n      displayName: terraform role\n      maxSessionDuration: 43200\n      roleName: TerraformTestRole\n      trustPolicyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"auto_scaling\"]}}]}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam role can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/role:Role default TerraformTestRole\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Role.\n"
                },
                "maxSessionDuration": {
                    "type": "integer",
                    "description": "The max session duration of the Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n"
                },
                "trn": {
                    "type": "string",
                    "description": "The resource name of the Role.\n"
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n"
                }
            },
            "required": [
                "displayName",
                "roleName",
                "trn",
                "trustPolicyDocument"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Role.\n"
                },
                "maxSessionDuration": {
                    "type": "integer",
                    "description": "The max session duration of the Role.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n",
                    "willReplaceOnChanges": true
                },
                "trustPolicyDocument": {
                    "type": "string",
                    "description": "The trust policy document of the Role.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "roleName",
                "trustPolicyDocument"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the Role.\n"
                    },
                    "maxSessionDuration": {
                        "type": "integer",
                        "description": "The max session duration of the Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n",
                        "willReplaceOnChanges": true
                    },
                    "trn": {
                        "type": "string",
                        "description": "The resource name of the Role.\n"
                    },
                    "trustPolicyDocument": {
                        "type": "string",
                        "description": "The trust policy document of the Role.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/rolePolicyAttachment:RolePolicyAttachment": {
            "description": "Provides a resource to manage iam role policy attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst role = new volcengine.iam.Role(\"role\", {\n    roleName: \"TerraformTestRole\",\n    displayName: \"terraform role\",\n    trustPolicyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n    description: \"created by terraform\",\n    maxSessionDuration: 43200,\n});\nconst policy = new volcengine.iam.Policy(\"policy\", {\n    policyName: \"TerraformResourceTest1\",\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n});\nconst foo = new volcengine.iam.RolePolicyAttachment(\"foo\", {\n    roleName: role.id,\n    policyName: policy.id,\n    policyType: policy.policyType,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nrole = volcengine.iam.Role(\"role\",\n    role_name=\"TerraformTestRole\",\n    display_name=\"terraform role\",\n    trust_policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n    description=\"created by terraform\",\n    max_session_duration=43200)\npolicy = volcengine.iam.Policy(\"policy\",\n    policy_name=\"TerraformResourceTest1\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\nfoo = volcengine.iam.RolePolicyAttachment(\"foo\",\n    role_name=role.id,\n    policy_name=policy.id,\n    policy_type=policy.policy_type)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var role = new Volcengine.Iam.Role(\"role\", new Volcengine.Iam.RoleArgs\n        {\n            RoleName = \"TerraformTestRole\",\n            DisplayName = \"terraform role\",\n            TrustPolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\",\n            Description = \"created by terraform\",\n            MaxSessionDuration = 43200,\n        });\n        var policy = new Volcengine.Iam.Policy(\"policy\", new Volcengine.Iam.PolicyArgs\n        {\n            PolicyName = \"TerraformResourceTest1\",\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n        });\n        var foo = new Volcengine.Iam.RolePolicyAttachment(\"foo\", new Volcengine.Iam.RolePolicyAttachmentArgs\n        {\n            RoleName = role.Id,\n            PolicyName = policy.Id,\n            PolicyType = policy.PolicyType,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trole, err := Iam.NewRole(ctx, \"role\", \u0026Iam.RoleArgs{\n\t\t\tRoleName:            pulumi.String(\"TerraformTestRole\"),\n\t\t\tDisplayName:         pulumi.String(\"terraform role\"),\n\t\t\tTrustPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\"),\n\t\t\tDescription:         pulumi.String(\"created by terraform\"),\n\t\t\tMaxSessionDuration:  pulumi.Int(43200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicy, err := Iam.NewPolicy(ctx, \"policy\", \u0026Iam.PolicyArgs{\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Iam.NewRolePolicyAttachment(ctx, \"foo\", \u0026Iam.RolePolicyAttachmentArgs{\n\t\t\tRoleName:   role.ID(),\n\t\t\tPolicyName: policy.ID(),\n\t\t\tPolicyType: policy.PolicyType,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var role = new Role(\"role\", RoleArgs.builder()        \n            .roleName(\"TerraformTestRole\")\n            .displayName(\"terraform role\")\n            .trustPolicyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"sts:AssumeRole\\\"],\\\"Principal\\\":{\\\"Service\\\":[\\\"auto_scaling\\\"]}}]}\")\n            .description(\"created by terraform\")\n            .maxSessionDuration(43200)\n            .build());\n\n        var policy = new Policy(\"policy\", PolicyArgs.builder()        \n            .policyName(\"TerraformResourceTest1\")\n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .build());\n\n        var foo = new RolePolicyAttachment(\"foo\", RolePolicyAttachmentArgs.builder()        \n            .roleName(role.id())\n            .policyName(policy.id())\n            .policyType(policy.policyType())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  role:\n    type: volcengine:Iam:Role\n    properties:\n      roleName: TerraformTestRole\n      displayName: terraform role\n      trustPolicyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"auto_scaling\"]}}]}'\n      description: created by terraform\n      maxSessionDuration: 43200\n  policy:\n    type: volcengine:Iam:Policy\n    properties:\n      policyName: TerraformResourceTest1\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n  foo:\n    type: volcengine:Iam:RolePolicyAttachment\n    properties:\n      roleName: ${role.id}\n      policyName: ${policy.id}\n      policyType: ${policy.policyType}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam role policy attachment can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/rolePolicyAttachment:RolePolicyAttachment default TerraformTestRole:TerraformTestPolicy:Custom\n```\n\n ",
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n"
                }
            },
            "required": [
                "policyName",
                "policyType",
                "roleName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "roleName": {
                    "type": "string",
                    "description": "The name of the Role.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyName",
                "policyType",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RolePolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/user:User": {
            "description": "Provides a resource to manage iam user\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Iam.User(\"foo\", {\n    description: \"test\",\n    displayName: \"name\",\n    userName: \"tf-test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.iam.User(\"foo\",\n    description=\"test\",\n    display_name=\"name\",\n    user_name=\"tf-test\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Iam.User(\"foo\", new Volcengine.Iam.UserArgs\n        {\n            Description = \"test\",\n            DisplayName = \"name\",\n            UserName = \"tf-test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.NewUser(ctx, \"foo\", \u0026Iam.UserArgs{\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t\tDisplayName: pulumi.String(\"name\"),\n\t\t\tUserName:    pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new User(\"foo\", UserArgs.builder()        \n            .description(\"test\")\n            .displayName(\"name\")\n            .userName(\"tf-test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Iam:User\n    properties:\n      description: test\n      displayName: name\n      userName: tf-test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam user can be imported using the UserName, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/user:User default user_name\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account id of the user.\n"
                },
                "createDate": {
                    "type": "string",
                    "description": "The create date of the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The mobile phone of the user.\n"
                },
                "trn": {
                    "type": "string",
                    "description": "The trn of the user.\n"
                },
                "updateDate": {
                    "type": "string",
                    "description": "The update date of the user.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "accountId",
                "createDate",
                "trn",
                "updateDate",
                "userName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the user.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the user.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "mobilePhone": {
                    "type": "string",
                    "description": "The mobile phone of the user.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "requiredInputs": [
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account id of the user.\n"
                    },
                    "createDate": {
                        "type": "string",
                        "description": "The create date of the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the user.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "mobilePhone": {
                        "type": "string",
                        "description": "The mobile phone of the user.\n"
                    },
                    "trn": {
                        "type": "string",
                        "description": "The trn of the user.\n"
                    },
                    "updateDate": {
                        "type": "string",
                        "description": "The update date of the user.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Iam/userPolicyAttachment:UserPolicyAttachment": {
            "description": "Provides a resource to manage iam user policy attachment\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst user = new volcengine.iam.User(\"user\", {\n    userName: \"TfTest\",\n    description: \"test\",\n});\nconst policy = new volcengine.iam.Policy(\"policy\", {\n    policyName: \"TerraformResourceTest1\",\n    description: \"created by terraform 1\",\n    policyDocument: \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n});\nconst foo = new volcengine.iam.UserPolicyAttachment(\"foo\", {\n    userName: user.userName,\n    policyName: policy.policyName,\n    policyType: policy.policyType,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nuser = volcengine.iam.User(\"user\",\n    user_name=\"TfTest\",\n    description=\"test\")\npolicy = volcengine.iam.Policy(\"policy\",\n    policy_name=\"TerraformResourceTest1\",\n    description=\"created by terraform 1\",\n    policy_document=\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\nfoo = volcengine.iam.UserPolicyAttachment(\"foo\",\n    user_name=user.user_name,\n    policy_name=policy.policy_name,\n    policy_type=policy.policy_type)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Volcengine.Iam.User(\"user\", new Volcengine.Iam.UserArgs\n        {\n            UserName = \"TfTest\",\n            Description = \"test\",\n        });\n        var policy = new Volcengine.Iam.Policy(\"policy\", new Volcengine.Iam.PolicyArgs\n        {\n            PolicyName = \"TerraformResourceTest1\",\n            Description = \"created by terraform 1\",\n            PolicyDocument = \"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\",\n        });\n        var foo = new Volcengine.Iam.UserPolicyAttachment(\"foo\", new Volcengine.Iam.UserPolicyAttachmentArgs\n        {\n            UserName = user.UserName,\n            PolicyName = policy.PolicyName,\n            PolicyType = policy.PolicyType,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := Iam.NewUser(ctx, \"user\", \u0026Iam.UserArgs{\n\t\t\tUserName:    pulumi.String(\"TfTest\"),\n\t\t\tDescription: pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicy, err := Iam.NewPolicy(ctx, \"policy\", \u0026Iam.PolicyArgs{\n\t\t\tPolicyName:     pulumi.String(\"TerraformResourceTest1\"),\n\t\t\tDescription:    pulumi.String(\"created by terraform 1\"),\n\t\t\tPolicyDocument: pulumi.String(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Iam.NewUserPolicyAttachment(ctx, \"foo\", \u0026Iam.UserPolicyAttachmentArgs{\n\t\t\tUserName:   user.UserName,\n\t\t\tPolicyName: policy.PolicyName,\n\t\t\tPolicyType: policy.PolicyType,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new User(\"user\", UserArgs.builder()        \n            .userName(\"TfTest\")\n            .description(\"test\")\n            .build());\n\n        var policy = new Policy(\"policy\", PolicyArgs.builder()        \n            .policyName(\"TerraformResourceTest1\")\n            .description(\"created by terraform 1\")\n            .policyDocument(\"{\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Action\\\":[\\\"auto_scaling:DescribeScalingGroups\\\"],\\\"Resource\\\":[\\\"*\\\"]}]}\")\n            .build());\n\n        var foo = new UserPolicyAttachment(\"foo\", UserPolicyAttachmentArgs.builder()        \n            .userName(user.userName())\n            .policyName(policy.policyName())\n            .policyType(policy.policyType())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: volcengine:Iam:User\n    properties:\n      userName: TfTest\n      description: test\n  policy:\n    type: volcengine:Iam:Policy\n    properties:\n      policyName: TerraformResourceTest1\n      description: created by terraform 1\n      policyDocument: '{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}'\n  foo:\n    type: volcengine:Iam:UserPolicyAttachment\n    properties:\n      userName: ${user.userName}\n      policyName: ${policy.policyName}\n      policyType: ${policy.policyType}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIam user policy attachment can be imported using the UserName:PolicyName:PolicyType, e.g.\n\n```sh\n $ pulumi import volcengine:Iam/userPolicyAttachment:UserPolicyAttachment default TerraformTestUser:TerraformTestPolicy:Custom\n```\n\n ",
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n"
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n"
                }
            },
            "required": [
                "policyName",
                "policyType",
                "userName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string",
                    "description": "The name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "policyType": {
                    "type": "string",
                    "description": "The type of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyName",
                "policyType",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string",
                        "description": "The name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyType": {
                        "type": "string",
                        "description": "The type of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Nat/gateway:Gateway": {
            "description": "Provides a resource to manage nat gateway\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Nat.Gateway(\"foo\", {\n    description: \"This nat gateway auto-created by terraform. \",\n    natGatewayName: \"tf-auto-demo-1\",\n    spec: \"Medium\",\n    subnetId: \"subnet-2740cym8mv9q87fap8u3hfx4i\",\n    vpcId: \"vpc-2740cxyk9im0w7fap8u013dfe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.nat.Gateway(\"foo\",\n    description=\"This nat gateway auto-created by terraform. \",\n    nat_gateway_name=\"tf-auto-demo-1\",\n    spec=\"Medium\",\n    subnet_id=\"subnet-2740cym8mv9q87fap8u3hfx4i\",\n    vpc_id=\"vpc-2740cxyk9im0w7fap8u013dfe\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Nat.Gateway(\"foo\", new Volcengine.Nat.GatewayArgs\n        {\n            Description = \"This nat gateway auto-created by terraform. \",\n            NatGatewayName = \"tf-auto-demo-1\",\n            Spec = \"Medium\",\n            SubnetId = \"subnet-2740cym8mv9q87fap8u3hfx4i\",\n            VpcId = \"vpc-2740cxyk9im0w7fap8u013dfe\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Nat\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Nat.NewGateway(ctx, \"foo\", \u0026Nat.GatewayArgs{\n\t\t\tDescription:    pulumi.String(\"This nat gateway auto-created by terraform. \"),\n\t\t\tNatGatewayName: pulumi.String(\"tf-auto-demo-1\"),\n\t\t\tSpec:           pulumi.String(\"Medium\"),\n\t\t\tSubnetId:       pulumi.String(\"subnet-2740cym8mv9q87fap8u3hfx4i\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-2740cxyk9im0w7fap8u013dfe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Gateway(\"foo\", GatewayArgs.builder()        \n            .description(\"This nat gateway auto-created by terraform. \")\n            .natGatewayName(\"tf-auto-demo-1\")\n            .spec(\"Medium\")\n            .subnetId(\"subnet-2740cym8mv9q87fap8u3hfx4i\")\n            .vpcId(\"vpc-2740cxyk9im0w7fap8u013dfe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Nat:Gateway\n    properties:\n      description: 'This nat gateway auto-created by terraform. '\n      natGatewayName: tf-auto-demo-1\n      spec: Medium\n      subnetId: subnet-2740cym8mv9q87fap8u3hfx4i\n      vpcId: vpc-2740cxyk9im0w7fap8u013dfe\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNatGateway can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Nat/gateway:Gateway default ngw-vv3t043k05sm****\n```\n\n ",
            "properties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n"
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC.\n"
                }
            },
            "required": [
                "subnetId",
                "vpcId"
            ],
            "inputProperties": {
                "billingType": {
                    "type": "string",
                    "description": "The billing type of the NatGateway.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the NatGateway.\n"
                },
                "natGatewayName": {
                    "type": "string",
                    "description": "The name of the NatGateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subnetId",
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "billingType": {
                        "type": "string",
                        "description": "The billing type of the NatGateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Nat/snatEntry:SnatEntry": {
            "description": "Provides a resource to manage snat entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Nat.SnatEntry(\"foo\", {\n    eipId: \"eip-274zlae117nr47fap8tzl24v4\",\n    natGatewayId: \"ngw-2743w1f6iqby87fap8tvm9kop\",\n    snatEntryName: \"tf-test-up\",\n    subnetId: \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.nat.SnatEntry(\"foo\",\n    eip_id=\"eip-274zlae117nr47fap8tzl24v4\",\n    nat_gateway_id=\"ngw-2743w1f6iqby87fap8tvm9kop\",\n    snat_entry_name=\"tf-test-up\",\n    subnet_id=\"subnet-2744i7u9alnnk7fap8tkq8aft\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Nat.SnatEntry(\"foo\", new Volcengine.Nat.SnatEntryArgs\n        {\n            EipId = \"eip-274zlae117nr47fap8tzl24v4\",\n            NatGatewayId = \"ngw-2743w1f6iqby87fap8tvm9kop\",\n            SnatEntryName = \"tf-test-up\",\n            SubnetId = \"subnet-2744i7u9alnnk7fap8tkq8aft\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Nat\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Nat.NewSnatEntry(ctx, \"foo\", \u0026Nat.SnatEntryArgs{\n\t\t\tEipId:         pulumi.String(\"eip-274zlae117nr47fap8tzl24v4\"),\n\t\t\tNatGatewayId:  pulumi.String(\"ngw-2743w1f6iqby87fap8tvm9kop\"),\n\t\t\tSnatEntryName: pulumi.String(\"tf-test-up\"),\n\t\t\tSubnetId:      pulumi.String(\"subnet-2744i7u9alnnk7fap8tkq8aft\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new SnatEntry(\"foo\", SnatEntryArgs.builder()        \n            .eipId(\"eip-274zlae117nr47fap8tzl24v4\")\n            .natGatewayId(\"ngw-2743w1f6iqby87fap8tvm9kop\")\n            .snatEntryName(\"tf-test-up\")\n            .subnetId(\"subnet-2744i7u9alnnk7fap8tkq8aft\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Nat:SnatEntry\n    properties:\n      eipId: eip-274zlae117nr47fap8tzl24v4\n      natGatewayId: ngw-2743w1f6iqby87fap8tvm9kop\n      snatEntryName: tf-test-up\n      subnetId: subnet-2744i7u9alnnk7fap8tkq8aft\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSnat entry can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Nat/snatEntry:SnatEntry default snat-3fvhk47kf56****\n```\n\n ",
            "properties": {
                "eipId": {
                    "type": "string",
                    "description": "The id of the public ip address used by the SNAT entry.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n"
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "The name of the SNAT entry.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the SNAT entry.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet that is required to access the internet.\n"
                }
            },
            "required": [
                "eipId",
                "natGatewayId",
                "snatEntryName",
                "status",
                "subnetId"
            ],
            "inputProperties": {
                "eipId": {
                    "type": "string",
                    "description": "The id of the public ip address used by the SNAT entry.\n"
                },
                "natGatewayId": {
                    "type": "string",
                    "description": "The id of the nat gateway to which the entry belongs.\n",
                    "willReplaceOnChanges": true
                },
                "snatEntryName": {
                    "type": "string",
                    "description": "The name of the SNAT entry.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet that is required to access the internet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "eipId",
                "natGatewayId",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SnatEntry resources.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "The id of the public ip address used by the SNAT entry.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the nat gateway to which the entry belongs.\n",
                        "willReplaceOnChanges": true
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "The name of the SNAT entry.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet that is required to access the internet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vke/cluster:Cluster": {
            "description": "Provides a resource to manage vke cluster\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vke.Cluster(\"foo\", {\n    clusterConfig: {\n        apiServerPublicAccessConfig: {\n            publicAccessNetworkConfig: {\n                bandwidth: 1,\n                billingType: \"PostPaidByBandwidth\",\n            },\n        },\n        apiServerPublicAccessEnabled: true,\n        resourcePublicAccessDefaultEnabled: true,\n        subnetIds: [\"subnet-2bzud0pbor8qo2dx0ee884y6h\"],\n    },\n    deleteProtectionEnabled: false,\n    description: \"created by terraform\",\n    podsConfig: {\n        flannelConfig: {\n            maxPodsPerNode: 64,\n            podCidrs: [\"172.27.224.0/19\"],\n        },\n        podNetworkMode: \"Flannel\",\n        vpcCniConfig: {\n            subnetIds: [\"subnet-2bzud0pbor8qo2dx0ee884y6h\"],\n        },\n    },\n    servicesConfig: {\n        serviceCidrsv4s: [\"172.30.0.0/17\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vke.Cluster(\"foo\",\n    cluster_config=volcengine.vke.ClusterClusterConfigArgs(\n        api_server_public_access_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigArgs(\n            public_access_network_config=volcengine.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs(\n                bandwidth=1,\n                billing_type=\"PostPaidByBandwidth\",\n            ),\n        ),\n        api_server_public_access_enabled=True,\n        resource_public_access_default_enabled=True,\n        subnet_ids=[\"subnet-2bzud0pbor8qo2dx0ee884y6h\"],\n    ),\n    delete_protection_enabled=False,\n    description=\"created by terraform\",\n    pods_config=volcengine.vke.ClusterPodsConfigArgs(\n        flannel_config=volcengine.vke.ClusterPodsConfigFlannelConfigArgs(\n            max_pods_per_node=64,\n            pod_cidrs=[\"172.27.224.0/19\"],\n        ),\n        pod_network_mode=\"Flannel\",\n        vpc_cni_config=volcengine.vke.ClusterPodsConfigVpcCniConfigArgs(\n            subnet_ids=[\"subnet-2bzud0pbor8qo2dx0ee884y6h\"],\n        ),\n    ),\n    services_config=volcengine.vke.ClusterServicesConfigArgs(\n        service_cidrsv4s=[\"172.30.0.0/17\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vke.Cluster(\"foo\", new Volcengine.Vke.ClusterArgs\n        {\n            ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs\n            {\n                ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs\n                {\n                    PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs\n                    {\n                        Bandwidth = 1,\n                        BillingType = \"PostPaidByBandwidth\",\n                    },\n                },\n                ApiServerPublicAccessEnabled = true,\n                ResourcePublicAccessDefaultEnabled = true,\n                SubnetIds = \n                {\n                    \"subnet-2bzud0pbor8qo2dx0ee884y6h\",\n                },\n            },\n            DeleteProtectionEnabled = false,\n            Description = \"created by terraform\",\n            PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs\n            {\n                FlannelConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigFlannelConfigArgs\n                {\n                    MaxPodsPerNode = 64,\n                    PodCidrs = \n                    {\n                        \"172.27.224.0/19\",\n                    },\n                },\n                PodNetworkMode = \"Flannel\",\n                VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs\n                {\n                    SubnetIds = \n                    {\n                        \"subnet-2bzud0pbor8qo2dx0ee884y6h\",\n                    },\n                },\n            },\n            ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs\n            {\n                ServiceCidrsv4s = \n                {\n                    \"172.30.0.0/17\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.NewCluster(ctx, \"foo\", \u0026Vke.ClusterArgs{\n\t\t\tClusterConfig: \u0026vke.ClusterClusterConfigArgs{\n\t\t\t\tApiServerPublicAccessConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{\n\t\t\t\t\tPublicAccessNetworkConfig: \u0026vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{\n\t\t\t\t\t\tBandwidth:   pulumi.Int(1),\n\t\t\t\t\t\tBillingType: pulumi.String(\"PostPaidByBandwidth\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tApiServerPublicAccessEnabled:       pulumi.Bool(true),\n\t\t\t\tResourcePublicAccessDefaultEnabled: pulumi.Bool(true),\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-2bzud0pbor8qo2dx0ee884y6h\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeleteProtectionEnabled: pulumi.Bool(false),\n\t\t\tDescription:             pulumi.String(\"created by terraform\"),\n\t\t\tPodsConfig: \u0026vke.ClusterPodsConfigArgs{\n\t\t\t\tFlannelConfig: \u0026vke.ClusterPodsConfigFlannelConfigArgs{\n\t\t\t\t\tMaxPodsPerNode: pulumi.Int(64),\n\t\t\t\t\tPodCidrs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"172.27.224.0/19\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPodNetworkMode: pulumi.String(\"Flannel\"),\n\t\t\t\tVpcCniConfig: \u0026vke.ClusterPodsConfigVpcCniConfigArgs{\n\t\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"subnet-2bzud0pbor8qo2dx0ee884y6h\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tServicesConfig: \u0026vke.ClusterServicesConfigArgs{\n\t\t\t\tServiceCidrsv4s: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"172.30.0.0/17\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()        \n            .clusterConfig(ClusterClusterConfigArgs.builder()\n                .apiServerPublicAccessConfig(ClusterClusterConfigApiServerPublicAccessConfigArgs.builder()\n                    .publicAccessNetworkConfig(ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs.builder()\n                        .bandwidth(1)\n                        .billingType(\"PostPaidByBandwidth\")\n                        .build())\n                    .build())\n                .apiServerPublicAccessEnabled(true)\n                .resourcePublicAccessDefaultEnabled(true)\n                .subnetIds(\"subnet-2bzud0pbor8qo2dx0ee884y6h\")\n                .build())\n            .deleteProtectionEnabled(false)\n            .description(\"created by terraform\")\n            .podsConfig(ClusterPodsConfigArgs.builder()\n                .flannelConfig(ClusterPodsConfigFlannelConfigArgs.builder()\n                    .maxPodsPerNode(64)\n                    .podCidrs(\"172.27.224.0/19\")\n                    .build())\n                .podNetworkMode(\"Flannel\")\n                .vpcCniConfig(ClusterPodsConfigVpcCniConfigArgs.builder()\n                    .subnetIds(\"subnet-2bzud0pbor8qo2dx0ee884y6h\")\n                    .build())\n                .build())\n            .servicesConfig(ClusterServicesConfigArgs.builder()\n                .serviceCidrsv4s(\"172.30.0.0/17\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vke:Cluster\n    properties:\n      clusterConfig:\n        apiServerPublicAccessConfig:\n          publicAccessNetworkConfig:\n            bandwidth: 1\n            billingType: PostPaidByBandwidth\n        apiServerPublicAccessEnabled: true\n        resourcePublicAccessDefaultEnabled: true\n        subnetIds:\n          - subnet-2bzud0pbor8qo2dx0ee884y6h\n      deleteProtectionEnabled: false\n      description: created by terraform\n      podsConfig:\n        flannelConfig:\n          maxPodsPerNode: 64\n          podCidrs:\n            - 172.27.224.0/19\n        podNetworkMode: Flannel\n        vpcCniConfig:\n          subnetIds:\n            - subnet-2bzud0pbor8qo2dx0ee884y6h\n      servicesConfig:\n        serviceCidrsv4s:\n          - 172.30.0.0/17\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVkeCluster can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vke/cluster:Cluster default cc9l74mvqtofjnoj5****\n```\n\n ",
            "properties": {
                "clientToken": {
                    "type": "string",
                    "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterClusterConfig:ClusterClusterConfig",
                    "description": "The config of the cluster.\n"
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n"
                },
                "eipAllocationId": {
                    "type": "string",
                    "description": "Eip allocation Id.\n"
                },
                "kubeconfigPrivate": {
                    "type": "string",
                    "description": "Kubeconfig data with private network access, returned in BASE64 encoding.\n"
                },
                "kubeconfigPublic": {
                    "type": "string",
                    "description": "Kubeconfig data with public network access, returned in BASE64 encoding.\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterPodsConfig:ClusterPodsConfig",
                    "description": "The config of the pods.\n"
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterServicesConfig:ClusterServicesConfig",
                    "description": "The config of the services.\n"
                }
            },
            "required": [
                "clusterConfig",
                "eipAllocationId",
                "kubeconfigPrivate",
                "kubeconfigPublic",
                "kubernetesVersion",
                "name",
                "podsConfig",
                "servicesConfig"
            ],
            "inputProperties": {
                "clientToken": {
                    "type": "string",
                    "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterClusterConfig:ClusterClusterConfig",
                    "description": "The config of the cluster.\n"
                },
                "deleteProtectionEnabled": {
                    "type": "boolean",
                    "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the cluster.\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "podsConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterPodsConfig:ClusterPodsConfig",
                    "description": "The config of the pods.\n",
                    "willReplaceOnChanges": true
                },
                "servicesConfig": {
                    "$ref": "#/types/volcengine:Vke/ClusterServicesConfig:ClusterServicesConfig",
                    "description": "The config of the services.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterConfig",
                "podsConfig",
                "servicesConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clientToken": {
                        "type": "string",
                        "description": "ClientToken is a case-sensitive string of no more than 64 ASCII characters passed in by the caller.\n"
                    },
                    "clusterConfig": {
                        "$ref": "#/types/volcengine:Vke/ClusterClusterConfig:ClusterClusterConfig",
                        "description": "The config of the cluster.\n"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the cluster.\n"
                    },
                    "eipAllocationId": {
                        "type": "string",
                        "description": "Eip allocation Id.\n"
                    },
                    "kubeconfigPrivate": {
                        "type": "string",
                        "description": "Kubeconfig data with private network access, returned in BASE64 encoding.\n"
                    },
                    "kubeconfigPublic": {
                        "type": "string",
                        "description": "Kubeconfig data with public network access, returned in BASE64 encoding.\n"
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The version of Kubernetes specified when creating a VKE cluster (specified to patch version), if not specified, the latest Kubernetes version supported by VKE is used by default, which is a 3-segment version format starting with a lowercase v, that is, KubernetesVersion with IsLatestVersion=True in the return value of ListSupportedVersions.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "podsConfig": {
                        "$ref": "#/types/volcengine:Vke/ClusterPodsConfig:ClusterPodsConfig",
                        "description": "The config of the pods.\n",
                        "willReplaceOnChanges": true
                    },
                    "servicesConfig": {
                        "$ref": "#/types/volcengine:Vke/ClusterServicesConfig:ClusterServicesConfig",
                        "description": "The config of the services.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vke/node:Node": {
            "description": "Provides a resource to manage vke node\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vke.Node(\"foo\", {\n    additionalContainerStorageEnabled: false,\n    clusterId: \"ccahbr0nqtofhiuuuajn0\",\n    containerStoragePath: \"\",\n    instanceId: \"i-ybrfa2vu2t7grbv8qa0j\",\n    keepInstanceName: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vke.Node(\"foo\",\n    additional_container_storage_enabled=False,\n    cluster_id=\"ccahbr0nqtofhiuuuajn0\",\n    container_storage_path=\"\",\n    instance_id=\"i-ybrfa2vu2t7grbv8qa0j\",\n    keep_instance_name=True)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vke.Node(\"foo\", new Volcengine.Vke.NodeArgs\n        {\n            AdditionalContainerStorageEnabled = false,\n            ClusterId = \"ccahbr0nqtofhiuuuajn0\",\n            ContainerStoragePath = \"\",\n            InstanceId = \"i-ybrfa2vu2t7grbv8qa0j\",\n            KeepInstanceName = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.NewNode(ctx, \"foo\", \u0026Vke.NodeArgs{\n\t\t\tAdditionalContainerStorageEnabled: pulumi.Bool(false),\n\t\t\tClusterId:                         pulumi.String(\"ccahbr0nqtofhiuuuajn0\"),\n\t\t\tContainerStoragePath:              pulumi.String(\"\"),\n\t\t\tInstanceId:                        pulumi.String(\"i-ybrfa2vu2t7grbv8qa0j\"),\n\t\t\tKeepInstanceName:                  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Node(\"foo\", NodeArgs.builder()        \n            .additionalContainerStorageEnabled(false)\n            .clusterId(\"ccahbr0nqtofhiuuuajn0\")\n            .containerStoragePath(\"\")\n            .instanceId(\"i-ybrfa2vu2t7grbv8qa0j\")\n            .keepInstanceName(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vke:Node\n    properties:\n      additionalContainerStorageEnabled: false\n      clusterId: ccahbr0nqtofhiuuuajn0\n      containerStoragePath:\n      instanceId: i-ybrfa2vu2t7grbv8qa0j\n      keepInstanceName: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVKE node can be imported using the node id, e.g.\n\n```sh\n $ pulumi import volcengine:Vke/node:Node default nc5t5epmrsf****\n```\n\n ",
            "properties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The client token.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id.\n"
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n"
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The node pool id.\n"
                }
            },
            "required": [
                "clientToken",
                "clusterId",
                "containerStoragePath",
                "instanceId",
                "nodePoolId"
            ],
            "inputProperties": {
                "additionalContainerStorageEnabled": {
                    "type": "boolean",
                    "description": "The flag of additional container storage enable, the value is `true` or `false`.\n",
                    "willReplaceOnChanges": true
                },
                "clientToken": {
                    "type": "string",
                    "description": "The client token.\n",
                    "willReplaceOnChanges": true
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id.\n",
                    "willReplaceOnChanges": true
                },
                "containerStoragePath": {
                    "type": "string",
                    "description": "The container storage path.\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "The instance id.\n",
                    "willReplaceOnChanges": true
                },
                "keepInstanceName": {
                    "type": "boolean",
                    "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Node resources.\n",
                "properties": {
                    "additionalContainerStorageEnabled": {
                        "type": "boolean",
                        "description": "The flag of additional container storage enable, the value is `true` or `false`.\n",
                        "willReplaceOnChanges": true
                    },
                    "clientToken": {
                        "type": "string",
                        "description": "The client token.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id.\n",
                        "willReplaceOnChanges": true
                    },
                    "containerStoragePath": {
                        "type": "string",
                        "description": "The container storage path.\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance id.\n",
                        "willReplaceOnChanges": true
                    },
                    "keepInstanceName": {
                        "type": "boolean",
                        "description": "The flag of keep instance name, the value is `true` or `false`.\n"
                    },
                    "nodePoolId": {
                        "type": "string",
                        "description": "The node pool id.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vke/nodePool:NodePool": {
            "description": "Provides a resource to manage vke node pool\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst vkeTest = new volcengine.Vke.NodePool(\"vke_test\", {\n    clusterId: \"ccah01nnqtofnluts98j0\",\n    kubernetesConfig: {\n        labels: [\n            {\n                key: \"aa\",\n                value: \"bb\",\n            },\n            {\n                key: \"cccc\",\n                value: \"dddd\",\n            },\n        ],\n    },\n    nodeConfig: {\n        dataVolumes: [{\n            size: 60,\n            type: \"ESSD_PL0\",\n        }],\n        instanceTypeIds: [\"ecs.r1.large\"],\n        security: {\n            login: {\n                //      ssh_key_pair_name = \"ssh-6fbl66fxqm\"\n                password: \"UHdkMTIzNDU2\",\n            },\n        },\n        subnetIds: [\"subnet-3recgzi7hfim85zsk2i8l9ve7\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nvke_test = volcengine.vke.NodePool(\"vkeTest\",\n    cluster_id=\"ccah01nnqtofnluts98j0\",\n    kubernetes_config=volcengine.vke.NodePoolKubernetesConfigArgs(\n        labels=[\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"aa\",\n                value=\"bb\",\n            ),\n            volcengine.vke.NodePoolKubernetesConfigLabelArgs(\n                key=\"cccc\",\n                value=\"dddd\",\n            ),\n        ],\n    ),\n    node_config=volcengine.vke.NodePoolNodeConfigArgs(\n        data_volumes=[volcengine.vke.NodePoolNodeConfigDataVolumeArgs(\n            size=60,\n            type=\"ESSD_PL0\",\n        )],\n        instance_type_ids=[\"ecs.r1.large\"],\n        security=volcengine.vke.NodePoolNodeConfigSecurityArgs(\n            login=volcengine.vke.NodePoolNodeConfigSecurityLoginArgs(\n                password=\"UHdkMTIzNDU2\",\n            ),\n        ),\n        subnet_ids=[\"subnet-3recgzi7hfim85zsk2i8l9ve7\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vkeTest = new Volcengine.Vke.NodePool(\"vkeTest\", new Volcengine.Vke.NodePoolArgs\n        {\n            ClusterId = \"ccah01nnqtofnluts98j0\",\n            KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs\n            {\n                Labels = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"aa\",\n                        Value = \"bb\",\n                    },\n                    new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs\n                    {\n                        Key = \"cccc\",\n                        Value = \"dddd\",\n                    },\n                },\n            },\n            NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs\n            {\n                DataVolumes = \n                {\n                    new Volcengine.Vke.Inputs.NodePoolNodeConfigDataVolumeArgs\n                    {\n                        Size = 60,\n                        Type = \"ESSD_PL0\",\n                    },\n                },\n                InstanceTypeIds = \n                {\n                    \"ecs.r1.large\",\n                },\n                Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs\n                {\n                    Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs\n                    {\n                        Password = \"UHdkMTIzNDU2\",\n                    },\n                },\n                SubnetIds = \n                {\n                    \"subnet-3recgzi7hfim85zsk2i8l9ve7\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.NewNodePool(ctx, \"vkeTest\", \u0026Vke.NodePoolArgs{\n\t\t\tClusterId: pulumi.String(\"ccah01nnqtofnluts98j0\"),\n\t\t\tKubernetesConfig: \u0026vke.NodePoolKubernetesConfigArgs{\n\t\t\t\tLabels: vke.NodePoolKubernetesConfigLabelArray{\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"aa\"),\n\t\t\t\t\t\tValue: pulumi.String(\"bb\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026vke.NodePoolKubernetesConfigLabelArgs{\n\t\t\t\t\t\tKey:   pulumi.String(\"cccc\"),\n\t\t\t\t\t\tValue: pulumi.String(\"dddd\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeConfig: \u0026vke.NodePoolNodeConfigArgs{\n\t\t\t\tDataVolumes: vke.NodePoolNodeConfigDataVolumeArray{\n\t\t\t\t\t\u0026vke.NodePoolNodeConfigDataVolumeArgs{\n\t\t\t\t\t\tSize: pulumi.Int(60),\n\t\t\t\t\t\tType: pulumi.String(\"ESSD_PL0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tInstanceTypeIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ecs.r1.large\"),\n\t\t\t\t},\n\t\t\t\tSecurity: \u0026vke.NodePoolNodeConfigSecurityArgs{\n\t\t\t\t\tLogin: \u0026vke.NodePoolNodeConfigSecurityLoginArgs{\n\t\t\t\t\t\tPassword: pulumi.String(\"UHdkMTIzNDU2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"subnet-3recgzi7hfim85zsk2i8l9ve7\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vkeTest = new NodePool(\"vkeTest\", NodePoolArgs.builder()        \n            .clusterId(\"ccah01nnqtofnluts98j0\")\n            .kubernetesConfig(NodePoolKubernetesConfigArgs.builder()\n                .labels(                \n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"aa\")\n                        .value(\"bb\")\n                        .build(),\n                    NodePoolKubernetesConfigLabelArgs.builder()\n                        .key(\"cccc\")\n                        .value(\"dddd\")\n                        .build())\n                .build())\n            .nodeConfig(NodePoolNodeConfigArgs.builder()\n                .dataVolumes(NodePoolNodeConfigDataVolumeArgs.builder()\n                    .size(\"60\")\n                    .type(\"ESSD_PL0\")\n                    .build())\n                .instanceTypeIds(\"ecs.r1.large\")\n                .security(NodePoolNodeConfigSecurityArgs.builder()\n                    .login(NodePoolNodeConfigSecurityLoginArgs.builder()\n                        .password(\"UHdkMTIzNDU2\")\n                        .build())\n                    .build())\n                .subnetIds(\"subnet-3recgzi7hfim85zsk2i8l9ve7\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vkeTest:\n    type: volcengine:Vke:NodePool\n    properties:\n      clusterId: ccah01nnqtofnluts98j0\n      kubernetesConfig:\n        labels:\n          - key: aa\n            value: bb\n          - key: cccc\n            value: dddd\n      nodeConfig:\n        dataVolumes:\n          - size: 60\n            type: ESSD_PL0\n        instanceTypeIds:\n          - ecs.r1.large\n        security:\n          login:\n            password: UHdkMTIzNDU2\n        subnetIds:\n          - subnet-3recgzi7hfim85zsk2i8l9ve7\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNodePool can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vke/nodePool:NodePool default pcabe57vqtofgrbln3dp0\n```\n\n ",
            "properties": {
                "autoScaling": {
                    "$ref": "#/types/volcengine:Vke/NodePoolAutoScaling:NodePoolAutoScaling",
                    "description": "The node pool elastic scaling configuration information.\n"
                },
                "autoScalingEnabled": {
                    "type": "boolean",
                    "description": "Is enabled of AutoScaling.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The ClientToken of NodePool.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n"
                },
                "clusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ClusterIds of NodePool.\n"
                },
                "createClientToken": {
                    "type": "string",
                    "description": "The CreateClientToken of NodePool.\n"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of NodePool.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:Vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:Vke/NodePoolNodeConfig:NodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolStatus:NodePoolStatus"
                    },
                    "description": "The Status of NodePool.\n"
                },
                "updateClientToken": {
                    "type": "string",
                    "description": "The UpdateClientToken of NodePool.\n"
                }
            },
            "required": [
                "createClientToken",
                "name",
                "updateClientToken"
            ],
            "inputProperties": {
                "autoScaling": {
                    "$ref": "#/types/volcengine:Vke/NodePoolAutoScaling:NodePoolAutoScaling",
                    "description": "The node pool elastic scaling configuration information.\n"
                },
                "autoScalingEnabled": {
                    "type": "boolean",
                    "description": "Is enabled of AutoScaling.\n"
                },
                "clientToken": {
                    "type": "string",
                    "description": "The ClientToken of NodePool.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ClusterId of NodePool.\n",
                    "willReplaceOnChanges": true
                },
                "clusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ClusterIds of NodePool.\n"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of NodePool.\n"
                },
                "kubernetesConfig": {
                    "$ref": "#/types/volcengine:Vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                    "description": "The KubernetesConfig of NodeConfig.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Name of NodePool.\n"
                },
                "nodeConfig": {
                    "$ref": "#/types/volcengine:Vke/NodePoolNodeConfig:NodePoolNodeConfig",
                    "description": "The Config of NodePool.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vke/NodePoolStatus:NodePoolStatus"
                    },
                    "description": "The Status of NodePool.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodePool resources.\n",
                "properties": {
                    "autoScaling": {
                        "$ref": "#/types/volcengine:Vke/NodePoolAutoScaling:NodePoolAutoScaling",
                        "description": "The node pool elastic scaling configuration information.\n"
                    },
                    "autoScalingEnabled": {
                        "type": "boolean",
                        "description": "Is enabled of AutoScaling.\n"
                    },
                    "clientToken": {
                        "type": "string",
                        "description": "The ClientToken of NodePool.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ClusterIds of NodePool.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The CreateClientToken of NodePool.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of NodePool.\n"
                    },
                    "kubernetesConfig": {
                        "$ref": "#/types/volcengine:Vke/NodePoolKubernetesConfig:NodePoolKubernetesConfig",
                        "description": "The KubernetesConfig of NodeConfig.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nodeConfig": {
                        "$ref": "#/types/volcengine:Vke/NodePoolNodeConfig:NodePoolNodeConfig",
                        "description": "The Config of NodePool.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodePoolStatus:NodePoolStatus"
                        },
                        "description": "The Status of NodePool.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The UpdateClientToken of NodePool.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/acl:Acl": {
            "description": "Provides a resource to manage acl\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.Acl(\"foo\", {\n    aclEntries: [\n        {\n            description: \"e1\",\n            entry: \"172.20.1.0/24\",\n        },\n        {\n            description: \"e3\",\n            entry: \"172.20.3.0/24\",\n        },\n    ],\n    aclName: \"tf-test-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Acl(\"foo\",\n    acl_entries=[\n        volcengine.vpc.AclAclEntryArgs(\n            description=\"e1\",\n            entry=\"172.20.1.0/24\",\n        ),\n        volcengine.vpc.AclAclEntryArgs(\n            description=\"e3\",\n            entry=\"172.20.3.0/24\",\n        ),\n    ],\n    acl_name=\"tf-test-2\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Acl(\"foo\", new Volcengine.Vpc.AclArgs\n        {\n            AclEntries = \n            {\n                new Volcengine.Vpc.Inputs.AclAclEntryArgs\n                {\n                    Description = \"e1\",\n                    Entry = \"172.20.1.0/24\",\n                },\n                new Volcengine.Vpc.Inputs.AclAclEntryArgs\n                {\n                    Description = \"e3\",\n                    Entry = \"172.20.3.0/24\",\n                },\n            },\n            AclName = \"tf-test-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewAcl(ctx, \"foo\", \u0026Vpc.AclArgs{\n\t\t\tAclEntries: vpc.AclAclEntryArray{\n\t\t\t\t\u0026vpc.AclAclEntryArgs{\n\t\t\t\t\tDescription: pulumi.String(\"e1\"),\n\t\t\t\t\tEntry:       pulumi.String(\"172.20.1.0/24\"),\n\t\t\t\t},\n\t\t\t\t\u0026vpc.AclAclEntryArgs{\n\t\t\t\t\tDescription: pulumi.String(\"e3\"),\n\t\t\t\t\tEntry:       pulumi.String(\"172.20.3.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAclName: pulumi.String(\"tf-test-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Acl(\"foo\", AclArgs.builder()        \n            .aclEntries(            \n                AclAclEntryArgs.builder()\n                    .description(\"e1\")\n                    .entry(\"172.20.1.0/24\")\n                    .build(),\n                AclAclEntryArgs.builder()\n                    .description(\"e3\")\n                    .entry(\"172.20.3.0/24\")\n                    .build())\n            .aclName(\"tf-test-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:Acl\n    properties:\n      aclEntries:\n        - description: e1\n          entry: 172.20.1.0/24\n        - description: e3\n          entry: 172.20.3.0/24\n      aclName: tf-test-2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAcl can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/acl:Acl default acl-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "aclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vpc/AclAclEntry:AclAclEntry"
                    },
                    "description": "The acl entry set of the Acl.\n"
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of Acl.\n"
                },
                "createTime": {
                    "type": "string",
                    "description": "Create time of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Acl.\n"
                }
            },
            "required": [
                "aclName",
                "createTime"
            ],
            "inputProperties": {
                "aclEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vpc/AclAclEntry:AclAclEntry"
                    },
                    "description": "The acl entry set of the Acl.\n"
                },
                "aclName": {
                    "type": "string",
                    "description": "The name of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Acl.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "aclEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/AclAclEntry:AclAclEntry"
                        },
                        "description": "The acl entry set of the Acl.\n"
                    },
                    "aclName": {
                        "type": "string",
                        "description": "The name of Acl.\n"
                    },
                    "createTime": {
                        "type": "string",
                        "description": "Create time of Acl.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Acl.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/aclEntry:AclEntry": {
            "description": "Provides a resource to manage acl entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst fooAcl = new volcengine.vpc.Acl(\"fooAcl\", {\n    aclName: \"tf-test-3\",\n    description: \"tf-test\",\n});\nconst fooAclEntry = new volcengine.vpc.AclEntry(\"fooAclEntry\", {\n    aclId: fooAcl.id,\n    description: \"tf acl entry desc demo\",\n    entry: \"192.2.2.1/32\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo_acl = volcengine.vpc.Acl(\"fooAcl\",\n    acl_name=\"tf-test-3\",\n    description=\"tf-test\")\nfoo_acl_entry = volcengine.vpc.AclEntry(\"fooAclEntry\",\n    acl_id=foo_acl.id,\n    description=\"tf acl entry desc demo\",\n    entry=\"192.2.2.1/32\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fooAcl = new Volcengine.Vpc.Acl(\"fooAcl\", new Volcengine.Vpc.AclArgs\n        {\n            AclName = \"tf-test-3\",\n            Description = \"tf-test\",\n        });\n        var fooAclEntry = new Volcengine.Vpc.AclEntry(\"fooAclEntry\", new Volcengine.Vpc.AclEntryArgs\n        {\n            AclId = fooAcl.Id,\n            Description = \"tf acl entry desc demo\",\n            Entry = \"192.2.2.1/32\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooAcl, err := Vpc.NewAcl(ctx, \"fooAcl\", \u0026Vpc.AclArgs{\n\t\t\tAclName:     pulumi.String(\"tf-test-3\"),\n\t\t\tDescription: pulumi.String(\"tf-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Vpc.NewAclEntry(ctx, \"fooAclEntry\", \u0026Vpc.AclEntryArgs{\n\t\t\tAclId:       fooAcl.ID(),\n\t\t\tDescription: pulumi.String(\"tf acl entry desc demo\"),\n\t\t\tEntry:       pulumi.String(\"192.2.2.1/32\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooAcl = new Acl(\"fooAcl\", AclArgs.builder()        \n            .aclName(\"tf-test-3\")\n            .description(\"tf-test\")\n            .build());\n\n        var fooAclEntry = new AclEntry(\"fooAclEntry\", AclEntryArgs.builder()        \n            .aclId(fooAcl.id())\n            .description(\"tf acl entry desc demo\")\n            .entry(\"192.2.2.1/32\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooAcl:\n    type: volcengine:Vpc:Acl\n    properties:\n      aclName: tf-test-3\n      description: tf-test\n  fooAclEntry:\n    type: volcengine:Vpc:AclEntry\n    properties:\n      aclId: ${fooAcl.id}\n      description: tf acl entry desc demo\n      entry: 192.2.2.1/32\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAclEntry can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/aclEntry:AclEntry default ID is a string concatenated with colons(AclId:Entry)\n```\n\n ",
            "properties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n"
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n"
                }
            },
            "required": [
                "aclId",
                "entry"
            ],
            "inputProperties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of Acl.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the AclEntry.\n",
                    "willReplaceOnChanges": true
                },
                "entry": {
                    "type": "string",
                    "description": "The content of the AclEntry.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclId",
                "entry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AclEntry resources.\n",
                "properties": {
                    "aclId": {
                        "type": "string",
                        "description": "The ID of Acl.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the AclEntry.\n",
                        "willReplaceOnChanges": true
                    },
                    "entry": {
                        "type": "string",
                        "description": "The content of the AclEntry.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/networkInterface:NetworkInterface": {
            "description": "Provides a resource to manage network interface\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.NetworkInterface(\"foo\", {\n    description: \"tf-test-up\",\n    networkInterfaceName: \"tf-test-up\",\n    portSecurityEnabled: false,\n    primaryIpAddress: \"192.168.0.253\",\n    securityGroupIds: [\"sg-2744hspo7jbpc7fap8t7lef1p\"],\n    subnetId: \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkInterface(\"foo\",\n    description=\"tf-test-up\",\n    network_interface_name=\"tf-test-up\",\n    port_security_enabled=False,\n    primary_ip_address=\"192.168.0.253\",\n    security_group_ids=[\"sg-2744hspo7jbpc7fap8t7lef1p\"],\n    subnet_id=\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkInterface(\"foo\", new Volcengine.Vpc.NetworkInterfaceArgs\n        {\n            Description = \"tf-test-up\",\n            NetworkInterfaceName = \"tf-test-up\",\n            PortSecurityEnabled = false,\n            PrimaryIpAddress = \"192.168.0.253\",\n            SecurityGroupIds = \n            {\n                \"sg-2744hspo7jbpc7fap8t7lef1p\",\n            },\n            SubnetId = \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewNetworkInterface(ctx, \"foo\", \u0026Vpc.NetworkInterfaceArgs{\n\t\t\tDescription:          pulumi.String(\"tf-test-up\"),\n\t\t\tNetworkInterfaceName: pulumi.String(\"tf-test-up\"),\n\t\t\tPortSecurityEnabled:  pulumi.Bool(false),\n\t\t\tPrimaryIpAddress:     pulumi.String(\"192.168.0.253\"),\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"sg-2744hspo7jbpc7fap8t7lef1p\"),\n\t\t\t},\n\t\t\tSubnetId: pulumi.String(\"subnet-2744ht7fhjthc7fap8tm10eqg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkInterface(\"foo\", NetworkInterfaceArgs.builder()        \n            .description(\"tf-test-up\")\n            .networkInterfaceName(\"tf-test-up\")\n            .portSecurityEnabled(false)\n            .primaryIpAddress(\"192.168.0.253\")\n            .securityGroupIds(\"sg-2744hspo7jbpc7fap8t7lef1p\")\n            .subnetId(\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:NetworkInterface\n    properties:\n      description: tf-test-up\n      networkInterfaceName: tf-test-up\n      portSecurityEnabled: false\n      primaryIpAddress: 192.168.0.253\n      securityGroupIds:\n        - sg-2744hspo7jbpc7fap8t7lef1p\n      subnetId: subnet-2744ht7fhjthc7fap8tm10eqg\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork interface can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/networkInterface:NetworkInterface default eni-bp1fgnh68xyz9****\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n"
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "The name of the ENI.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Set port security enable or disable.\n"
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the ENI.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet to which the ENI is connected.\n"
                }
            },
            "required": [
                "networkInterfaceName",
                "portSecurityEnabled",
                "primaryIpAddress",
                "securityGroupIds",
                "status",
                "subnetId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ENI.\n"
                },
                "networkInterfaceName": {
                    "type": "string",
                    "description": "The name of the ENI.\n"
                },
                "portSecurityEnabled": {
                    "type": "boolean",
                    "description": "Set port security enable or disable.\n"
                },
                "primaryIpAddress": {
                    "type": "string",
                    "description": "The primary IP address of the ENI.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the security group id to which the secondary ENI belongs.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet to which the ENI is connected.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "securityGroupIds",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkInterface resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ENI.\n"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "The name of the ENI.\n"
                    },
                    "portSecurityEnabled": {
                        "type": "boolean",
                        "description": "Set port security enable or disable.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The primary IP address of the ENI.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the security group id to which the secondary ENI belongs.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the ENI.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet to which the ENI is connected.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/networkInterfaceAttach:NetworkInterfaceAttach": {
            "description": "Provides a resource to manage network interface attach\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.NetworkInterfaceAttach(\"foo\", {\n    instanceId: \"i-72q20hi6s082wcafdem8\",\n    networkInterfaceId: \"eni-274ecj646ylts7fap8t6xbba1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.NetworkInterfaceAttach(\"foo\",\n    instance_id=\"i-72q20hi6s082wcafdem8\",\n    network_interface_id=\"eni-274ecj646ylts7fap8t6xbba1\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.NetworkInterfaceAttach(\"foo\", new Volcengine.Vpc.NetworkInterfaceAttachArgs\n        {\n            InstanceId = \"i-72q20hi6s082wcafdem8\",\n            NetworkInterfaceId = \"eni-274ecj646ylts7fap8t6xbba1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewNetworkInterfaceAttach(ctx, \"foo\", \u0026Vpc.NetworkInterfaceAttachArgs{\n\t\t\tInstanceId:         pulumi.String(\"i-72q20hi6s082wcafdem8\"),\n\t\t\tNetworkInterfaceId: pulumi.String(\"eni-274ecj646ylts7fap8t6xbba1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new NetworkInterfaceAttach(\"foo\", NetworkInterfaceAttachArgs.builder()        \n            .instanceId(\"i-72q20hi6s082wcafdem8\")\n            .networkInterfaceId(\"eni-274ecj646ylts7fap8t6xbba1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:NetworkInterfaceAttach\n    properties:\n      instanceId: i-72q20hi6s082wcafdem8\n      networkInterfaceId: eni-274ecj646ylts7fap8t6xbba1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork interface attach can be imported using the network_interface_id:instance_id.\n\n```sh\n $ pulumi import volcengine:Vpc/networkInterfaceAttach:NetworkInterfaceAttach default eni-bp1fg655nh68xyz9***:i-wijfn35c****\n```\n\n ",
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance to which the ENI is bound.\n"
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n"
                }
            },
            "required": [
                "instanceId",
                "networkInterfaceId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "The id of the instance to which the ENI is bound.\n",
                    "willReplaceOnChanges": true
                },
                "networkInterfaceId": {
                    "type": "string",
                    "description": "The id of the ENI.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "instanceId",
                "networkInterfaceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkInterfaceAttach resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "The id of the instance to which the ENI is bound.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkInterfaceId": {
                        "type": "string",
                        "description": "The id of the ENI.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/routeEntry:RouteEntry": {
            "description": "Provides a resource to manage route entry\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.RouteEntry(\"foo\", {\n    description: \"tf-test-up\",\n    destinationCidrBlock: \"0.0.0.0/2\",\n    nextHopId: \"ngw-274gwbqe340zk7fap8spkzo7x\",\n    nextHopType: \"NatGW\",\n    routeEntryName: \"tf-test-up\",\n    routeTableId: \"vtb-2744hslq5b7r47fap8tjomgnj\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteEntry(\"foo\",\n    description=\"tf-test-up\",\n    destination_cidr_block=\"0.0.0.0/2\",\n    next_hop_id=\"ngw-274gwbqe340zk7fap8spkzo7x\",\n    next_hop_type=\"NatGW\",\n    route_entry_name=\"tf-test-up\",\n    route_table_id=\"vtb-2744hslq5b7r47fap8tjomgnj\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteEntry(\"foo\", new Volcengine.Vpc.RouteEntryArgs\n        {\n            Description = \"tf-test-up\",\n            DestinationCidrBlock = \"0.0.0.0/2\",\n            NextHopId = \"ngw-274gwbqe340zk7fap8spkzo7x\",\n            NextHopType = \"NatGW\",\n            RouteEntryName = \"tf-test-up\",\n            RouteTableId = \"vtb-2744hslq5b7r47fap8tjomgnj\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewRouteEntry(ctx, \"foo\", \u0026Vpc.RouteEntryArgs{\n\t\t\tDescription:          pulumi.String(\"tf-test-up\"),\n\t\t\tDestinationCidrBlock: pulumi.String(\"0.0.0.0/2\"),\n\t\t\tNextHopId:            pulumi.String(\"ngw-274gwbqe340zk7fap8spkzo7x\"),\n\t\t\tNextHopType:          pulumi.String(\"NatGW\"),\n\t\t\tRouteEntryName:       pulumi.String(\"tf-test-up\"),\n\t\t\tRouteTableId:         pulumi.String(\"vtb-2744hslq5b7r47fap8tjomgnj\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteEntry(\"foo\", RouteEntryArgs.builder()        \n            .description(\"tf-test-up\")\n            .destinationCidrBlock(\"0.0.0.0/2\")\n            .nextHopId(\"ngw-274gwbqe340zk7fap8spkzo7x\")\n            .nextHopType(\"NatGW\")\n            .routeEntryName(\"tf-test-up\")\n            .routeTableId(\"vtb-2744hslq5b7r47fap8tjomgnj\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:RouteEntry\n    properties:\n      description: tf-test-up\n      destinationCidrBlock: 0.0.0.0/2\n      nextHopId: ngw-274gwbqe340zk7fap8spkzo7x\n      nextHopType: NatGW\n      routeEntryName: tf-test-up\n      routeTableId: vtb-2744hslq5b7r47fap8tjomgnj\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute entry can be imported using the route_table_id:route_entry_id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/routeEntry:RouteEntry default vtb-274e19skkuhog7fap8u4i8ird:rte-274e1g9ei4k5c7fap8sp974fq\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination CIDR block of the route entry.\n"
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The id of the next hop.\n"
                },
                "nextHopType": {
                    "type": "string",
                    "description": "The type of the next hop.\n"
                },
                "routeEntryId": {
                    "type": "string",
                    "description": "The id of the route entry.\n"
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "The name of the route entry.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                }
            },
            "required": [
                "destinationCidrBlock",
                "nextHopId",
                "nextHopType",
                "routeEntryId",
                "routeTableId",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route entry.\n"
                },
                "destinationCidrBlock": {
                    "type": "string",
                    "description": "The destination CIDR block of the route entry.\n",
                    "willReplaceOnChanges": true
                },
                "nextHopId": {
                    "type": "string",
                    "description": "The id of the next hop.\n",
                    "willReplaceOnChanges": true
                },
                "nextHopType": {
                    "type": "string",
                    "description": "The type of the next hop.\n",
                    "willReplaceOnChanges": true
                },
                "routeEntryName": {
                    "type": "string",
                    "description": "The name of the route entry.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destinationCidrBlock",
                "nextHopId",
                "nextHopType",
                "routeTableId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteEntry resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the route entry.\n"
                    },
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination CIDR block of the route entry.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The id of the next hop.\n",
                        "willReplaceOnChanges": true
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "The type of the next hop.\n",
                        "willReplaceOnChanges": true
                    },
                    "routeEntryId": {
                        "type": "string",
                        "description": "The id of the route entry.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "The name of the route entry.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table.\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The description of the route entry.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/routeTable:RouteTable": {
            "description": "Provides a resource to manage route table\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.RouteTable(\"foo\", {\n    description: \"tf-test1\",\n    routeTableName: \"tf-test1\",\n    vpcId: \"vpc-2744hsjr475s07fap8t4jbl1c\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteTable(\"foo\",\n    description=\"tf-test1\",\n    route_table_name=\"tf-test1\",\n    vpc_id=\"vpc-2744hsjr475s07fap8t4jbl1c\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteTable(\"foo\", new Volcengine.Vpc.RouteTableArgs\n        {\n            Description = \"tf-test1\",\n            RouteTableName = \"tf-test1\",\n            VpcId = \"vpc-2744hsjr475s07fap8t4jbl1c\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewRouteTable(ctx, \"foo\", \u0026Vpc.RouteTableArgs{\n\t\t\tDescription:    pulumi.String(\"tf-test1\"),\n\t\t\tRouteTableName: pulumi.String(\"tf-test1\"),\n\t\t\tVpcId:          pulumi.String(\"vpc-2744hsjr475s07fap8t4jbl1c\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteTable(\"foo\", RouteTableArgs.builder()        \n            .description(\"tf-test1\")\n            .routeTableName(\"tf-test1\")\n            .vpcId(\"vpc-2744hsjr475s07fap8t4jbl1c\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:RouteTable\n    properties:\n      description: tf-test1\n      routeTableName: tf-test1\n      vpcId: vpc-2744hsjr475s07fap8t4jbl1c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute table can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/routeTable:RouteTable default vtb-274e0syt9av407fap8tle16kb\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "The name of the route table.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n"
                }
            },
            "required": [
                "routeTableName",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the route table.\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "The name of the route table.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTable resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the route table.\n"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "The name of the route table.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/routeTableAssociate:RouteTableAssociate": {
            "description": "Provides a resource to manage route table associate\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.RouteTableAssociate(\"foo\", {\n    routeTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n    subnetId: \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.RouteTableAssociate(\"foo\",\n    route_table_id=\"vtb-274e19skkuhog7fap8u4i8ird\",\n    subnet_id=\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.RouteTableAssociate(\"foo\", new Volcengine.Vpc.RouteTableAssociateArgs\n        {\n            RouteTableId = \"vtb-274e19skkuhog7fap8u4i8ird\",\n            SubnetId = \"subnet-2744ht7fhjthc7fap8tm10eqg\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewRouteTableAssociate(ctx, \"foo\", \u0026Vpc.RouteTableAssociateArgs{\n\t\t\tRouteTableId: pulumi.String(\"vtb-274e19skkuhog7fap8u4i8ird\"),\n\t\t\tSubnetId:     pulumi.String(\"subnet-2744ht7fhjthc7fap8tm10eqg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new RouteTableAssociate(\"foo\", RouteTableAssociateArgs.builder()        \n            .routeTableId(\"vtb-274e19skkuhog7fap8u4i8ird\")\n            .subnetId(\"subnet-2744ht7fhjthc7fap8tm10eqg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:RouteTableAssociate\n    properties:\n      routeTableId: vtb-274e19skkuhog7fap8u4i8ird\n      subnetId: subnet-2744ht7fhjthc7fap8tm10eqg\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute table associate address can be imported using the route_table_id:subnet_id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/routeTableAssociate:RouteTableAssociate default vtb-2fdzao4h726f45******:subnet-2fdzaou4liw3k5oxruv******\n```\n\n ",
            "properties": {
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n"
                }
            },
            "required": [
                "routeTableId",
                "subnetId"
            ],
            "inputProperties": {
                "routeTableId": {
                    "type": "string",
                    "description": "The id of the route table.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "The id of the subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "routeTableId",
                "subnetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RouteTableAssociate resources.\n",
                "properties": {
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/securityGroup:SecurityGroup": {
            "description": "Provides a resource to manage security group\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst g1test1 = new volcengine.Vpc.SecurityGroup(\"g1test1\", {\n    vpcId: \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ng1test1 = volcengine.vpc.SecurityGroup(\"g1test1\", vpc_id=\"sg-273ycgql3ig3k7fap8t3dyvqx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var g1test1 = new Volcengine.Vpc.SecurityGroup(\"g1test1\", new Volcengine.Vpc.SecurityGroupArgs\n        {\n            VpcId = \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewSecurityGroup(ctx, \"g1test1\", \u0026Vpc.SecurityGroupArgs{\n\t\t\tVpcId: pulumi.String(\"sg-273ycgql3ig3k7fap8t3dyvqx\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var g1test1 = new SecurityGroup(\"g1test1\", SecurityGroupArgs.builder()        \n            .vpcId(\"sg-273ycgql3ig3k7fap8t3dyvqx\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  g1test1:\n    type: volcengine:Vpc:SecurityGroup\n    properties:\n      vpcId: sg-273ycgql3ig3k7fap8t3dyvqx\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecurityGroup can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/securityGroup:SecurityGroup default sg-273ycgql3ig3k7fap8t3dyvqx\n```\n\n ",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of SecurityGroup.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of SecurityGroup.\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "Name of SecurityGroup.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of SecurityGroup.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n"
                }
            },
            "required": [
                "creationTime",
                "securityGroupName",
                "status",
                "vpcId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of SecurityGroup.\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "Name of SecurityGroup.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vpcId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroup resources.\n",
                "properties": {
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of SecurityGroup.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of SecurityGroup.\n"
                    },
                    "securityGroupName": {
                        "type": "string",
                        "description": "Name of SecurityGroup.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of SecurityGroup.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Id of the VPC.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/securityGroupRule:SecurityGroupRule": {
            "description": "Provides a resource to manage security group rule\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst g1test3 = new volcengine.Vpc.SecurityGroupRule(\"g1test3\", {\n    cidrIp: \"10.0.0.0/8\",\n    direction: \"egress\",\n    portEnd: 9003,\n    portStart: 8000,\n    protocol: \"tcp\",\n    securityGroupId: \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ng1test3 = volcengine.vpc.SecurityGroupRule(\"g1test3\",\n    cidr_ip=\"10.0.0.0/8\",\n    direction=\"egress\",\n    port_end=9003,\n    port_start=8000,\n    protocol=\"tcp\",\n    security_group_id=\"sg-273ycgql3ig3k7fap8t3dyvqx\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var g1test3 = new Volcengine.Vpc.SecurityGroupRule(\"g1test3\", new Volcengine.Vpc.SecurityGroupRuleArgs\n        {\n            CidrIp = \"10.0.0.0/8\",\n            Direction = \"egress\",\n            PortEnd = 9003,\n            PortStart = 8000,\n            Protocol = \"tcp\",\n            SecurityGroupId = \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewSecurityGroupRule(ctx, \"g1test3\", \u0026Vpc.SecurityGroupRuleArgs{\n\t\t\tCidrIp:          pulumi.String(\"10.0.0.0/8\"),\n\t\t\tDirection:       pulumi.String(\"egress\"),\n\t\t\tPortEnd:         pulumi.Int(9003),\n\t\t\tPortStart:       pulumi.Int(8000),\n\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\tSecurityGroupId: pulumi.String(\"sg-273ycgql3ig3k7fap8t3dyvqx\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var g1test3 = new SecurityGroupRule(\"g1test3\", SecurityGroupRuleArgs.builder()        \n            .cidrIp(\"10.0.0.0/8\")\n            .direction(\"egress\")\n            .portEnd(\"9003\")\n            .portStart(\"8000\")\n            .protocol(\"tcp\")\n            .securityGroupId(\"sg-273ycgql3ig3k7fap8t3dyvqx\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  g1test3:\n    type: volcengine:Vpc:SecurityGroupRule\n    properties:\n      cidrIp: 10.0.0.0/8\n      direction: egress\n      portEnd: 9003\n      portStart: 8000\n      protocol: tcp\n      securityGroupId: sg-273ycgql3ig3k7fap8t3dyvqx\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSecurityGroupRule can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/securityGroupRule:SecurityGroupRule default ID is a string concatenated with colons(SecurityGroupId:Protocol:PortStart:PortEnd:CidrIp)\n```\n\n ",
            "properties": {
                "cidrIp": {
                    "type": "string",
                    "description": "Cidr ip of egress/ingress Rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description of a egress rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of rule, ingress (inbound) or egress (outbound).\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Access strategy.\n"
                },
                "portEnd": {
                    "type": "integer",
                    "description": "Port end of egress/ingress Rule.\n"
                },
                "portStart": {
                    "type": "integer",
                    "description": "Port start of egress/ingress Rule.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of a security group rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SecurityGroup.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Id of SecurityGroup.\n"
                },
                "sourceGroupId": {
                    "type": "string",
                    "description": "ID of the source security group whose access permission you want to set.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of SecurityGroup.\n"
                }
            },
            "required": [
                "direction",
                "portEnd",
                "portStart",
                "protocol",
                "securityGroupId",
                "status"
            ],
            "inputProperties": {
                "cidrIp": {
                    "type": "string",
                    "description": "Cidr ip of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "description of a egress rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of rule, ingress (inbound) or egress (outbound).\n",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string",
                    "description": "Access strategy.\n",
                    "willReplaceOnChanges": true
                },
                "portEnd": {
                    "type": "integer",
                    "description": "Port end of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "portStart": {
                    "type": "integer",
                    "description": "Port start of egress/ingress Rule.\n",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority of a security group rule.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the SecurityGroup.\n",
                    "willReplaceOnChanges": true
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Id of SecurityGroup.\n"
                },
                "sourceGroupId": {
                    "type": "string",
                    "description": "ID of the source security group whose access permission you want to set.\n"
                }
            },
            "requiredInputs": [
                "direction",
                "portEnd",
                "portStart",
                "protocol",
                "securityGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecurityGroupRule resources.\n",
                "properties": {
                    "cidrIp": {
                        "type": "string",
                        "description": "Cidr ip of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "description of a egress rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of rule, ingress (inbound) or egress (outbound).\n",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string",
                        "description": "Access strategy.\n",
                        "willReplaceOnChanges": true
                    },
                    "portEnd": {
                        "type": "integer",
                        "description": "Port end of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "portStart": {
                        "type": "integer",
                        "description": "Port start of egress/ingress Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority of a security group rule.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the SecurityGroup.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Id of SecurityGroup.\n"
                    },
                    "sourceGroupId": {
                        "type": "string",
                        "description": "ID of the source security group whose access permission you want to set.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of SecurityGroup.\n"
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/subnet:Subnet": {
            "description": "Provides a resource to manage subnet\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.Subnet(\"foo\", {\n    cidrBlock: \"192.168.1.0/24\",\n    subnetName: \"subnet-test-2\",\n    vpcId: \"vpc-2749wnlhro3y87fap8u5ztvt5\",\n    zoneId: \"cn-beijing\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Subnet(\"foo\",\n    cidr_block=\"192.168.1.0/24\",\n    subnet_name=\"subnet-test-2\",\n    vpc_id=\"vpc-2749wnlhro3y87fap8u5ztvt5\",\n    zone_id=\"cn-beijing\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Subnet(\"foo\", new Volcengine.Vpc.SubnetArgs\n        {\n            CidrBlock = \"192.168.1.0/24\",\n            SubnetName = \"subnet-test-2\",\n            VpcId = \"vpc-2749wnlhro3y87fap8u5ztvt5\",\n            ZoneId = \"cn-beijing\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewSubnet(ctx, \"foo\", \u0026Vpc.SubnetArgs{\n\t\t\tCidrBlock:  pulumi.String(\"192.168.1.0/24\"),\n\t\t\tSubnetName: pulumi.String(\"subnet-test-2\"),\n\t\t\tVpcId:      pulumi.String(\"vpc-2749wnlhro3y87fap8u5ztvt5\"),\n\t\t\tZoneId:     pulumi.String(\"cn-beijing\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Subnet(\"foo\", SubnetArgs.builder()        \n            .cidrBlock(\"192.168.1.0/24\")\n            .subnetName(\"subnet-test-2\")\n            .vpcId(\"vpc-2749wnlhro3y87fap8u5ztvt5\")\n            .zoneId(\"cn-beijing\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:Subnet\n    properties:\n      cidrBlock: 192.168.1.0/24\n      subnetName: subnet-test-2\n      vpcId: vpc-2749wnlhro3y87fap8u5ztvt5\n      zoneId: cn-beijing\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSubnet can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/subnet:Subnet default subnet-274oj9a8rs9a87fap8sf9515b\n```\n\n ",
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of Subnet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Subnet.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Subnet.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "Id of the Zone.\n"
                }
            },
            "required": [
                "cidrBlock",
                "creationTime",
                "status",
                "subnetName",
                "vpcId",
                "zoneId"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Subnet.\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "The name of the Subnet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Id of the VPC.\n",
                    "willReplaceOnChanges": true
                },
                "zoneId": {
                    "type": "string",
                    "description": "Id of the Zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cidrBlock",
                "vpcId",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "cidrBlock": {
                        "type": "string",
                        "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of Subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Subnet.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of Subnet.\n"
                    },
                    "subnetName": {
                        "type": "string",
                        "description": "The name of the Subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Id of the VPC.\n",
                        "willReplaceOnChanges": true
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "Id of the Zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "volcengine:Vpc/vpc:Vpc": {
            "description": "Provides a resource to manage vpc\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = new volcengine.Vpc.Vpc(\"foo\", {\n    cidrBlock: \"172.16.0.0/16\",\n    dnsServers: [\n        \"8.8.8.8\",\n        \"114.114.114.114\",\n    ],\n    vpcName: \"tf-test-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.vpc.Vpc(\"foo\",\n    cidr_block=\"172.16.0.0/16\",\n    dns_servers=[\n        \"8.8.8.8\",\n        \"114.114.114.114\",\n    ],\n    vpc_name=\"tf-test-2\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = new Volcengine.Vpc.Vpc(\"foo\", new Volcengine.Vpc.VpcArgs\n        {\n            CidrBlock = \"172.16.0.0/16\",\n            DnsServers = \n            {\n                \"8.8.8.8\",\n                \"114.114.114.114\",\n            },\n            VpcName = \"tf-test-2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NewVpc(ctx, \"foo\", \u0026Vpc.VpcArgs{\n\t\t\tCidrBlock: pulumi.String(\"172.16.0.0/16\"),\n\t\t\tDnsServers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"114.114.114.114\"),\n\t\t\t},\n\t\t\tVpcName: pulumi.String(\"tf-test-2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Vpc(\"foo\", VpcArgs.builder()        \n            .cidrBlock(\"172.16.0.0/16\")\n            .dnsServers(            \n                \"8.8.8.8\",\n                \"114.114.114.114\")\n            .vpcName(\"tf-test-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: volcengine:Vpc:Vpc\n    properties:\n      cidrBlock: 172.16.0.0/16\n      dnsServers:\n        - 8.8.8.8\n        - 114.114.114.114\n      vpcName: tf-test-2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVPC can be imported using the id, e.g.\n\n```sh\n $ pulumi import volcengine:Vpc/vpc:Vpc default vpc-mizl7m1kqccg5smt1bdpijuj\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account ID of VPC.\n"
                },
                "associateCens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/volcengine:Vpc/VpcAssociateCen:VpcAssociateCen"
                    },
                    "description": "The associate cen list of VPC.\n"
                },
                "auxiliaryCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The auxiliary cidr block list of VPC.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n"
                },
                "creationTime": {
                    "type": "string",
                    "description": "Creation time of VPC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                },
                "natGatewayIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The nat gateway ID list of VPC.\n"
                },
                "routeTableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The route table ID list of VPC.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The security group ID list of VPC.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of VPC.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The subnet ID list of VPC.\n"
                },
                "updateTime": {
                    "type": "string",
                    "description": "The update time of VPC.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The ID of VPC.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                }
            },
            "required": [
                "accountId",
                "associateCens",
                "auxiliaryCidrBlocks",
                "cidrBlock",
                "creationTime",
                "natGatewayIds",
                "routeTableIds",
                "securityGroupIds",
                "status",
                "subnetIds",
                "updateTime",
                "vpcId",
                "vpcName"
            ],
            "inputProperties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VPC.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                },
                "vpcName": {
                    "type": "string",
                    "description": "The name of the VPC.\n"
                }
            },
            "requiredInputs": [
                "cidrBlock"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpc resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account ID of VPC.\n"
                    },
                    "associateCens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/VpcAssociateCen:VpcAssociateCen"
                        },
                        "description": "The associate cen list of VPC.\n"
                    },
                    "auxiliaryCidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The auxiliary cidr block list of VPC.\n"
                    },
                    "cidrBlock": {
                        "type": "string",
                        "description": "A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).\n",
                        "willReplaceOnChanges": true
                    },
                    "creationTime": {
                        "type": "string",
                        "description": "Creation time of VPC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the VPC.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.\n"
                    },
                    "natGatewayIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The nat gateway ID list of VPC.\n"
                    },
                    "routeTableIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The route table ID list of VPC.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The security group ID list of VPC.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of VPC.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The subnet ID list of VPC.\n"
                    },
                    "updateTime": {
                        "type": "string",
                        "description": "The update time of VPC.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of VPC.\n"
                    },
                    "vpcName": {
                        "type": "string",
                        "description": "The name of the VPC.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "volcengine:Clb/clbRules:ClbRules": {
            "description": "Use this data source to query detailed information of clb rules\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst default = volcengine.Clb.ClbRules({\n    listenerId: \"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n    ids: [\"rule-273z9jo9v3mrk7fap8sq8v5x7\"],\n});\nexport const data = _default;\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Clb.clb_rules(listener_id=\"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n    ids=[\"rule-273z9jo9v3mrk7fap8sq8v5x7\"])\npulumi.export(\"data\", default)\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.ClbRules.InvokeAsync(new Volcengine.Clb.ClbRulesArgs\n        {\n            ListenerId = \"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n            Ids = \n            {\n                \"rule-273z9jo9v3mrk7fap8sq8v5x7\",\n            },\n        }));\n        this.Data = @default;\n    }\n\n    [Output(\"data\")]\n    public Output\u003cstring\u003e Data { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := Clb.ClbRules(ctx, \u0026clb.ClbRulesArgs{\n\t\t\tListenerId: \"lsn-273ywvnmiu70g7fap8u2xzg9d\",\n\t\t\tIds: []string{\n\t\t\t\t\"rule-273z9jo9v3mrk7fap8sq8v5x7\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"data\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.ClbRules();\n\n        ctx.export(\"data\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Clb:ClbRules\n      Arguments:\n        listenerId: lsn-273ywvnmiu70g7fap8u2xzg9d\n        ids:\n          - rule-273z9jo9v3mrk7fap8sq8v5x7\noutputs:\n  data: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ClbRules.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Rule IDs.\n"
                    },
                    "listenerId": {
                        "type": "string",
                        "description": "The Id of listener.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ClbRules.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "listenerId": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Clb/ClbRulesRule:ClbRulesRule"
                        },
                        "description": "The collection of Rule query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listenerId",
                    "rules",
                    "id"
                ]
            }
        },
        "volcengine:Clb/clbs:Clbs": {
            "description": "Use this data source to query detailed information of clbs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultClbs = pulumi.output(volcengine.Clb.Clbs({\n    ids: [\"clb-273y2ok6ets007fap8txvf6us\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Clb.clbs(ids=[\"clb-273y2ok6ets007fap8txvf6us\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.Clbs.InvokeAsync(new Volcengine.Clb.ClbsArgs\n        {\n            Ids = \n            {\n                \"clb-273y2ok6ets007fap8txvf6us\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.Clbs(ctx, \u0026clb.ClbsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"clb-273y2ok6ets007fap8txvf6us\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.Clbs();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Clb:Clbs\n      Arguments:\n        ids:\n          - clb-273y2ok6ets007fap8txvf6us\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Clbs.\n",
                "properties": {
                    "eniAddress": {
                        "type": "string",
                        "description": "The private ip address of the Clb.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Clb IDs.\n"
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Clb.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Clbs.\n",
                "properties": {
                    "clbs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Clb/ClbsClb:ClbsClb"
                        },
                        "description": "The collection of Clb query.\n"
                    },
                    "eniAddress": {
                        "type": "string",
                        "description": "The Eni address of the Clb.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "loadBalancerName": {
                        "type": "string",
                        "description": "The name of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Clb query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The vpc ID of the Clb.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clbs",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Clb/listeners:Listeners": {
            "description": "Use this data source to query detailed information of listeners\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultListeners = pulumi.output(volcengine.Clb.Listeners({\n    ids: [\n        \"lsn-273yv0mhs5xj47fap8sehiiso\",\n        \"lsn-273yw6zps6pz47fap8swa0q2z\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Clb.listeners(ids=[\n    \"lsn-273yv0mhs5xj47fap8sehiiso\",\n    \"lsn-273yw6zps6pz47fap8swa0q2z\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.Listeners.InvokeAsync(new Volcengine.Clb.ListenersArgs\n        {\n            Ids = \n            {\n                \"lsn-273yv0mhs5xj47fap8sehiiso\",\n                \"lsn-273yw6zps6pz47fap8swa0q2z\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.Listeners(ctx, \u0026clb.ListenersArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"lsn-273yv0mhs5xj47fap8sehiiso\",\n\t\t\t\t\"lsn-273yw6zps6pz47fap8swa0q2z\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.Listeners();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Clb:Listeners\n      Arguments:\n        ids:\n          - lsn-273yv0mhs5xj47fap8sehiiso\n          - lsn-273yw6zps6pz47fap8swa0q2z\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Listeners.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Listener IDs.\n"
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The id of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Listener.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Listeners.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "listenerName": {
                        "type": "string",
                        "description": "The name of the Listener.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Clb/ListenersListener:ListenersListener"
                        },
                        "description": "The collection of Listener query.\n"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Listener query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "listeners",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Clb/serverGroupServers:ServerGroupServers": {
            "description": "Use this data source to query detailed information of server group servers\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultServerGroupServers = pulumi.output(volcengine.Clb.ServerGroupServers({\n    ids: [\"rs-273z9pv8mtfcw7fap8sp6ie8k\"],\n    serverGroupId: \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Clb.server_group_servers(ids=[\"rs-273z9pv8mtfcw7fap8sp6ie8k\"],\n    server_group_id=\"rsp-273z9pt9lpdds7fap8sqdvfrf\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.ServerGroupServers.InvokeAsync(new Volcengine.Clb.ServerGroupServersArgs\n        {\n            Ids = \n            {\n                \"rs-273z9pv8mtfcw7fap8sp6ie8k\",\n            },\n            ServerGroupId = \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.ServerGroupServers(ctx, \u0026clb.ServerGroupServersArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"rs-273z9pv8mtfcw7fap8sp6ie8k\",\n\t\t\t},\n\t\t\tServerGroupId: \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.ServerGroupServers();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Clb:ServerGroupServers\n      Arguments:\n        ids:\n          - rs-273z9pv8mtfcw7fap8sp6ie8k\n        serverGroupId: rsp-273z9pt9lpdds7fap8sqdvfrf\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ServerGroupServers.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ServerGroupServer IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ServerGroupServer.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serverGroupId": {
                        "type": "string",
                        "description": "The ID of the ServerGroup.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ServerGroupServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serverGroupId": {
                        "type": "string"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Clb/ServerGroupServersServer:ServerGroupServersServer"
                        },
                        "description": "The server list of ServerGroup.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ServerGroupServer query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverGroupId",
                    "servers",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Clb/serverGroups:ServerGroups": {
            "description": "Use this data source to query detailed information of server groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultServerGroups = pulumi.output(volcengine.Clb.ServerGroups({\n    ids: [\n        \"rsp-273yv0kir1vk07fap8tt9jtwg\",\n        \"rsp-273yxuqfova4g7fap8tyemn6t\",\n        \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Clb.server_groups(ids=[\n    \"rsp-273yv0kir1vk07fap8tt9jtwg\",\n    \"rsp-273yxuqfova4g7fap8tyemn6t\",\n    \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Clb.ServerGroups.InvokeAsync(new Volcengine.Clb.ServerGroupsArgs\n        {\n            Ids = \n            {\n                \"rsp-273yv0kir1vk07fap8tt9jtwg\",\n                \"rsp-273yxuqfova4g7fap8tyemn6t\",\n                \"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Clb\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Clb.ServerGroups(ctx, \u0026clb.ServerGroupsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"rsp-273yv0kir1vk07fap8tt9jtwg\",\n\t\t\t\t\"rsp-273yxuqfova4g7fap8tyemn6t\",\n\t\t\t\t\"rsp-273z9pt9lpdds7fap8sqdvfrf\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ClbFunctions.ServerGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Clb:ServerGroups\n      Arguments:\n        ids:\n          - rsp-273yv0kir1vk07fap8tt9jtwg\n          - rsp-273yxuqfova4g7fap8tyemn6t\n          - rsp-273z9pt9lpdds7fap8sqdvfrf\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ServerGroups.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ServerGroup IDs.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "The id of the Clb.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ServerGroup.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ServerGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Clb/ServerGroupsGroup:ServerGroupsGroup"
                        },
                        "description": "The collection of ServerGroup query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "serverGroupName": {
                        "type": "string",
                        "description": "The name of the ServerGroup.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ServerGroup query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Ebs/volumes:Volumes": {
            "description": "Use this data source to query detailed information of volumes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVolumes = pulumi.output(volcengine.Ebs.Volumes({\n    ids: [\"vol-3tzg6y5imn3b9fchkedb\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Ebs.volumes(ids=[\"vol-3tzg6y5imn3b9fchkedb\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Ebs.Volumes.InvokeAsync(new Volcengine.Ebs.VolumesArgs\n        {\n            Ids = \n            {\n                \"vol-3tzg6y5imn3b9fchkedb\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ebs.Volumes(ctx, \u0026ebs.VolumesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vol-3tzg6y5imn3b9fchkedb\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EbsFunctions.Volumes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Ebs:Volumes\n      Arguments:\n        ids:\n          - vol-3tzg6y5imn3b9fchkedb\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Volumes.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Volume IDs.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The Id of instance.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The Kind of Volume.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Volume.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "volumeName": {
                        "type": "string",
                        "description": "The name of Volume.\n"
                    },
                    "volumeStatus": {
                        "type": "string",
                        "description": "The Status of Volume.\n"
                    },
                    "volumeType": {
                        "type": "string",
                        "description": "The type of Volume.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The Id of Zone.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Volumes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Volume query.\n"
                    },
                    "volumeName": {
                        "type": "string"
                    },
                    "volumeStatus": {
                        "type": "string"
                    },
                    "volumeType": {
                        "type": "string"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Ebs/VolumesVolume:VolumesVolume"
                        },
                        "description": "The collection of Volume query.\n"
                    },
                    "zoneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "volumes",
                    "id"
                ]
            }
        },
        "volcengine:Ecs/images:Images": {
            "description": "Use this data source to query detailed information of images\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultImages = pulumi.output(volcengine.Ecs.Images({\n    ids: [\n        \"image-cm9ssb4eqmhdas306zlp\",\n        \"image-ybkzct2rtj4ay5rmlfc3\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Ecs.images(ids=[\n    \"image-cm9ssb4eqmhdas306zlp\",\n    \"image-ybkzct2rtj4ay5rmlfc3\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Ecs.Images.InvokeAsync(new Volcengine.Ecs.ImagesArgs\n        {\n            Ids = \n            {\n                \"image-cm9ssb4eqmhdas306zlp\",\n                \"image-ybkzct2rtj4ay5rmlfc3\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ecs.Images(ctx, \u0026ecs.ImagesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"image-cm9ssb4eqmhdas306zlp\",\n\t\t\t\t\"image-ybkzct2rtj4ay5rmlfc3\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EcsFunctions.Images();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Ecs:Images\n      Arguments:\n        ids:\n          - image-cm9ssb4eqmhdas306zlp\n          - image-ybkzct2rtj4ay5rmlfc3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Images.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Image IDs.\n"
                    },
                    "instanceTypeId": {
                        "type": "string",
                        "description": "The specification of  Instance.\n"
                    },
                    "isSupportCloudInit": {
                        "type": "boolean",
                        "description": "Whether the Image support cloud-init.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Image.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The operating system type of Image.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Image status.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of Image.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Images.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Ecs/ImagesImage:ImagesImage"
                        },
                        "description": "The collection of Image query.\n"
                    },
                    "instanceTypeId": {
                        "type": "string"
                    },
                    "isSupportCloudInit": {
                        "type": "boolean",
                        "description": "Whether the Image support cloud-init.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The operating system type of Image.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The status of Image.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Image query.\n"
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of Image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Ecs/instances:Instances": {
            "description": "Use this data source to query detailed information of ecs instances\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst foo = pulumi.output(volcengine.Ecs.Instances({\n    ids: [\"i-ebgy6xmgjve0384ncgsc\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nfoo = volcengine.Ecs.instances(ids=[\"i-ebgy6xmgjve0384ncgsc\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Volcengine.Ecs.Instances.InvokeAsync(new Volcengine.Ecs.InstancesArgs\n        {\n            Ids = \n            {\n                \"i-ebgy6xmgjve0384ncgsc\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Ecs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Ecs.Instances(ctx, \u0026ecs.InstancesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"i-ebgy6xmgjve0384ncgsc\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = EcsFunctions.Instances();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: volcengine:Ecs:Instances\n      Arguments:\n        ids:\n          - i-ebgy6xmgjve0384ncgsc\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Instances.\n",
                "properties": {
                    "hpcClusterId": {
                        "type": "string",
                        "description": "The hpc cluster ID of ECS instance.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ECS instance IDs.\n"
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The key pair name of ECS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of ECS instance.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The primary ip address of ECS instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Instances.\n",
                "properties": {
                    "hpcClusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceChargeType": {
                        "type": "string",
                        "description": "The charge type of ECS instance.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Ecs/InstancesInstance:InstancesInstance"
                        },
                        "description": "The collection of ECS instance query.\n"
                    },
                    "keyPairName": {
                        "type": "string",
                        "description": "The ssh key name of ECS instance.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "The private ip address of networkInterface.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of ECS instance.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ECS instance query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The VPC ID of ECS instance.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The available zone ID of ECS instance.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instances",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Eip/addresses:Addresses": {
            "description": "Use this data source to query detailed information of eip addresses\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAddresses = pulumi.output(volcengine.Eip.Addresses({\n    ids: [\"eip-2748mbpjqzhfk7fap8teu0k1a\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Eip.addresses(ids=[\"eip-2748mbpjqzhfk7fap8teu0k1a\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Eip.Addresses.InvokeAsync(new Volcengine.Eip.AddressesArgs\n        {\n            Ids = \n            {\n                \"eip-2748mbpjqzhfk7fap8teu0k1a\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Eip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Eip.Addresses(ctx, \u0026eip.AddressesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"eip-2748mbpjqzhfk7fap8teu0k1a\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = EipFunctions.Addresses();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Eip:Addresses\n      Arguments:\n        ids:\n          - eip-2748mbpjqzhfk7fap8teu0k1a\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Addresses.\n",
                "properties": {
                    "associatedInstanceId": {
                        "type": "string",
                        "description": "An id of associated instance.\n"
                    },
                    "associatedInstanceType": {
                        "type": "string",
                        "description": "A type of associated instance.\n"
                    },
                    "eipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of EIP ip address that you want to query.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of EIP allocation ids.\n"
                    },
                    "isp": {
                        "type": "string",
                        "description": "An ISP of EIP Address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name of EIP.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A status of EIP.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Addresses.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Eip/AddressesAddress:AddressesAddress"
                        },
                        "description": "The collection of EIP addresses.\n"
                    },
                    "associatedInstanceId": {
                        "type": "string"
                    },
                    "associatedInstanceType": {
                        "type": "string"
                    },
                    "eipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isp": {
                        "type": "string",
                        "description": "The ISP of EIP Address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EIP.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the EIP.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of EIP addresses query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Iam/policies:Policies": {
            "description": "Use this data source to query detailed information of iam policies\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultPolicies = pulumi.output(volcengine.Iam.Policies({\n    query: \"AdministratorAccess\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Iam.policies(query=\"AdministratorAccess\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Policies.InvokeAsync(new Volcengine.Iam.PoliciesArgs\n        {\n            Query = \"AdministratorAccess\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.Policies(ctx, \u0026iam.PoliciesArgs{\n\t\t\tQuery: pulumi.StringRef(\"AdministratorAccess\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Policies();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Iam:Policies\n      Arguments:\n        query: AdministratorAccess\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Policies.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Policy.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Query policies, support policy name or description.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the Policy.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of policy.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Policies.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Iam/PoliciesPolicy:PoliciesPolicy"
                        },
                        "description": "The collection of Policy query.\n"
                    },
                    "query": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Policy query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "policies",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Iam/roles:Roles": {
            "description": "Use this data source to query detailed information of iam roles\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRoles = pulumi.output(volcengine.Iam.Roles());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Iam.roles()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Roles.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.Roles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Roles();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Iam:Roles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Roles.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Role.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query field of Role.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role, comma separated.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Roles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "query": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The name of the Role.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Iam/RolesRole:RolesRole"
                        },
                        "description": "The collection of Role query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Role query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "roles",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Iam/users:Users": {
            "description": "Use this data source to query detailed information of iam users\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultUsers = pulumi.output(volcengine.Iam.Users());\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Iam.users()\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Iam.Users.InvokeAsync());\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Iam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Iam.Users(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = IamFunctions.Users();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Iam:Users\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Users.\n",
                "properties": {
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of IAM.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of user names.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Users.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of user query.\n"
                    },
                    "userNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Iam/UsersUser:UsersUser"
                        },
                        "description": "The collection of user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "users",
                    "id"
                ]
            }
        },
        "volcengine:Vke/clusters:Clusters": {
            "description": "Use this data source to query detailed information of vke clusters\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultClusters = pulumi.output(volcengine.Vke.Clusters({\n    podsConfigPodNetworkMode: \"VpcCniShared\",\n    statuses: [{\n        conditionsType: \"Progressing\",\n        phase: \"Creating\",\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vke.clusters(pods_config_pod_network_mode=\"VpcCniShared\",\n    statuses=[volcengine.vke.ClustersStatusArgs(\n        conditions_type=\"Progressing\",\n        phase=\"Creating\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Clusters.InvokeAsync(new Volcengine.Vke.ClustersArgs\n        {\n            PodsConfigPodNetworkMode = \"VpcCniShared\",\n            Statuses = \n            {\n                new Volcengine.Vke.Inputs.ClustersStatusArgs\n                {\n                    ConditionsType = \"Progressing\",\n                    Phase = \"Creating\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.Clusters(ctx, \u0026vke.ClustersArgs{\n\t\t\tPodsConfigPodNetworkMode: pulumi.StringRef(\"VpcCniShared\"),\n\t\t\tStatuses: []vke.ClustersStatus{\n\t\t\t\tvke.ClustersStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Clusters();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vke:Clusters\n      Arguments:\n        podsConfigPodNetworkMode: VpcCniShared\n        statuses:\n          - conditionsType: Progressing\n            phase: Creating\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Clusters.\n",
                "properties": {
                    "createClientToken": {
                        "type": "string",
                        "description": "ClientToken when the cluster is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Cluster IDs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Cluster.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "pageNumber": {
                        "type": "integer",
                        "description": "The page number of clusters query.\n"
                    },
                    "pageSize": {
                        "type": "integer",
                        "description": "The page size of clusters query.\n"
                    },
                    "podsConfigPodNetworkMode": {
                        "type": "string",
                        "description": "The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/ClustersStatus:ClustersStatus"
                        },
                        "description": "Array of cluster states to filter. (The elements of the array are logically ORed. A maximum of 15 state array elements can be filled at a time).\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when the last cluster update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Clusters.\n",
                "properties": {
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/ClustersCluster:ClustersCluster"
                        },
                        "description": "The collection of VkeCluster query.\n"
                    },
                    "createClientToken": {
                        "type": "string"
                    },
                    "deleteProtectionEnabled": {
                        "type": "boolean",
                        "description": "The delete protection of the cluster, the value is `true` or `false`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    },
                    "podsConfigPodNetworkMode": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/ClustersStatus:ClustersStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Cluster query.\n"
                    },
                    "updateClientToken": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusters",
                    "pageNumber",
                    "pageSize",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vke/nodePools:NodePools": {
            "description": "Use this data source to query detailed information of vke node pools\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst vkeTest = pulumi.output(volcengine.Vke.NodePools({\n    clusterIds: [\"ccabe57fqtofgrbln3dog\"],\n    name: \"demo\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\nvke_test = volcengine.Vke.node_pools(cluster_ids=[\"ccabe57fqtofgrbln3dog\"],\n    name=\"demo\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var vkeTest = Output.Create(Volcengine.Vke.NodePools.InvokeAsync(new Volcengine.Vke.NodePoolsArgs\n        {\n            ClusterIds = \n            {\n                \"ccabe57fqtofgrbln3dog\",\n            },\n            Name = \"demo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.NodePools(ctx, \u0026vke.NodePoolsArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"ccabe57fqtofgrbln3dog\",\n\t\t\t},\n\t\t\tName: pulumi.StringRef(\"demo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vkeTest = VkeFunctions.NodePools();\n\n    }\n}\n```\n```yaml\nvariables:\n  vkeTest:\n    Fn::Invoke:\n      Function: volcengine:Vke:NodePools\n      Arguments:\n        clusterIds:\n          - ccabe57fqtofgrbln3dog\n        name: demo\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking NodePools.\n",
                "properties": {
                    "autoScalingEnabled": {
                        "type": "boolean",
                        "description": "Is enabled of AutoScaling.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n"
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The ClusterIds of NodePool IDs.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The ClientToken when successfully created.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of NodePool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of NodePool.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodePoolsStatus:NodePoolsStatus"
                        },
                        "description": "The Status of NodePool.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when last update was successful.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by NodePools.\n",
                "properties": {
                    "autoScalingEnabled": {
                        "type": "boolean"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ClusterId of NodePool.\n"
                    },
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The ClientToken when successfully created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of NodePool.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodePoolsNodePool:NodePoolsNodePool"
                        },
                        "description": "The collection of NodePools query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodePoolsStatus:NodePoolsStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "Returns the total amount of the data list.\n"
                    },
                    "updateClientToken": {
                        "type": "string",
                        "description": "The ClientToken when last update was successful.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodePools",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vke/nodes:Nodes": {
            "description": "Use this data source to query detailed information of vke nodes\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultNodes = pulumi.output(volcengine.Vke.Nodes({\n    clusterIds: [\n        \"c123\",\n        \"c456\",\n    ],\n    ids: [\"ncaa3e5mrsferqkomi190\"],\n    statuses: [\n        {\n            conditionsType: \"Progressing\",\n            phase: \"Creating\",\n        },\n        {\n            conditionsType: \"Progressing123\",\n            phase: \"Creating123\",\n        },\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vke.nodes(cluster_ids=[\n        \"c123\",\n        \"c456\",\n    ],\n    ids=[\"ncaa3e5mrsferqkomi190\"],\n    statuses=[\n        volcengine.vke.NodesStatusArgs(\n            conditions_type=\"Progressing\",\n            phase=\"Creating\",\n        ),\n        volcengine.vke.NodesStatusArgs(\n            conditions_type=\"Progressing123\",\n            phase=\"Creating123\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vke.Nodes.InvokeAsync(new Volcengine.Vke.NodesArgs\n        {\n            ClusterIds = \n            {\n                \"c123\",\n                \"c456\",\n            },\n            Ids = \n            {\n                \"ncaa3e5mrsferqkomi190\",\n            },\n            Statuses = \n            {\n                new Volcengine.Vke.Inputs.NodesStatusArgs\n                {\n                    ConditionsType = \"Progressing\",\n                    Phase = \"Creating\",\n                },\n                new Volcengine.Vke.Inputs.NodesStatusArgs\n                {\n                    ConditionsType = \"Progressing123\",\n                    Phase = \"Creating123\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vke\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vke.Nodes(ctx, \u0026vke.NodesArgs{\n\t\t\tClusterIds: []string{\n\t\t\t\t\"c123\",\n\t\t\t\t\"c456\",\n\t\t\t},\n\t\t\tIds: []string{\n\t\t\t\t\"ncaa3e5mrsferqkomi190\",\n\t\t\t},\n\t\t\tStatuses: []vke.NodesStatus{\n\t\t\t\tvke.NodesStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating\"),\n\t\t\t\t},\n\t\t\t\tvke.NodesStatus{\n\t\t\t\t\tConditionsType: pulumi.StringRef(\"Progressing123\"),\n\t\t\t\t\tPhase:          pulumi.StringRef(\"Creating123\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VkeFunctions.Nodes();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vke:Nodes\n      Arguments:\n        clusterIds:\n          - c123\n          - c456\n        ids:\n          - ncaa3e5mrsferqkomi190\n        statuses:\n          - conditionsType: Progressing\n            phase: Creating\n          - conditionsType: Progressing123\n            phase: Creating123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Nodes.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Cluster IDs.\n"
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The Create Client Token.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Node IDs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Name of Node.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Node.\n"
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Node Pool IDs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodesStatus:NodesStatus"
                        },
                        "description": "The Status of filter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Nodes.\n",
                "properties": {
                    "clusterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createClientToken": {
                        "type": "string",
                        "description": "The create client token of node.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of Node.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodesNode:NodesNode"
                        },
                        "description": "The collection of Node query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vke/NodesStatus:NodesStatus"
                        }
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Node query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/acls:Acls": {
            "description": "Use this data source to query detailed information of acls\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultAcls = pulumi.output(volcengine.Vpc.Acls({\n    ids: [\"acl-3ti8n0rurx4bwbh9jzdy\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.acls(ids=[\"acl-3ti8n0rurx4bwbh9jzdy\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Acls.InvokeAsync(new Volcengine.Vpc.AclsArgs\n        {\n            Ids = \n            {\n                \"acl-3ti8n0rurx4bwbh9jzdy\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Acls(ctx, \u0026vpc.AclsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"acl-3ti8n0rurx4bwbh9jzdy\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Acls();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Acls\n      Arguments:\n        ids:\n          - acl-3ti8n0rurx4bwbh9jzdy\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Acls.\n",
                "properties": {
                    "aclName": {
                        "type": "string",
                        "description": "The name of acl.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Acl IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Acl.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Acls.\n",
                "properties": {
                    "aclName": {
                        "type": "string",
                        "description": "The Name of Acl.\n"
                    },
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/AclsAcl:AclsAcl"
                        },
                        "description": "The collection of Acl query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Acl query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "acls",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/certificates:Certificates": {
            "description": "Use this data source to query detailed information of certificates\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultCertificates = pulumi.output(volcengine.Vpc.Certificates({\n    ids: [\"cert-274scdwqufwg07fap8u5fu8pi\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.certificates(ids=[\"cert-274scdwqufwg07fap8u5fu8pi\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Certificates.InvokeAsync(new Volcengine.Vpc.CertificatesArgs\n        {\n            Ids = \n            {\n                \"cert-274scdwqufwg07fap8u5fu8pi\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Certificates(ctx, \u0026vpc.CertificatesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cert-274scdwqufwg07fap8u5fu8pi\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Certificates();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Certificates\n      Arguments:\n        ids:\n          - cert-274scdwqufwg07fap8u5fu8pi\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Certificates.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of Certificate IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "The Name Regex of Certificate.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Certificates.\n",
                "properties": {
                    "certificateName": {
                        "type": "string",
                        "description": "The name of the Certificate.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/CertificatesCertificate:CertificatesCertificate"
                        },
                        "description": "The collection of Certificate query.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Certificate query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/gateways:Gateways": {
            "description": "Use this data source to query detailed information of nat gateways\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultGateways = pulumi.output(volcengine.Vpc.Gateways({\n    ids: [\n        \"ngw-2743w1f6iqby87fap8tvm9kop\",\n        \"ngw-274gwbqe340zk7fap8spkzo7x\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.gateways(ids=[\n    \"ngw-2743w1f6iqby87fap8tvm9kop\",\n    \"ngw-274gwbqe340zk7fap8spkzo7x\",\n])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Gateways.InvokeAsync(new Volcengine.Vpc.GatewaysArgs\n        {\n            Ids = \n            {\n                \"ngw-2743w1f6iqby87fap8tvm9kop\",\n                \"ngw-274gwbqe340zk7fap8spkzo7x\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Gateways(ctx, \u0026vpc.GatewaysArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"ngw-2743w1f6iqby87fap8tvm9kop\",\n\t\t\t\t\"ngw-274gwbqe340zk7fap8spkzo7x\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Gateways();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Gateways\n      Arguments:\n        ids:\n          - ngw-2743w1f6iqby87fap8tvm9kop\n          - ngw-274gwbqe340zk7fap8spkzo7x\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Gateways.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of NatGateway IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "The Name Regex of NatGateway.\n"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the Subnet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Gateways.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NatGateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "natGatewayName": {
                        "type": "string",
                        "description": "The name of the NatGateway.\n"
                    },
                    "natGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/GatewaysNatGateway:GatewaysNatGateway"
                        },
                        "description": "The collection of NatGateway query.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "spec": {
                        "type": "string",
                        "description": "The specification of the NatGateway.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the Subnet.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of NatGateway query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The ID of the VPC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "natGateways",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/networkInterfaces:NetworkInterfaces": {
            "description": "Use this data source to query detailed information of network interfaces\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultNetworkInterfaces = pulumi.output(volcengine.Vpc.NetworkInterfaces({\n    ids: [\"eni-2744htx2w0j5s7fap8t3ivwze\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.network_interfaces(ids=[\"eni-2744htx2w0j5s7fap8t3ivwze\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.NetworkInterfaces.InvokeAsync(new Volcengine.Vpc.NetworkInterfacesArgs\n        {\n            Ids = \n            {\n                \"eni-2744htx2w0j5s7fap8t3ivwze\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.NetworkInterfaces(ctx, \u0026vpc.NetworkInterfacesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"eni-2744htx2w0j5s7fap8t3ivwze\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.NetworkInterfaces();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:NetworkInterfaces\n      Arguments:\n        ids:\n          - eni-2744htx2w0j5s7fap8t3ivwze\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking NetworkInterfaces.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ENI ids.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "An id of the instance to which the ENI is bound.\n"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "A name of ENI.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "primaryIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of primary IP address of ENI.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "An id of the security group to which the secondary ENI belongs.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "A status of ENI.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "An id of the subnet to which the ENI is connected.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of ENI.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "An id of the virtual private cloud (VPC) to which the ENI belongs.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by NetworkInterfaces.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "networkInterfaceName": {
                        "type": "string",
                        "description": "The name of the ENI.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/NetworkInterfacesNetworkInterface:NetworkInterfacesNetworkInterface"
                        },
                        "description": "The collection of ENI.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "primaryIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "securityGroupId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the ENI.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet to which the ENI is connected.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of ENI query.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the ENI.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the virtual private cloud (VPC) to which the ENI belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "networkInterfaces",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/routeEntries:RouteEntries": {
            "description": "Use this data source to query detailed information of route entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRouteEntries = pulumi.output(volcengine.Vpc.RouteEntries({\n    ids: [],\n    routeTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.route_entries(ids=[],\n    route_table_id=\"vtb-274e19skkuhog7fap8u4i8ird\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.RouteEntries.InvokeAsync(new Volcengine.Vpc.RouteEntriesArgs\n        {\n            Ids = {},\n            RouteTableId = \"vtb-274e19skkuhog7fap8u4i8ird\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.RouteEntries(ctx, \u0026vpc.RouteEntriesArgs{\n\t\t\tIds:          []interface{}{},\n\t\t\tRouteTableId: \"vtb-274e19skkuhog7fap8u4i8ird\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.RouteEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:RouteEntries\n      Arguments:\n        ids: []\n        routeTableId: vtb-274e19skkuhog7fap8u4i8ird\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RouteEntries.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "A destination CIDR block of route entry.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of route entry ids.\n"
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "An id of next hop.\n"
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "A type of next hop.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "A name of route entry.\n"
                    },
                    "routeEntryType": {
                        "type": "string",
                        "description": "A type of route entry.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "An id of route table.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeTableId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by RouteEntries.\n",
                "properties": {
                    "destinationCidrBlock": {
                        "type": "string",
                        "description": "The destination CIDR block of the route entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nextHopId": {
                        "type": "string",
                        "description": "The id of the next hop.\n"
                    },
                    "nextHopType": {
                        "type": "string",
                        "description": "The type of the next hop.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "routeEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/RouteEntriesRouteEntry:RouteEntriesRouteEntry"
                        },
                        "description": "The collection of route tables.\n"
                    },
                    "routeEntryName": {
                        "type": "string",
                        "description": "The name of the route entry.\n"
                    },
                    "routeEntryType": {
                        "type": "string"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The id of the route table to which the route entry belongs.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of route entry query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeEntries",
                    "routeTableId",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/routeTables:RouteTables": {
            "description": "Use this data source to query detailed information of route tables\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultRouteTables = pulumi.output(volcengine.Vpc.RouteTables({\n    ids: [\n        \"vtb-274e19skkuhog7fap8u4i8ird\",\n        \"vtb-2744hslq5b7r47fap8tjomgnj\",\n    ],\n    routeTableName: \"vpc-fast\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.route_tables(ids=[\n        \"vtb-274e19skkuhog7fap8u4i8ird\",\n        \"vtb-2744hslq5b7r47fap8tjomgnj\",\n    ],\n    route_table_name=\"vpc-fast\")\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.RouteTables.InvokeAsync(new Volcengine.Vpc.RouteTablesArgs\n        {\n            Ids = \n            {\n                \"vtb-274e19skkuhog7fap8u4i8ird\",\n                \"vtb-2744hslq5b7r47fap8tjomgnj\",\n            },\n            RouteTableName = \"vpc-fast\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.RouteTables(ctx, \u0026vpc.RouteTablesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vtb-274e19skkuhog7fap8u4i8ird\",\n\t\t\t\t\"vtb-2744hslq5b7r47fap8tjomgnj\",\n\t\t\t},\n\t\t\tRouteTableName: pulumi.StringRef(\"vpc-fast\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.RouteTables();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:RouteTables\n      Arguments:\n        ids:\n          - vtb-274e19skkuhog7fap8u4i8ird\n          - vtb-2744hslq5b7r47fap8tjomgnj\n        routeTableName: vpc-fast\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking RouteTables.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of route table ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "A name of route table.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "An id of VPC.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by RouteTables.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "routeTableName": {
                        "type": "string",
                        "description": "The name of the route table.\n"
                    },
                    "routeTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/RouteTablesRouteTable:RouteTablesRouteTable"
                        },
                        "description": "The collection of route tables.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of route table query.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "The id of the virtual private cloud (VPC) to which the route entry belongs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "routeTables",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/securityGroups:SecurityGroups": {
            "description": "Use this data source to query detailed information of security groups\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSecurityGroups = pulumi.output(volcengine.Vpc.SecurityGroups({\n    ids: [\"sg-273ycgql3ig3k7fap8t3dyvqx\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.security_groups(ids=[\"sg-273ycgql3ig3k7fap8t3dyvqx\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.SecurityGroups.InvokeAsync(new Volcengine.Vpc.SecurityGroupsArgs\n        {\n            Ids = \n            {\n                \"sg-273ycgql3ig3k7fap8t3dyvqx\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.SecurityGroups(ctx, \u0026vpc.SecurityGroupsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"sg-273ycgql3ig3k7fap8t3dyvqx\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.SecurityGroups();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:SecurityGroups\n      Arguments:\n        ids:\n          - sg-273ycgql3ig3k7fap8t3dyvqx\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SecurityGroups.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SecurityGroup IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of SecurityGroup.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by SecurityGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "securityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/SecurityGroupsSecurityGroup:SecurityGroupsSecurityGroup"
                        },
                        "description": "The collection of SecurityGroup query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of SecurityGroup query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "securityGroups",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/snatEntries:SnatEntries": {
            "description": "Use this data source to query detailed information of snat entries\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSnatEntries = pulumi.output(volcengine.Vpc.SnatEntries({\n    ids: [\"snat-274zl8b1kxzb47fap8u35uune\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.snat_entries(ids=[\"snat-274zl8b1kxzb47fap8u35uune\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.SnatEntries.InvokeAsync(new Volcengine.Vpc.SnatEntriesArgs\n        {\n            Ids = \n            {\n                \"snat-274zl8b1kxzb47fap8u35uune\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.SnatEntries(ctx, \u0026vpc.SnatEntriesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"snat-274zl8b1kxzb47fap8u35uune\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.SnatEntries();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:SnatEntries\n      Arguments:\n        ids:\n          - snat-274zl8b1kxzb47fap8u35uune\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking SnatEntries.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "An id of the public ip address used by the SNAT entry.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SNAT entry ids.\n"
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "An id of the nat gateway to which the entry belongs.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "A name of SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "An id of the subnet that is required to access the Internet.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by SnatEntries.\n",
                "properties": {
                    "eipId": {
                        "type": "string",
                        "description": "The id of the public ip address used by the SNAT entry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "natGatewayId": {
                        "type": "string",
                        "description": "The id of the nat gateway to which the entry belongs.\n"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "snatEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/SnatEntriesSnatEntry:SnatEntriesSnatEntry"
                        },
                        "description": "The collection of snat entries.\n"
                    },
                    "snatEntryName": {
                        "type": "string",
                        "description": "The name of the SNAT entry.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The id of the subnet that is required to access the internet.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of snat entries query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "snatEntries",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/subnets:Subnets": {
            "description": "Use this data source to query detailed information of subnets\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultSubnets = pulumi.output(volcengine.Vpc.Subnets({\n    ids: [\"subnet-274zsa5kfmj287fap8soo5e19\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.subnets(ids=[\"subnet-274zsa5kfmj287fap8soo5e19\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Subnets.InvokeAsync(new Volcengine.Vpc.SubnetsArgs\n        {\n            Ids = \n            {\n                \"subnet-274zsa5kfmj287fap8soo5e19\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Subnets(ctx, \u0026vpc.SubnetsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"subnet-274zsa5kfmj287fap8soo5e19\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Subnets();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Subnets\n      Arguments:\n        ids:\n          - subnet-274zsa5kfmj287fap8soo5e19\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Subnets.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Subnet IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Subnet.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Subnets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/SubnetsSubnet:SubnetsSubnet"
                        },
                        "description": "The collection of Subnet query.\n"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Subnet query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "subnets",
                    "totalCount",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/vpcs:Vpcs": {
            "description": "Use this data source to query detailed information of vpcs\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultVpcs = pulumi.output(volcengine.Vpc.Vpcs({\n    ids: [\"vpc-mizl7m1kqccg5smt1bdpijuj\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.vpcs(ids=[\"vpc-mizl7m1kqccg5smt1bdpijuj\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Vpcs.InvokeAsync(new Volcengine.Vpc.VpcsArgs\n        {\n            Ids = \n            {\n                \"vpc-mizl7m1kqccg5smt1bdpijuj\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Vpcs(ctx, \u0026vpc.VpcsArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"vpc-mizl7m1kqccg5smt1bdpijuj\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Vpcs();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Vpcs\n      Arguments:\n        ids:\n          - vpc-mizl7m1kqccg5smt1bdpijuj\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Vpcs.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of VPC IDs.\n"
                    },
                    "nameRegex": {
                        "type": "string",
                        "description": "A Name Regex of Vpc.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Vpcs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of Vpc query.\n"
                    },
                    "vpcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/VpcsVpc:VpcsVpc"
                        },
                        "description": "The collection of Vpc query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "vpcs",
                    "id"
                ]
            }
        },
        "volcengine:Vpc/zones:Zones": {
            "description": "Use this data source to query detailed information of zones\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as volcengine from \"@pulumi/volcengine\";\n\nconst defaultZones = pulumi.output(volcengine.Vpc.Zones({\n    ids: [\"cn-lingqiu-a\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_volcengine as volcengine\n\ndefault = volcengine.Vpc.zones(ids=[\"cn-lingqiu-a\"])\n```\n```csharp\nusing Pulumi;\nusing Volcengine = Pulumi.Volcengine;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @default = Output.Create(Volcengine.Vpc.Zones.InvokeAsync(new Volcengine.Vpc.ZonesArgs\n        {\n            Ids = \n            {\n                \"cn-lingqiu-a\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-volcengine/sdk/go/volcengine/Vpc\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Vpc.Zones(ctx, \u0026vpc.ZonesArgs{\n\t\t\tIds: []string{\n\t\t\t\t\"cn-lingqiu-a\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport java.util.*;\nimport java.io.*;\nimport java.nio.*;\nimport com.pulumi.*;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = VpcFunctions.Zones();\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    Fn::Invoke:\n      Function: volcengine:Vpc:Zones\n      Arguments:\n        ids:\n          - cn-lingqiu-a\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking Zones.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of zone ids.\n"
                    },
                    "outputFile": {
                        "type": "string",
                        "description": "File name where to save data source results.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by Zones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "outputFile": {
                        "type": "string"
                    },
                    "totalCount": {
                        "type": "integer",
                        "description": "The total count of zone query.\n"
                    },
                    "zones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/volcengine:Vpc/ZonesZone:ZonesZone"
                        },
                        "description": "The collection of zone query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "totalCount",
                    "zones",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-volcengine/sdk/go/volcengine"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing volcengine cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-volcengine` repo](https://github.com/pulumi/pulumi-volcengine/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`volcengine/terraform-provider-volcengine` repo](https://github.com/volcengine/terraform-provider-volcengine/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/volcengine/terraform-provider-volcengine)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-volcengine` repo](https://github.com/pulumi/pulumi-volcengine/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`volcengine/terraform-provider-volcengine` repo](https://github.com/volcengine/terraform-provider-volcengine/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}